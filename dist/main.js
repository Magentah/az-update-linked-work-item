var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@actions/github/lib/context.js
var require_context = __commonJS({
  "node_modules/@actions/github/lib/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    var fs_1 = require("fs");
    var os_1 = require("os");
    var Context = class {
      constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
          if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
            this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
          } else {
            const path = process.env.GITHUB_EVENT_PATH;
            process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
          }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
      }
      get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
      }
      get repo() {
        if (process.env.GITHUB_REPOSITORY) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          return { owner, repo };
        }
        if (this.payload.repository) {
          return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
          };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
      }
    };
    exports.Context = Context;
  }
});

// node_modules/@actions/http-client/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getProxyUrl(reqUrl) {
      let usingSsl = reqUrl.protocol === "https:";
      let proxyUrl;
      if (checkBypass(reqUrl)) {
        return proxyUrl;
      }
      let proxyVar;
      if (usingSsl) {
        proxyVar = process.env["https_proxy"] || process.env["HTTPS_PROXY"];
      } else {
        proxyVar = process.env["http_proxy"] || process.env["HTTP_PROXY"];
      }
      if (proxyVar) {
        proxyUrl = new URL(proxyVar);
      }
      return proxyUrl;
    }
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      let noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      let upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (let upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
          return true;
        }
      }
      return false;
    }
    exports.checkBypass = checkBypass;
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/@actions/http-client/index.js
var require_http_client = __commonJS({
  "node_modules/@actions/http-client/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var http = require("http");
    var https = require("https");
    var pm = require_proxy();
    var tunnel;
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers = exports.Headers || (exports.Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      let proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return new Promise(async (resolve, reject) => {
          let output = Buffer.alloc(0);
          this.message.on("data", (chunk) => {
            output = Buffer.concat([output, chunk]);
          });
          this.message.on("end", () => {
            resolve(output.toString());
          });
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      let parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
      }
      get(requestUrl, additionalHeaders) {
        return this.request("GET", requestUrl, null, additionalHeaders || {});
      }
      del(requestUrl, additionalHeaders) {
        return this.request("DELETE", requestUrl, null, additionalHeaders || {});
      }
      post(requestUrl, data, additionalHeaders) {
        return this.request("POST", requestUrl, data, additionalHeaders || {});
      }
      patch(requestUrl, data, additionalHeaders) {
        return this.request("PATCH", requestUrl, data, additionalHeaders || {});
      }
      put(requestUrl, data, additionalHeaders) {
        return this.request("PUT", requestUrl, data, additionalHeaders || {});
      }
      head(requestUrl, additionalHeaders) {
        return this.request("HEAD", requestUrl, null, additionalHeaders || {});
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return this.request(verb, requestUrl, stream, additionalHeaders);
      }
      async getJson(requestUrl, additionalHeaders = {}) {
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        let res = await this.get(requestUrl, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      }
      async postJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.post(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      }
      async putJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.put(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      }
      async patchJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.patch(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      }
      async request(verb, requestUrl, data, headers) {
        if (this._disposed) {
          throw new Error("Client has already been disposed.");
        }
        let parsedUrl = new URL(requestUrl);
        let info = this._prepareRequest(verb, parsedUrl, headers);
        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1 ? this._maxRetries + 1 : 1;
        let numTries = 0;
        let response;
        while (numTries < maxTries) {
          response = await this.requestRaw(info, data);
          if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
            let authenticationHandler;
            for (let i = 0; i < this.handlers.length; i++) {
              if (this.handlers[i].canHandleAuthentication(response)) {
                authenticationHandler = this.handlers[i];
                break;
              }
            }
            if (authenticationHandler) {
              return authenticationHandler.handleAuthentication(this, info, data);
            } else {
              return response;
            }
          }
          let redirectsRemaining = this._maxRedirects;
          while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 && this._allowRedirects && redirectsRemaining > 0) {
            const redirectUrl = response.message.headers["location"];
            if (!redirectUrl) {
              break;
            }
            let parsedRedirectUrl = new URL(redirectUrl);
            if (parsedUrl.protocol == "https:" && parsedUrl.protocol != parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
              throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
            }
            await response.readBody();
            if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
              for (let header in headers) {
                if (header.toLowerCase() === "authorization") {
                  delete headers[header];
                }
              }
            }
            info = this._prepareRequest(verb, parsedRedirectUrl, headers);
            response = await this.requestRaw(info, data);
            redirectsRemaining--;
          }
          if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {
            return response;
          }
          numTries += 1;
          if (numTries < maxTries) {
            await response.readBody();
            await this._performExponentialBackoff(numTries);
          }
        }
        return response;
      }
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      requestRaw(info, data) {
        return new Promise((resolve, reject) => {
          let callbackForResult = function(err, res) {
            if (err) {
              reject(err);
            }
            resolve(res);
          };
          this.requestRawWithCallback(info, data, callbackForResult);
        });
      }
      requestRawWithCallback(info, data, onResult) {
        let socket;
        if (typeof data === "string") {
          info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        let handleResult = (err, res) => {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        };
        let req = info.httpModule.request(info.options, (msg) => {
          let res = new HttpClientResponse(msg);
          handleResult(null, res);
        });
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error("Request timeout: " + info.options.path), null);
        });
        req.on("error", function(err) {
          handleResult(err, null);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      getAgent(serverUrl) {
        let parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers["user-agent"] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers) {
          this.handlers.forEach((handler) => {
            handler.prepareRequest(info.options);
          });
        }
        return info;
      }
      _mergeHeaders(headers) {
        const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        let proxyUrl = pm.getProxyUrl(parsedUrl);
        let useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (!!agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (!!this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (useProxy) {
          if (!tunnel) {
            tunnel = require_tunnel2();
          }
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: {
              ...(proxyUrl.username || proxyUrl.password) && {
                proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
              },
              host: proxyUrl.hostname,
              port: proxyUrl.port
            }
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _performExponentialBackoff(retryNumber) {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise((resolve) => setTimeout(() => resolve(), ms));
      }
      static dateTimeDeserializer(key, value) {
        if (typeof value === "string") {
          let a = new Date(value);
          if (!isNaN(a.valueOf())) {
            return a;
          }
        }
        return value;
      }
      async _processResponse(res, options) {
        return new Promise(async (resolve, reject) => {
          const statusCode = res.message.statusCode;
          const response = {
            statusCode,
            result: null,
            headers: {}
          };
          if (statusCode == HttpCodes.NotFound) {
            resolve(response);
          }
          let obj;
          let contents;
          try {
            contents = await res.readBody();
            if (contents && contents.length > 0) {
              if (options && options.deserializeDates) {
                obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);
              } else {
                obj = JSON.parse(contents);
              }
              response.result = obj;
            }
            response.headers = res.message.headers;
          } catch (err) {
          }
          if (statusCode > 299) {
            let msg;
            if (obj && obj.message) {
              msg = obj.message;
            } else if (contents && contents.length > 0) {
              msg = contents;
            } else {
              msg = "Failed request: (" + statusCode + ")";
            }
            let err = new HttpClientError(msg, statusCode);
            err.result = response.result;
            reject(err);
          } else {
            resolve(response);
          }
        });
      }
    };
    exports.HttpClient = HttpClient;
  }
});

// node_modules/@actions/github/lib/internal/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/github/lib/internal/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0;
    var httpClient = __importStar(require_http_client());
    function getAuthString(token, options) {
      if (!token && !options.auth) {
        throw new Error("Parameter token or opts.auth is required");
      } else if (token && options.auth) {
        throw new Error("Parameters token and opts.auth may not both be specified");
      }
      return typeof options.auth === "string" ? options.auth : `token ${token}`;
    }
    exports.getAuthString = getAuthString;
    function getProxyAgent(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgent(destinationUrl);
    }
    exports.getProxyAgent = getProxyAgent;
    function getApiBaseUrl() {
      return process.env["GITHUB_API_URL"] || "https://api.github.com";
    }
    exports.getApiBaseUrl = getApiBaseUrl;
  }
});

// node_modules/universal-user-agent/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getUserAgent() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports.getUserAgent = getUserAgent;
  }
});

// node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/before-after-hook/lib/register.js"(exports, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/before-after-hook/lib/add.js"(exports, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook) {
      var orig = hook;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
          });
        };
      }
      state.registry[name].push({
        hook,
        orig
      });
    }
  }
});

// node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/before-after-hook/lib/remove.js"(exports, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/before-after-hook/index.js"(exports, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);
      hook.api = { remove: removeHookRef };
      hook.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook = register.bind(null, state);
      bindApi(hook, state);
      return hook;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/is-plain-object/dist/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/is-plain-object/dist/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isObject(o) {
      return Object.prototype.toString.call(o) === "[object Object]";
    }
    function isPlainObject(o) {
      var ctor, prot;
      if (isObject(o) === false)
        return false;
      ctor = o.constructor;
      if (ctor === void 0)
        return true;
      prot = ctor.prototype;
      if (isObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    }
    exports.isPlainObject = isPlainObject;
  }
});

// node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/@octokit/endpoint/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isPlainObject = require_is_plain_object();
    var universalUserAgent = require_dist_node();
    function lowercaseKeys(object) {
      if (!object) {
        return {};
      }
      return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
      }, {});
    }
    function mergeDeep(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject.isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, {
              [key]: options[key]
            });
          else
            result[key] = mergeDeep(defaults[key], options[key]);
        } else {
          Object.assign(result, {
            [key]: options[key]
          });
        }
      });
      return result;
    }
    function removeUndefinedProperties(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge(defaults, route, options) {
      if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? {
          method,
          url
        } : {
          url: method
        }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys(options.headers);
      removeUndefinedProperties(options);
      removeUndefinedProperties(options.headers);
      const mergedOptions = mergeDeep(defaults || {}, options);
      if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
      }
      mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
      return mergedOptions;
    }
    function addQueryParameters(url, parameters) {
      const separator = /\?/.test(url) ? "&" : "?";
      const names = Object.keys(parameters);
      if (names.length === 0) {
        return url;
      }
      return url + separator + names.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    var urlVariableRegex = /\{[^}]+\}/g;
    function removeNonChars(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames(url) {
      const matches = url.match(urlVariableRegex);
      if (!matches) {
        return [];
      }
      return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
    }
    function omit(object, keysToOmit) {
      return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
      }, {});
    }
    function encodeReserved(str) {
      return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(operator, value, key) {
      value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
      if (key) {
        return encodeUnreserved(key) + "=" + value;
      } else {
        return value;
      }
    }
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    function isKeyOperator(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues(context2, operator, key, modifier) {
      var value = context2[key], result = [];
      if (isDefined(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          value = value.toString();
          if (modifier && modifier !== "*") {
            value = value.substring(0, parseInt(modifier, 10));
          }
          result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
        } else {
          if (modifier === "*") {
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  result.push(encodeValue(operator, value[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                tmp.push(encodeValue(operator, value2));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  tmp.push(encodeUnreserved(k));
                  tmp.push(encodeValue(operator, value[k].toString()));
                }
              });
            }
            if (isKeyOperator(operator)) {
              result.push(encodeUnreserved(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined(value)) {
            result.push(encodeUnreserved(key));
          }
        } else if (value === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved(key) + "=");
        } else if (value === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl(template) {
      return {
        expand: expand.bind(null, template)
      };
    }
    function expand(template, context2) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
        if (expression) {
          let operator = "";
          const values = [];
          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }
          expression.split(/,/g).forEach(function(variable) {
            var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push(getValues(context2, operator, tmp[1], tmp[2] || tmp[3]));
          });
          if (operator && operator !== "+") {
            var separator = ",";
            if (operator === "?") {
              separator = "&";
            } else if (operator !== "#") {
              separator = operator;
            }
            return (values.length !== 0 ? operator : "") + values.join(separator);
          } else {
            return values.join(",");
          }
        } else {
          return encodeReserved(literal);
        }
      });
    }
    function parse(options) {
      let method = options.method.toUpperCase();
      let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit(options, ["method", "baseUrl", "url", "headers", "request", "mediaType"]);
      const urlVariableNames = extractUrlVariableNames(url);
      url = parseUrl(url).expand(parameters);
      if (!/^http/.test(url)) {
        url = options.baseUrl + url;
      }
      const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
      const remainingParameters = omit(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
        }
        if (options.mediaType.previews.length) {
          const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
          headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
            const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
            return `application/vnd.github.${preview}-preview${format}`;
          }).join(",");
        }
      }
      if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          } else {
            headers["content-length"] = 0;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign({
        method,
        url,
        headers
      }, typeof body !== "undefined" ? {
        body
      } : null, options.request ? {
        request: options.request
      } : null);
    }
    function endpointWithDefaults(defaults, route, options) {
      return parse(merge(defaults, route, options));
    }
    function withDefaults(oldDefaults, newDefaults) {
      const DEFAULTS2 = merge(oldDefaults, newDefaults);
      const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
      return Object.assign(endpoint2, {
        DEFAULTS: DEFAULTS2,
        defaults: withDefaults.bind(null, DEFAULTS2),
        merge: merge.bind(null, DEFAULTS2),
        parse
      });
    }
    var VERSION = "6.0.12";
    var userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`;
    var DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: "",
        previews: []
      }
    };
    var endpoint = withDefaults(null, DEFAULTS);
    exports.endpoint = endpoint;
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error = true;
          break;
        }
      }
      return {
        label,
        error
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports, module2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils2();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL2(url) {
      if (!this || this[impl] || !(this instanceof URL2)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL2.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL2.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL2.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL2.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL2.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL2,
      expose: {
        Window: { URL: URL2 },
        Worker: { URL: URL2 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/node-fetch/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/node-fetch/lib/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(new Blob([], {
            type: ct.toLowerCase()
          }), {
            [BUFFER]: buf
          });
        });
      },
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      buffer() {
        return consumeBody.call(this);
      },
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class {
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      raw() {
        return this[MAP];
      }
      keys() {
        return createHeadersIterator(this, "key");
      }
      values() {
        return createHeadersIterator(this, "value");
      }
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      clone() {
        return new Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL2 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL2(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      clone() {
        return new Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    function fetch(url, opts) {
      if (!fetch.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch.Promise;
      return new fetch.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error = new AbortError("The user aborted a request.");
          reject(error);
          if (request.body && request.body instanceof Stream.Readable) {
            request.body.destroy(error);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          finalize();
        });
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    fetch.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch.Promise = global.Promise;
    module2.exports = exports = fetch;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports;
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.FetchError = FetchError;
  }
});

// node_modules/deprecation/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/deprecation/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
    exports.Deprecation = Deprecation;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@octokit/request-error/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var deprecation = require_dist_node3();
    var once = _interopDefault(require_once());
    var logOnceCode = once((deprecation2) => console.warn(deprecation2));
    var logOnceHeaders = once((deprecation2) => console.warn(deprecation2));
    var RequestError = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(new deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
            return headers || {};
          }
        });
      }
    };
    exports.RequestError = RequestError;
  }
});

// node_modules/@octokit/request/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@octokit/request/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var endpoint = require_dist_node2();
    var universalUserAgent = require_dist_node();
    var isPlainObject = require_is_plain_object();
    var nodeFetch = _interopDefault(require_lib2());
    var requestError = require_dist_node4();
    var VERSION = "5.6.3";
    function getBufferResponse(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper(requestOptions) {
      const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url;
      const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;
      return fetch(requestOptions.url, Object.assign({
        method: requestOptions.method,
        body: requestOptions.body,
        headers: requestOptions.headers,
        redirect: requestOptions.redirect
      }, requestOptions.request)).then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches && matches.pop();
          log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new requestError.RequestError(response.statusText, status, {
            response: {
              url,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new requestError.RequestError("Not modified", status, {
            response: {
              url,
              status,
              headers,
              data: await getResponseData(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData(response);
          const error = new requestError.RequestError(toErrorMessage(data), status, {
            response: {
              url,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error;
        }
        return getResponseData(response);
      }).then((data) => {
        return {
          status,
          url,
          headers,
          data
        };
      }).catch((error) => {
        if (error instanceof requestError.RequestError)
          throw error;
        throw new requestError.RequestError(error.message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json();
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse(response);
    }
    function toErrorMessage(data) {
      if (typeof data === "string")
        return data;
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        }
        return data.message;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults(oldEndpoint, newDefaults) {
      const endpoint2 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint2.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper(endpoint2.parse(endpointOptions));
        }
        const request2 = (route2, parameters2) => {
          return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
        };
        Object.assign(request2, {
          endpoint: endpoint2,
          defaults: withDefaults.bind(null, endpoint2)
        });
        return endpointOptions.request.hook(request2, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint2,
        defaults: withDefaults.bind(null, endpoint2)
      });
    }
    var request = withDefaults(endpoint.endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`
      }
    });
    exports.request = request;
  }
});

// node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node6 = __commonJS({
  "node_modules/@octokit/graphql/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var request = require_dist_node5();
    var universalUserAgent = require_dist_node();
    var VERSION = "4.8.0";
    function _buildMessageForResponseErrors(data) {
      return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
    }
    var GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
    var NON_VARIABLE_OPTIONS = ["method", "baseUrl", "url", "headers", "request", "query", "mediaType"];
    var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({
        query
      }, options) : query;
      const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(requestOptions, headers, response.data);
        }
        return response.data.data;
      });
    }
    function withDefaults(request$1, newDefaults) {
      const newRequest = request$1.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults.bind(null, newRequest),
        endpoint: request.request.endpoint
      });
    }
    var graphql$1 = withDefaults(request.request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
    exports.GraphqlResponseError = GraphqlResponseError;
    exports.graphql = graphql$1;
    exports.withCustomRequest = withCustomRequest;
  }
});

// node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node7 = __commonJS({
  "node_modules/@octokit/auth-token/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    var REGEX_IS_INSTALLATION = /^ghs_/;
    var REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request, route, parameters) {
      const endpoint = request.endpoint.merge(route, parameters);
      endpoint.headers.authorization = withAuthorizationPrefix(token);
      return request(endpoint);
    }
    var createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
    exports.createTokenAuth = createTokenAuth;
  }
});

// node_modules/@octokit/core/dist-node/index.js
var require_dist_node8 = __commonJS({
  "node_modules/@octokit/core/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var universalUserAgent = require_dist_node();
    var beforeAfterHook = require_before_after_hook();
    var request = require_dist_node5();
    var graphql = require_dist_node6();
    var authToken = require_dist_node7();
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var VERSION = "3.5.1";
    var _excluded = ["authStrategy"];
    var Octokit = class {
      constructor(options = {}) {
        const hook = new beforeAfterHook.Collection();
        const requestDefaults = {
          baseUrl: request.request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            hook: hook.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(" ");
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = request.request.defaults(requestDefaults);
        this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);
        this.log = Object.assign({
          debug: () => {
          },
          info: () => {
          },
          warn: console.warn.bind(console),
          error: console.error.bind(console)
        }, options.log);
        this.hook = hook;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth = authToken.createTokenAuth(options.auth);
            hook.wrap("request", auth.hook);
            this.auth = auth;
          }
        } else {
          const {
            authStrategy
          } = options, otherOptions = _objectWithoutProperties(options, _excluded);
          const auth = authStrategy(Object.assign({
            request: this.request,
            log: this.log,
            octokit: this,
            octokitOptions: otherOptions
          }, options.auth));
          hook.wrap("request", auth.hook);
          this.auth = auth;
        }
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin) => {
          Object.assign(this, plugin(this, options));
        });
      }
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null));
          }
        };
        return OctokitWithDefaults;
      }
      static plugin(...newPlugins) {
        var _a;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a = class extends this {
        }, _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a);
        return NewOctokit;
      }
    };
    Octokit.VERSION = VERSION;
    Octokit.plugins = [];
    exports.Octokit = Octokit;
  }
});

// node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node9 = __commonJS({
  "node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Endpoints = {
      actions: {
        addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
        approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
        cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
        createOrUpdateEnvironmentSecret: ["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
        createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
        createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
        deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        deleteEnvironmentSecret: ["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
        deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
        disableSelectedRepositoryGithubActionsOrganization: ["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],
        disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
        downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
        downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
        downloadWorkflowRunAttemptLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],
        downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
        enableSelectedRepositoryGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],
        enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
        getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
        getAllowedActionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getEnvironmentPublicKey: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],
        getEnvironmentSecret: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
        getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getPendingDeploymentsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
        getRepoPermissions: ["GET /repos/{owner}/{repo}/actions/permissions", {}, {
          renamed: ["actions", "getGithubActionsPermissionsRepository"]
        }],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],
        getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
        getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],
        listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
        listJobsForWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
        listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
        listSelectedRepositoriesEnabledGithubActionsOrganization: ["GET /orgs/{org}/actions/permissions/repositories"],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
        listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
        reviewPendingDeploymentsForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
        setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
        setAllowedActionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],
        setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
        setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
        setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],
        setSelectedRepositoriesEnabledGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories"]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
      },
      apps: {
        addRepoToInstallation: ["PUT /user/installations/{installation_id}/repositories/{repository_id}", {}, {
          renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"]
        }],
        addRepoToInstallationForAuthenticatedUser: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
        checkToken: ["POST /applications/{client_id}/token"],
        createContentAttachment: ["POST /content_references/{content_reference_id}/attachments", {
          mediaType: {
            previews: ["corsair"]
          }
        }],
        createContentAttachmentForRepo: ["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments", {
          mediaType: {
            previews: ["corsair"]
          }
        }],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
        getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
        listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
        removeRepoFromInstallation: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}", {}, {
          renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"]
        }],
        removeRepoFromInstallationForAuthenticatedUser: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"]
      },
      billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
        getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
        getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
      },
      checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
        rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
        setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
      },
      codeScanning: {
        deleteAnalysis: ["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],
        getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", {}, {
          renamedParameters: {
            alert_id: "alert_number"
          }
        }],
        getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", {}, {
          renamed: ["codeScanning", "listAlertInstances"]
        }],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
      },
      codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"]
      },
      emojis: {
        get: ["GET /emojis"]
      },
      enterpriseAdmin: {
        disableSelectedOrganizationGithubActionsEnterprise: ["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
        enableSelectedOrganizationGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
        getAllowedActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],
        getGithubActionsPermissionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions"],
        listSelectedOrganizationsEnabledGithubActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/organizations"],
        setAllowedActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],
        setGithubActionsPermissionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions"],
        setSelectedOrganizationsEnabledGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations"]
      },
      gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
      },
      git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
      },
      gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"]
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: ["GET /user/interaction-limits", {}, {
          renamed: ["interactions", "getRestrictionsForAuthenticatedUser"]
        }],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
        removeRestrictionsForYourPublicRepos: ["DELETE /user/interaction-limits", {}, {
          renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"]
        }],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: ["PUT /user/interaction-limits", {}, {
          renamed: ["interactions", "setRestrictionsForAuthenticatedUser"]
        }]
      },
      issues: {
        addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
        removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
      },
      licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"]
      },
      markdown: {
        render: ["POST /markdown"],
        renderRaw: ["POST /markdown/raw", {
          headers: {
            "content-type": "text/plain; charset=utf-8"
          }
        }]
      },
      meta: {
        get: ["GET /meta"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"]
      },
      migrations: {
        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
        deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
        deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
        downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
        getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: ["GET /user/migrations/{migration_id}/repositories", {}, {
          renamed: ["migrations", "listReposForAuthenticatedUser"]
        }],
        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: ["PUT /repos/{owner}/{repo}/import"],
        unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],
        unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
        updateImport: ["PATCH /repos/{owner}/{repo}/import"]
      },
      orgs: {
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createWebhook: ["POST /orgs/{org}/hooks"],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        get: ["GET /orgs/{org}"],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: ["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
        removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
      },
      packages: {
        deletePackageForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}"],
        deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
        deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
        deletePackageVersionForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        deletePackageVersionForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        deletePackageVersionForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getAllPackageVersionsForAPackageOwnedByAnOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions", {}, {
          renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"]
        }],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions", {}, {
          renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]
        }],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions"],
        getAllPackageVersionsForPackageOwnedByOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],
        getAllPackageVersionsForPackageOwnedByUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions"],
        getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
        getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
        getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
        getPackageVersionForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getPackageVersionForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getPackageVersionForUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageVersionForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
        restorePackageVersionForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
        restorePackageVersionForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]
      },
      projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"]
      },
      pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
        deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
        updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
      },
      rateLimit: {
        get: ["GET /rate_limit"]
      },
      reactions: {
        createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
        createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
        createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
        createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
        createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
        createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],
        deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],
        deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],
        deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],
        listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
        listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
        listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
        listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]
      },
      repos: {
        acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}", {}, {
          renamed: ["repos", "acceptInvitationForAuthenticatedUser"]
        }],
        acceptInvitationForAuthenticatedUser: ["PATCH /user/repository_invitations/{invitation_id}"],
        addAppAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        addTeamAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        addUserAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
        createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}", {}, {
          renamed: ["repos", "declineInvitationForAuthenticatedUser"]
        }],
        declineInvitationForAuthenticatedUser: ["DELETE /user/repository_invitations/{invitation_id}"],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
        deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
        disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
        disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
        downloadArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}", {}, {
          renamed: ["repos", "downloadZipballArchive"]
        }],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
        enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
        enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
        generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
        getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
        getAllTopics: ["GET /repos/{owner}/{repo}/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
        getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
        getWebhookDelivery: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],
        listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
        removeAppAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
        removeStatusCheckContexts: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        removeTeamAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        removeUserAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        setAppAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        setStatusCheckContexts: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        setTeamAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        setUserAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
        updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        updateStatusCheckPotection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", {}, {
          renamed: ["repos", "updateStatusCheckProtection"]
        }],
        updateStatusCheckProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
        uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", {
          baseUrl: "https://uploads.github.com"
        }]
      },
      search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        users: ["GET /search/users"]
      },
      secretScanning: {
        getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
      },
      users: {
        addEmailForAuthenticated: ["POST /user/emails", {}, {
          renamed: ["users", "addEmailForAuthenticatedUser"]
        }],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: ["POST /user/gpg_keys", {}, {
          renamed: ["users", "createGpgKeyForAuthenticatedUser"]
        }],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: ["POST /user/keys", {}, {
          renamed: ["users", "createPublicSshKeyForAuthenticatedUser"]
        }],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        deleteEmailForAuthenticated: ["DELETE /user/emails", {}, {
          renamed: ["users", "deleteEmailForAuthenticatedUser"]
        }],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}", {}, {
          renamed: ["users", "deleteGpgKeyForAuthenticatedUser"]
        }],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}", {}, {
          renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"]
        }],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}", {}, {
          renamed: ["users", "getGpgKeyForAuthenticatedUser"]
        }],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}", {}, {
          renamed: ["users", "getPublicSshKeyForAuthenticatedUser"]
        }],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        list: ["GET /users"],
        listBlockedByAuthenticated: ["GET /user/blocks", {}, {
          renamed: ["users", "listBlockedByAuthenticatedUser"]
        }],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: ["GET /user/emails", {}, {
          renamed: ["users", "listEmailsForAuthenticatedUser"]
        }],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: ["GET /user/following", {}, {
          renamed: ["users", "listFollowedByAuthenticatedUser"]
        }],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: ["GET /user/gpg_keys", {}, {
          renamed: ["users", "listGpgKeysForAuthenticatedUser"]
        }],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: ["GET /user/public_emails", {}, {
          renamed: ["users", "listPublicEmailsForAuthenticatedUser"]
        }],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: ["GET /user/keys", {}, {
          renamed: ["users", "listPublicSshKeysForAuthenticatedUser"]
        }],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility", {}, {
          renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"]
        }],
        setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"]
      }
    };
    var VERSION = "5.13.0";
    function endpointsToMethods(octokit, endpointsMap) {
      const newMethods = {};
      for (const [scope, endpoints] of Object.entries(endpointsMap)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
          const [route, defaults, decorations] = endpoint;
          const [method, url] = route.split(/ /);
          const endpointDefaults = Object.assign({
            method,
            url
          }, defaults);
          if (!newMethods[scope]) {
            newMethods[scope] = {};
          }
          const scopeMethods = newMethods[scope];
          if (decorations) {
            scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
            continue;
          }
          scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
        }
      }
      return newMethods;
    }
    function decorate(octokit, scope, methodName, defaults, decorations) {
      const requestWithDefaults = octokit.request.defaults(defaults);
      function withDecorations(...args) {
        let options = requestWithDefaults.endpoint.merge(...args);
        if (decorations.mapToData) {
          options = Object.assign({}, options, {
            data: options[decorations.mapToData],
            [decorations.mapToData]: void 0
          });
          return requestWithDefaults(options);
        }
        if (decorations.renamed) {
          const [newScope, newMethodName] = decorations.renamed;
          octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
        }
        if (decorations.deprecated) {
          octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
          const options2 = requestWithDefaults.endpoint.merge(...args);
          for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
            if (name in options2) {
              octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
              if (!(alias in options2)) {
                options2[alias] = options2[name];
              }
              delete options2[name];
            }
          }
          return requestWithDefaults(options2);
        }
        return requestWithDefaults(...args);
      }
      return Object.assign(withDecorations, requestWithDefaults);
    }
    function restEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit, Endpoints);
      return {
        rest: api
      };
    }
    restEndpointMethods.VERSION = VERSION;
    function legacyRestEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit, Endpoints);
      return _objectSpread2(_objectSpread2({}, api), {}, {
        rest: api
      });
    }
    legacyRestEndpointMethods.VERSION = VERSION;
    exports.legacyRestEndpointMethods = legacyRestEndpointMethods;
    exports.restEndpointMethods = restEndpointMethods;
  }
});

// node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node10 = __commonJS({
  "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION = "2.17.0";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function normalizePaginatedListResponse(response) {
      if (!response.data) {
        return _objectSpread2(_objectSpread2({}, response), {}, {
          data: []
        });
      }
      const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
      if (!responseNeedsNormalization)
        return response;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data = response.data[namespaceKey];
      response.data = data;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      return response;
    }
    function iterator(octokit, route, parameters) {
      const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
      const requestMethod = typeof route === "function" ? route : octokit.request;
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!url)
              return {
                done: true
              };
            try {
              const response = await requestMethod({
                method,
                url,
                headers
              });
              const normalizedResponse = normalizePaginatedListResponse(response);
              url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
              return {
                value: normalizedResponse
              };
            } catch (error) {
              if (error.status !== 409)
                throw error;
              url = "";
              return {
                value: {
                  status: 200,
                  headers: {},
                  data: []
                }
              };
            }
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done() {
          earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    var composePaginateRest = Object.assign(paginate, {
      iterator
    });
    var paginatingEndpoints = ["GET /app/hook/deliveries", "GET /app/installations", "GET /applications/grants", "GET /authorizations", "GET /enterprises/{enterprise}/actions/permissions/organizations", "GET /enterprises/{enterprise}/actions/runner-groups", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", "GET /enterprises/{enterprise}/actions/runners", "GET /enterprises/{enterprise}/actions/runners/downloads", "GET /events", "GET /gists", "GET /gists/public", "GET /gists/starred", "GET /gists/{gist_id}/comments", "GET /gists/{gist_id}/commits", "GET /gists/{gist_id}/forks", "GET /installation/repositories", "GET /issues", "GET /marketplace_listing/plans", "GET /marketplace_listing/plans/{plan_id}/accounts", "GET /marketplace_listing/stubbed/plans", "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts", "GET /networks/{owner}/{repo}/events", "GET /notifications", "GET /organizations", "GET /orgs/{org}/actions/permissions/repositories", "GET /orgs/{org}/actions/runner-groups", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners", "GET /orgs/{org}/actions/runners", "GET /orgs/{org}/actions/runners/downloads", "GET /orgs/{org}/actions/secrets", "GET /orgs/{org}/actions/secrets/{secret_name}/repositories", "GET /orgs/{org}/blocks", "GET /orgs/{org}/credential-authorizations", "GET /orgs/{org}/events", "GET /orgs/{org}/failed_invitations", "GET /orgs/{org}/hooks", "GET /orgs/{org}/hooks/{hook_id}/deliveries", "GET /orgs/{org}/installations", "GET /orgs/{org}/invitations", "GET /orgs/{org}/invitations/{invitation_id}/teams", "GET /orgs/{org}/issues", "GET /orgs/{org}/members", "GET /orgs/{org}/migrations", "GET /orgs/{org}/migrations/{migration_id}/repositories", "GET /orgs/{org}/outside_collaborators", "GET /orgs/{org}/packages", "GET /orgs/{org}/projects", "GET /orgs/{org}/public_members", "GET /orgs/{org}/repos", "GET /orgs/{org}/secret-scanning/alerts", "GET /orgs/{org}/team-sync/groups", "GET /orgs/{org}/teams", "GET /orgs/{org}/teams/{team_slug}/discussions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/invitations", "GET /orgs/{org}/teams/{team_slug}/members", "GET /orgs/{org}/teams/{team_slug}/projects", "GET /orgs/{org}/teams/{team_slug}/repos", "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings", "GET /orgs/{org}/teams/{team_slug}/teams", "GET /projects/columns/{column_id}/cards", "GET /projects/{project_id}/collaborators", "GET /projects/{project_id}/columns", "GET /repos/{owner}/{repo}/actions/artifacts", "GET /repos/{owner}/{repo}/actions/runners", "GET /repos/{owner}/{repo}/actions/runners/downloads", "GET /repos/{owner}/{repo}/actions/runs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs", "GET /repos/{owner}/{repo}/actions/secrets", "GET /repos/{owner}/{repo}/actions/workflows", "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", "GET /repos/{owner}/{repo}/assignees", "GET /repos/{owner}/{repo}/autolinks", "GET /repos/{owner}/{repo}/branches", "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", "GET /repos/{owner}/{repo}/code-scanning/alerts", "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", "GET /repos/{owner}/{repo}/code-scanning/analyses", "GET /repos/{owner}/{repo}/collaborators", "GET /repos/{owner}/{repo}/comments", "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/commits", "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments", "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls", "GET /repos/{owner}/{repo}/commits/{ref}/check-runs", "GET /repos/{owner}/{repo}/commits/{ref}/check-suites", "GET /repos/{owner}/{repo}/commits/{ref}/statuses", "GET /repos/{owner}/{repo}/contributors", "GET /repos/{owner}/{repo}/deployments", "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses", "GET /repos/{owner}/{repo}/events", "GET /repos/{owner}/{repo}/forks", "GET /repos/{owner}/{repo}/git/matching-refs/{ref}", "GET /repos/{owner}/{repo}/hooks", "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries", "GET /repos/{owner}/{repo}/invitations", "GET /repos/{owner}/{repo}/issues", "GET /repos/{owner}/{repo}/issues/comments", "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/issues/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/comments", "GET /repos/{owner}/{repo}/issues/{issue_number}/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/labels", "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions", "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline", "GET /repos/{owner}/{repo}/keys", "GET /repos/{owner}/{repo}/labels", "GET /repos/{owner}/{repo}/milestones", "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels", "GET /repos/{owner}/{repo}/notifications", "GET /repos/{owner}/{repo}/pages/builds", "GET /repos/{owner}/{repo}/projects", "GET /repos/{owner}/{repo}/pulls", "GET /repos/{owner}/{repo}/pulls/comments", "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments", "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits", "GET /repos/{owner}/{repo}/pulls/{pull_number}/files", "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", "GET /repos/{owner}/{repo}/releases", "GET /repos/{owner}/{repo}/releases/{release_id}/assets", "GET /repos/{owner}/{repo}/secret-scanning/alerts", "GET /repos/{owner}/{repo}/stargazers", "GET /repos/{owner}/{repo}/subscribers", "GET /repos/{owner}/{repo}/tags", "GET /repos/{owner}/{repo}/teams", "GET /repositories", "GET /repositories/{repository_id}/environments/{environment_name}/secrets", "GET /scim/v2/enterprises/{enterprise}/Groups", "GET /scim/v2/enterprises/{enterprise}/Users", "GET /scim/v2/organizations/{org}/Users", "GET /search/code", "GET /search/commits", "GET /search/issues", "GET /search/labels", "GET /search/repositories", "GET /search/topics", "GET /search/users", "GET /teams/{team_id}/discussions", "GET /teams/{team_id}/discussions/{discussion_number}/comments", "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /teams/{team_id}/discussions/{discussion_number}/reactions", "GET /teams/{team_id}/invitations", "GET /teams/{team_id}/members", "GET /teams/{team_id}/projects", "GET /teams/{team_id}/repos", "GET /teams/{team_id}/team-sync/group-mappings", "GET /teams/{team_id}/teams", "GET /user/blocks", "GET /user/emails", "GET /user/followers", "GET /user/following", "GET /user/gpg_keys", "GET /user/installations", "GET /user/installations/{installation_id}/repositories", "GET /user/issues", "GET /user/keys", "GET /user/marketplace_purchases", "GET /user/marketplace_purchases/stubbed", "GET /user/memberships/orgs", "GET /user/migrations", "GET /user/migrations/{migration_id}/repositories", "GET /user/orgs", "GET /user/packages", "GET /user/public_emails", "GET /user/repos", "GET /user/repository_invitations", "GET /user/starred", "GET /user/subscriptions", "GET /user/teams", "GET /users", "GET /users/{username}/events", "GET /users/{username}/events/orgs/{org}", "GET /users/{username}/events/public", "GET /users/{username}/followers", "GET /users/{username}/following", "GET /users/{username}/gists", "GET /users/{username}/gpg_keys", "GET /users/{username}/keys", "GET /users/{username}/orgs", "GET /users/{username}/packages", "GET /users/{username}/projects", "GET /users/{username}/received_events", "GET /users/{username}/received_events/public", "GET /users/{username}/repos", "GET /users/{username}/starred", "GET /users/{username}/subscriptions"];
    function isPaginatingEndpoint(arg) {
      if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
      } else {
        return false;
      }
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION;
    exports.composePaginateRest = composePaginateRest;
    exports.isPaginatingEndpoint = isPaginatingEndpoint;
    exports.paginateRest = paginateRest;
    exports.paginatingEndpoints = paginatingEndpoints;
  }
});

// node_modules/@actions/github/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/@actions/github/lib/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOctokitOptions = exports.GitHub = exports.context = void 0;
    var Context = __importStar(require_context());
    var Utils = __importStar(require_utils());
    var core_1 = require_dist_node8();
    var plugin_rest_endpoint_methods_1 = require_dist_node9();
    var plugin_paginate_rest_1 = require_dist_node10();
    exports.context = new Context.Context();
    var baseUrl = Utils.getApiBaseUrl();
    var defaults = {
      baseUrl,
      request: {
        agent: Utils.getProxyAgent(baseUrl)
      }
    };
    exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(defaults);
    function getOctokitOptions(token, options) {
      const opts = Object.assign({}, options || {});
      const auth = Utils.getAuthString(token, opts);
      if (auth) {
        opts.auth = auth;
      }
      return opts;
    }
    exports.getOctokitOptions = getOctokitOptions;
  }
});

// node_modules/@actions/github/lib/github.js
var require_github = __commonJS({
  "node_modules/@actions/github/lib/github.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOctokit = exports.context = void 0;
    var Context = __importStar(require_context());
    var utils_1 = require_utils3();
    exports.context = new Context.Context();
    function getOctokit(token, options) {
      return new utils_1.GitHub(utils_1.getOctokitOptions(token, options));
    }
    exports.getOctokit = getOctokit;
  }
});

// node_modules/azure-devops-node-api/VsoClient.js
var require_VsoClient = __commonJS({
  "node_modules/azure-devops-node-api/VsoClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var url = require("url");
    var path = require("path");
    var InvalidApiResourceVersionError = class {
      constructor(message) {
        this.name = "Invalid resource version";
        this.message = message;
      }
    };
    exports.InvalidApiResourceVersionError = InvalidApiResourceVersionError;
    var VsoClient = class {
      constructor(baseUrl, restClient) {
        this.baseUrl = baseUrl;
        this.basePath = url.parse(baseUrl).pathname;
        this.restClient = restClient;
        this._locationsByAreaPromises = {};
        this._initializationPromise = Promise.resolve(true);
      }
      autoNegotiateApiVersion(location, requestedVersion) {
        let negotiatedVersion;
        let apiVersion;
        let apiVersionString;
        if (requestedVersion) {
          let apiVersionRegEx = new RegExp("(\\d+(\\.\\d+)?)(-preview(\\.(\\d+))?)?");
          let isPreview = false;
          let resourceVersion;
          let regExExecArray = apiVersionRegEx.exec(requestedVersion);
          if (regExExecArray) {
            if (regExExecArray[1]) {
              apiVersion = +regExExecArray[1];
              apiVersionString = regExExecArray[1];
              if (regExExecArray[3]) {
                isPreview = true;
                if (regExExecArray[5]) {
                  resourceVersion = +regExExecArray[5];
                }
              }
              if (apiVersion <= +location.releasedVersion || !resourceVersion && apiVersion <= +location.maxVersion && isPreview || resourceVersion && apiVersion <= +location.maxVersion && resourceVersion <= +location.resourceVersion) {
                negotiatedVersion = requestedVersion;
              }
            }
          }
        }
        if (!negotiatedVersion) {
          if (apiVersion < +location.maxVersion) {
            negotiatedVersion = apiVersionString + "-preview";
          } else if (location.maxVersion === location.releasedVersion) {
            negotiatedVersion = location.maxVersion;
          } else {
            negotiatedVersion = location.maxVersion + "-preview." + location.resourceVersion;
          }
        }
        return negotiatedVersion;
      }
      getVersioningData(apiVersion, area, locationId, routeValues, queryParams) {
        let requestUrl;
        return this.beginGetLocation(area, locationId).then((location) => {
          if (!location) {
            throw new Error("Failed to find api location for area: " + area + " id: " + locationId);
          }
          apiVersion = this.autoNegotiateApiVersion(location, apiVersion);
          requestUrl = this.getRequestUrl(location.routeTemplate, location.area, location.resourceName, routeValues, queryParams);
          return {
            apiVersion,
            requestUrl
          };
        });
      }
      _setInitializationPromise(promise) {
        if (promise) {
          this._initializationPromise = promise;
        }
      }
      beginGetLocation(area, locationId) {
        return this._initializationPromise.then(() => {
          return this.beginGetAreaLocations(area);
        }).then((areaLocations) => {
          return areaLocations[(locationId || "").toLowerCase()];
        });
      }
      beginGetAreaLocations(area) {
        let areaLocationsPromise = this._locationsByAreaPromises[area];
        if (!areaLocationsPromise) {
          let requestUrl = this.resolveUrl(VsoClient.APIS_RELATIVE_PATH + "/" + area);
          areaLocationsPromise = this.restClient.options(requestUrl).then((res) => {
            let locationsLookup = {};
            let resourceLocations = res.result.value;
            let i;
            for (i = 0; i < resourceLocations.length; i++) {
              let resourceLocation = resourceLocations[i];
              locationsLookup[resourceLocation.id.toLowerCase()] = resourceLocation;
            }
            this._locationsByAreaPromises[area] = areaLocationsPromise;
            return locationsLookup;
          });
        }
        return areaLocationsPromise;
      }
      resolveUrl(relativeUrl) {
        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));
      }
      queryParamsToStringHelper(queryParams, prefix) {
        if (!queryParams) {
          return "";
        }
        let queryString = "";
        if (typeof queryParams !== "string") {
          for (let property in queryParams) {
            if (queryParams.hasOwnProperty(property)) {
              const prop = queryParams[property];
              const newPrefix = prefix + encodeURIComponent(property.toString()) + ".";
              queryString += this.queryParamsToStringHelper(prop, newPrefix);
            }
          }
        }
        if (queryString === "" && prefix.length > 0) {
          const queryValue = typeof queryParams === "object" && "toUTCString" in queryParams ? queryParams.toUTCString() : queryParams.toString();
          queryString = prefix.slice(0, -1) + "=" + encodeURIComponent(queryValue) + "&";
        }
        return queryString;
      }
      queryParamsToString(queryParams) {
        const queryString = "?" + this.queryParamsToStringHelper(queryParams, "");
        return queryString.slice(0, -1);
      }
      getRequestUrl(routeTemplate, area, resource, routeValues, queryParams) {
        routeValues = routeValues || {};
        if (!routeValues.area) {
          routeValues.area = area;
        }
        if (!routeValues.resource) {
          routeValues.resource = resource;
        }
        let relativeUrl = this.replaceRouteValues(routeTemplate, routeValues);
        if (queryParams) {
          relativeUrl += this.queryParamsToString(queryParams);
        }
        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));
      }
      replaceRouteValues(routeTemplate, routeValues) {
        let result = "", currentPathPart = "", paramName = "", insideParam = false, charIndex, routeTemplateLength = routeTemplate.length, c;
        for (charIndex = 0; charIndex < routeTemplateLength; charIndex++) {
          c = routeTemplate[charIndex];
          if (insideParam) {
            if (c == "}") {
              insideParam = false;
              if (routeValues[paramName]) {
                currentPathPart += encodeURIComponent(routeValues[paramName]);
              } else {
                let strippedParamName = paramName.replace(/[^a-z0-9]/ig, "");
                if (routeValues[strippedParamName]) {
                  currentPathPart += encodeURIComponent(routeValues[strippedParamName]);
                }
              }
              paramName = "";
            } else {
              paramName += c;
            }
          } else {
            if (c == "/") {
              if (currentPathPart) {
                if (result) {
                  result += "/";
                }
                result += currentPathPart;
                currentPathPart = "";
              }
            } else if (c == "{") {
              if (charIndex + 1 < routeTemplateLength && routeTemplate[charIndex + 1] == "{") {
                currentPathPart += c;
                charIndex++;
              } else {
                insideParam = true;
              }
            } else if (c == "}") {
              currentPathPart += c;
              if (charIndex + 1 < routeTemplateLength && routeTemplate[charIndex + 1] == "}") {
                charIndex++;
              }
            } else {
              currentPathPart += c;
            }
          }
        }
        if (currentPathPart) {
          if (result) {
            result += "/";
          }
          result += currentPathPart;
        }
        return result;
      }
    };
    VsoClient.APIS_RELATIVE_PATH = "_apis";
    VsoClient.PREVIEW_INDICATOR = "-preview.";
    exports.VsoClient = VsoClient;
  }
});

// node_modules/azure-devops-node-api/Serialization.js
var require_Serialization = __commonJS({
  "node_modules/azure-devops-node-api/Serialization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContractSerializer;
    (function(ContractSerializer2) {
      var _legacyDateRegExp;
      function serialize(data, contractMetadata, preserveOriginal) {
        if (data && contractMetadata) {
          if (Array.isArray(data)) {
            return _getTranslatedArray(data, contractMetadata, true, preserveOriginal);
          } else {
            return _getTranslatedObject(data, contractMetadata, true, preserveOriginal);
          }
        } else {
          return data;
        }
      }
      ContractSerializer2.serialize = serialize;
      function deserialize(data, contractMetadata, preserveOriginal, unwrapWrappedCollections) {
        if (data) {
          if (unwrapWrappedCollections && Array.isArray(data.value)) {
            data = data.value;
          }
          if (contractMetadata) {
            if (Array.isArray(data)) {
              data = _getTranslatedArray(data, contractMetadata, false, preserveOriginal);
            } else {
              data = _getTranslatedObject(data, contractMetadata, false, preserveOriginal);
            }
          }
        }
        return data;
      }
      ContractSerializer2.deserialize = deserialize;
      function _getTranslatedArray(array, typeMetadata, serialize2, preserveOriginal) {
        var resultArray = array;
        var arrayCopy = [];
        var i;
        for (i = 0; i < array.length; i++) {
          var item = array[i];
          var processedItem;
          if (Array.isArray(item)) {
            processedItem = _getTranslatedArray(item, typeMetadata, serialize2, preserveOriginal);
          } else {
            processedItem = _getTranslatedObject(item, typeMetadata, serialize2, preserveOriginal);
          }
          if (preserveOriginal) {
            arrayCopy.push(processedItem);
            if (processedItem !== item) {
              resultArray = arrayCopy;
            }
          } else {
            array[i] = processedItem;
          }
        }
        return resultArray;
      }
      function _getTranslatedObject(typeObject, typeMetadata, serialize2, preserveOriginal) {
        var processedItem = typeObject, copiedItem = false;
        if (typeObject && typeMetadata.fields) {
          for (var fieldName in typeMetadata.fields) {
            var fieldMetadata = typeMetadata.fields[fieldName];
            var fieldValue = typeObject[fieldName];
            var translatedValue = _getTranslatedField(fieldValue, fieldMetadata, serialize2, preserveOriginal);
            if (fieldValue !== translatedValue) {
              if (preserveOriginal && !copiedItem) {
                processedItem = this._extend({}, typeObject);
                copiedItem = true;
              }
              processedItem[fieldName] = translatedValue;
            }
          }
        }
        return processedItem;
      }
      function _getTranslatedField(fieldValue, fieldMetadata, serialize2, preserveOriginal) {
        if (!fieldValue) {
          return fieldValue;
        }
        if (fieldMetadata.isArray) {
          if (Array.isArray(fieldValue)) {
            var newArray = [], processedArray = fieldValue;
            for (var index = 0; index < fieldValue.length; index++) {
              var arrayValue = fieldValue[index];
              var processedValue = arrayValue;
              if (fieldMetadata.isDate) {
                processedValue = _getTranslatedDateValue(arrayValue, serialize2);
              } else if (fieldMetadata.enumType) {
                processedValue = _getTranslatedEnumValue(fieldMetadata.enumType, arrayValue, serialize2);
              } else if (fieldMetadata.typeInfo) {
                if (Array.isArray(arrayValue)) {
                  processedValue = _getTranslatedArray(arrayValue, fieldMetadata.typeInfo, serialize2, preserveOriginal);
                } else {
                  processedValue = _getTranslatedObject(arrayValue, fieldMetadata.typeInfo, serialize2, preserveOriginal);
                }
              }
              if (preserveOriginal) {
                newArray.push(processedValue);
                if (processedValue !== arrayValue) {
                  processedArray = newArray;
                }
              } else {
                fieldValue[index] = processedValue;
              }
            }
            return processedArray;
          } else {
            return fieldValue;
          }
        } else if (fieldMetadata.isDictionary) {
          var dictionaryModified = false;
          var newDictionary = {};
          for (var key in fieldValue) {
            var dictionaryValue = fieldValue[key];
            var newKey = key, newValue = dictionaryValue;
            if (fieldMetadata.dictionaryKeyIsDate) {
              newKey = _getTranslatedDateValue(key, serialize2);
            } else if (fieldMetadata.dictionaryKeyEnumType) {
              newKey = _getTranslatedEnumValue(fieldMetadata.dictionaryKeyEnumType, key, serialize2);
            }
            if (fieldMetadata.dictionaryValueIsDate) {
              newValue = _getTranslatedDateValue(dictionaryValue, serialize2);
            } else if (fieldMetadata.dictionaryValueEnumType) {
              newValue = _getTranslatedEnumValue(fieldMetadata.dictionaryValueEnumType, dictionaryValue, serialize2);
            } else if (fieldMetadata.dictionaryValueTypeInfo) {
              newValue = _getTranslatedObject(newValue, fieldMetadata.dictionaryValueTypeInfo, serialize2, preserveOriginal);
            } else if (fieldMetadata.dictionaryValueFieldInfo) {
              newValue = _getTranslatedField(dictionaryValue, fieldMetadata.dictionaryValueFieldInfo, serialize2, preserveOriginal);
            }
            newDictionary[newKey] = newValue;
            if (key !== newKey || dictionaryValue !== newValue) {
              dictionaryModified = true;
            }
          }
          return dictionaryModified ? newDictionary : fieldValue;
        } else {
          if (fieldMetadata.isDate) {
            return _getTranslatedDateValue(fieldValue, serialize2);
          } else if (fieldMetadata.enumType) {
            return _getTranslatedEnumValue(fieldMetadata.enumType, fieldValue, serialize2);
          } else if (fieldMetadata.typeInfo) {
            return _getTranslatedObject(fieldValue, fieldMetadata.typeInfo, serialize2, preserveOriginal);
          } else {
            return fieldValue;
          }
        }
      }
      function _getTranslatedEnumValue(enumType, valueToConvert, serialize2) {
        if (serialize2 && typeof valueToConvert === "number") {
        } else if (!serialize2 && typeof valueToConvert === "string") {
          var result = 0;
          if (valueToConvert) {
            var splitValue = valueToConvert.split(",");
            for (var i = 0; i < splitValue.length; i++) {
              var valuePart = splitValue[i];
              var enumName = valuePart.replace(/^\s+|\s+$/g, "") || "";
              if (enumName) {
                var resultPart = enumType.enumValues[enumName];
                if (!resultPart) {
                  var lowerCaseEnumName = enumName.toLowerCase();
                  if (lowerCaseEnumName !== enumName) {
                    for (var name in enumType.enumValues) {
                      var value = enumType.enumValues[name];
                      if (name.toLowerCase() === lowerCaseEnumName) {
                        resultPart = value;
                        break;
                      }
                    }
                  }
                }
                if (resultPart) {
                  result |= resultPart;
                }
              }
            }
          }
          return result;
        }
        return valueToConvert;
      }
      function _getTranslatedDateValue(valueToConvert, serialize2) {
        if (!serialize2 && typeof valueToConvert === "string") {
          var dateValue = new Date(valueToConvert);
          if (isNaN(dateValue) && navigator.userAgent && /msie/i.test(navigator.userAgent)) {
            dateValue = _convertLegacyIEDate(valueToConvert);
          }
          return dateValue;
        }
        return valueToConvert;
      }
      function _convertLegacyIEDate(dateStringValue) {
        var match;
        if (!_legacyDateRegExp) {
          _legacyDateRegExp = new RegExp("(\\d+)-(\\d+)-(\\d+)T(\\d+):(\\d+):(\\d+).(\\d+)Z");
        }
        match = _legacyDateRegExp.exec(dateStringValue);
        if (match) {
          return new Date(Date.UTC(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]), parseInt(match[4]), parseInt(match[5]), parseInt(match[6]), parseInt(match[7])));
        } else {
          return null;
        }
      }
      var _extend = function(out) {
        out = out || {};
        for (var i = 1; i < arguments.length; i++) {
          if (!arguments[i])
            continue;
          for (var key in arguments[i]) {
            if (arguments[i].hasOwnProperty(key))
              out[key] = arguments[i][key];
          }
        }
        return out;
      };
    })(ContractSerializer = exports.ContractSerializer || (exports.ContractSerializer = {}));
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(this, args.concat(slice.call(arguments)));
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(that, args.concat(slice.call(arguments)));
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind();
    module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "node_modules/object-inspect/util.inspect.js"(exports, module2) {
    module2.exports = require("util").inspect;
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module2) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var inspectCustom = require_util_inspect().custom;
    var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function") {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if ("cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function") {
          return obj[inspectSymbol]();
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils4();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var split = String.prototype.split;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          if (generateArrayPrefix === "comma" && encodeValuesOnly) {
            var valuesArray = split.call(String(obj), ",");
            var valuesJoined = "";
            for (var i = 0; i < valuesArray.length; ++i) {
              valuesJoined += (i === 0 ? "" : ",") + formatter(encoder(valuesArray[i], defaults.encoder, charset, "value", format));
            }
            return [formatter(keyValue) + "=" + valuesJoined];
          }
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module2) {
    "use strict";
    var utils = require_utils4();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
            return options.decoder(encodedVal, defaults.decoder, charset, "value");
          });
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module2) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/typed-rest-client/Util.js
var require_Util = __commonJS({
  "node_modules/typed-rest-client/Util.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var qs = require_lib3();
    var url = require("url");
    var path = require("path");
    var zlib = require("zlib");
    function getUrl(resource, baseUrl, queryParams) {
      const pathApi = path.posix || path;
      let requestUrl = "";
      if (!baseUrl) {
        requestUrl = resource;
      } else if (!resource) {
        requestUrl = baseUrl;
      } else {
        const base = url.parse(baseUrl);
        const resultantUrl = url.parse(resource);
        resultantUrl.protocol = resultantUrl.protocol || base.protocol;
        resultantUrl.auth = resultantUrl.auth || base.auth;
        resultantUrl.host = resultantUrl.host || base.host;
        resultantUrl.pathname = pathApi.resolve(base.pathname, resultantUrl.pathname);
        if (!resultantUrl.pathname.endsWith("/") && resource.endsWith("/")) {
          resultantUrl.pathname += "/";
        }
        requestUrl = url.format(resultantUrl);
      }
      return queryParams ? getUrlWithParsedQueryParams(requestUrl, queryParams) : requestUrl;
    }
    exports.getUrl = getUrl;
    function getUrlWithParsedQueryParams(requestUrl, queryParams) {
      const url2 = requestUrl.replace(/\?$/g, "");
      const parsedQueryParams = qs.stringify(queryParams.params, buildParamsStringifyOptions(queryParams));
      return `${url2}${parsedQueryParams}`;
    }
    function buildParamsStringifyOptions(queryParams) {
      let options = {
        addQueryPrefix: true,
        delimiter: (queryParams.options || {}).separator || "&",
        allowDots: (queryParams.options || {}).shouldAllowDots || false,
        arrayFormat: (queryParams.options || {}).arrayFormat || "repeat",
        encodeValuesOnly: (queryParams.options || {}).shouldOnlyEncodeValues || true
      };
      return options;
    }
    function decompressGzippedContent(buffer, charset) {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          zlib.gunzip(buffer, function(error, buffer2) {
            if (error) {
              reject(error);
            }
            resolve(buffer2.toString(charset || "utf-8"));
          });
        }));
      });
    }
    exports.decompressGzippedContent = decompressGzippedContent;
    function buildProxyBypassRegexFromEnv(bypass) {
      try {
        return new RegExp(bypass, "i");
      } catch (err) {
        if (err instanceof SyntaxError && (bypass || "").startsWith("*")) {
          let wildcardEscaped = bypass.replace("*", "(.*)");
          return new RegExp(wildcardEscaped, "i");
        }
        throw err;
      }
    }
    exports.buildProxyBypassRegexFromEnv = buildProxyBypassRegexFromEnv;
    function obtainContentCharset(response) {
      const nodeSupportedEncodings = ["ascii", "utf8", "utf16le", "ucs2", "base64", "binary", "hex"];
      const contentType = response.message.headers["content-type"] || "";
      const matches = contentType.match(/charset=([^;,\r\n]+)/i);
      return matches && matches[1] && nodeSupportedEncodings.indexOf(matches[1]) != -1 ? matches[1] : "utf-8";
    }
    exports.obtainContentCharset = obtainContentCharset;
  }
});

// node_modules/typed-rest-client/HttpClient.js
var require_HttpClient = __commonJS({
  "node_modules/typed-rest-client/HttpClient.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var url = require("url");
    var http = require("http");
    var https = require("https");
    var util = require_Util();
    var fs;
    var tunnel;
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
    var HttpRedirectCodes = [HttpCodes.MovedPermanently, HttpCodes.ResourceMoved, HttpCodes.SeeOther, HttpCodes.TemporaryRedirect, HttpCodes.PermanentRedirect];
    var HttpResponseRetryCodes = [HttpCodes.BadGateway, HttpCodes.ServiceUnavailable, HttpCodes.GatewayTimeout];
    var NetworkRetryErrors = ["ECONNRESET", "ENOTFOUND", "ESOCKETTIMEDOUT", "ETIMEDOUT", "ECONNREFUSED"];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          let buffer = Buffer.alloc(0);
          const encodingCharset = util.obtainContentCharset(this);
          const contentEncoding = this.message.headers["content-encoding"] || "";
          const isGzippedEncoded = new RegExp("(gzip$)|(gzip, *deflate)").test(contentEncoding);
          this.message.on("data", function(data) {
            const chunk = typeof data === "string" ? Buffer.from(data, encodingCharset) : data;
            buffer = Buffer.concat([buffer, chunk]);
          }).on("end", function() {
            return __awaiter(this, void 0, void 0, function* () {
              if (isGzippedEncoded) {
                const gunzippedBody = yield util.decompressGzippedContent(buffer, encodingCharset);
                resolve(gunzippedBody);
              } else {
                resolve(buffer.toString(encodingCharset));
              }
            });
          }).on("error", function(err) {
            reject(err);
          });
        }));
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      let parsedUrl = url.parse(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports.isHttps = isHttps;
    var EnvironmentVariables;
    (function(EnvironmentVariables2) {
      EnvironmentVariables2["HTTP_PROXY"] = "HTTP_PROXY";
      EnvironmentVariables2["HTTPS_PROXY"] = "HTTPS_PROXY";
      EnvironmentVariables2["NO_PROXY"] = "NO_PROXY";
    })(EnvironmentVariables || (EnvironmentVariables = {}));
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        let no_proxy = process.env[EnvironmentVariables.NO_PROXY];
        if (no_proxy) {
          this._httpProxyBypassHosts = [];
          no_proxy.split(",").forEach((bypass) => {
            this._httpProxyBypassHosts.push(util.buildProxyBypassRegexFromEnv(bypass));
          });
        }
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          this._httpProxy = requestOptions.proxy;
          if (requestOptions.proxy && requestOptions.proxy.proxyBypassHosts) {
            this._httpProxyBypassHosts = [];
            requestOptions.proxy.proxyBypassHosts.forEach((bypass) => {
              this._httpProxyBypassHosts.push(new RegExp(bypass, "i"));
            });
          }
          this._certConfig = requestOptions.cert;
          if (this._certConfig) {
            fs = require("fs");
            if (this._certConfig.caFile && fs.existsSync(this._certConfig.caFile)) {
              this._ca = fs.readFileSync(this._certConfig.caFile, "utf8");
            }
            if (this._certConfig.certFile && fs.existsSync(this._certConfig.certFile)) {
              this._cert = fs.readFileSync(this._certConfig.certFile, "utf8");
            }
            if (this._certConfig.keyFile && fs.existsSync(this._certConfig.keyFile)) {
              this._key = fs.readFileSync(this._certConfig.keyFile, "utf8");
            }
          }
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
      }
      get(requestUrl, additionalHeaders) {
        return this.request("GET", requestUrl, null, additionalHeaders || {});
      }
      del(requestUrl, additionalHeaders) {
        return this.request("DELETE", requestUrl, null, additionalHeaders || {});
      }
      post(requestUrl, data, additionalHeaders) {
        return this.request("POST", requestUrl, data, additionalHeaders || {});
      }
      patch(requestUrl, data, additionalHeaders) {
        return this.request("PATCH", requestUrl, data, additionalHeaders || {});
      }
      put(requestUrl, data, additionalHeaders) {
        return this.request("PUT", requestUrl, data, additionalHeaders || {});
      }
      head(requestUrl, additionalHeaders) {
        return this.request("HEAD", requestUrl, null, additionalHeaders || {});
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return this.request(verb, requestUrl, stream, additionalHeaders);
      }
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          let parsedUrl = url.parse(requestUrl);
          let info = this._prepareRequest(verb, parsedUrl, headers);
          let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1 ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          while (numTries < maxTries) {
            try {
              response = yield this.requestRaw(info, data);
            } catch (err) {
              numTries++;
              if (err && err.code && NetworkRetryErrors.indexOf(err.code) > -1 && numTries < maxTries) {
                yield this._performExponentialBackoff(numTries);
                continue;
              }
              throw err;
            }
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (let i = 0; i < this.handlers.length; i++) {
                if (this.handlers[i].canHandleAuthentication(response)) {
                  authenticationHandler = this.handlers[i];
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              let parsedRedirectUrl = url.parse(redirectUrl);
              if (parsedUrl.protocol == "https:" && parsedUrl.protocol != parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              info = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info, data);
              redirectsRemaining--;
            }
            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          }
          return response;
        });
      }
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      requestRaw(info, data) {
        return new Promise((resolve, reject) => {
          let callbackForResult = function(err, res) {
            if (err) {
              reject(err);
            }
            resolve(res);
          };
          this.requestRawWithCallback(info, data, callbackForResult);
        });
      }
      requestRawWithCallback(info, data, onResult) {
        let socket;
        if (typeof data === "string") {
          info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        let handleResult = (err, res) => {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        };
        let req = info.httpModule.request(info.options, (msg) => {
          let res = new HttpClientResponse(msg);
          handleResult(null, res);
        });
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.destroy();
          }
          handleResult(new Error("Request timeout: " + info.options.path), null);
        });
        req.on("error", function(err) {
          handleResult(err, null);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.timeout = this.requestOptions && this.requestOptions.socketTimeout || this._socketTimeout;
        this._socketTimeout = info.options.timeout;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers["user-agent"] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers && !this._isPresigned(url.format(requestUrl))) {
          this.handlers.forEach((handler) => {
            handler.prepareRequest(info.options);
          });
        }
        return info;
      }
      _isPresigned(requestUrl) {
        if (this.requestOptions && this.requestOptions.presignedUrlPatterns) {
          const patterns = this.requestOptions.presignedUrlPatterns;
          for (let i = 0; i < patterns.length; i++) {
            if (requestUrl.match(patterns[i])) {
              return true;
            }
          }
        }
        return false;
      }
      _mergeHeaders(headers) {
        const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));
        }
        return lowercaseKeys(headers || {});
      }
      _getAgent(parsedUrl) {
        let agent;
        let proxy = this._getProxy(parsedUrl);
        let useProxy = proxy.proxyUrl && proxy.proxyUrl.hostname && !this._isMatchInBypassProxyList(parsedUrl);
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (!!agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (!!this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (useProxy) {
          if (!tunnel) {
            tunnel = require_tunnel2();
          }
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: {
              proxyAuth: proxy.proxyAuth,
              host: proxy.proxyUrl.hostname,
              port: proxy.proxyUrl.port
            }
          };
          let tunnelAgent;
          const overHttps = proxy.proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });
        }
        if (usingSsl && this._certConfig) {
          agent.options = Object.assign(agent.options || {}, { ca: this._ca, cert: this._cert, key: this._key, passphrase: this._certConfig.passphrase });
        }
        return agent;
      }
      _getProxy(parsedUrl) {
        let usingSsl = parsedUrl.protocol === "https:";
        let proxyConfig = this._httpProxy;
        let https_proxy = process.env[EnvironmentVariables.HTTPS_PROXY];
        let http_proxy = process.env[EnvironmentVariables.HTTP_PROXY];
        if (!proxyConfig) {
          if (https_proxy && usingSsl) {
            proxyConfig = {
              proxyUrl: https_proxy
            };
          } else if (http_proxy) {
            proxyConfig = {
              proxyUrl: http_proxy
            };
          }
        }
        let proxyUrl;
        let proxyAuth;
        if (proxyConfig) {
          if (proxyConfig.proxyUrl.length > 0) {
            proxyUrl = url.parse(proxyConfig.proxyUrl);
          }
          if (proxyConfig.proxyUsername || proxyConfig.proxyPassword) {
            proxyAuth = proxyConfig.proxyUsername + ":" + proxyConfig.proxyPassword;
          }
        }
        return { proxyUrl, proxyAuth };
      }
      _isMatchInBypassProxyList(parsedUrl) {
        if (!this._httpProxyBypassHosts) {
          return false;
        }
        let bypass = false;
        this._httpProxyBypassHosts.forEach((bypassHost) => {
          if (bypassHost.test(parsedUrl.href)) {
            bypass = true;
          }
        });
        return bypass;
      }
      _performExponentialBackoff(retryNumber) {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise((resolve) => setTimeout(() => resolve(), ms));
      }
    };
    exports.HttpClient = HttpClient;
  }
});

// node_modules/typed-rest-client/RestClient.js
var require_RestClient = __commonJS({
  "node_modules/typed-rest-client/RestClient.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var httpm = require_HttpClient();
    var util = require_Util();
    var RestClient = class {
      constructor(userAgent, baseUrl, handlers, requestOptions) {
        this.client = new httpm.HttpClient(userAgent, handlers, requestOptions);
        if (baseUrl) {
          this._baseUrl = baseUrl;
        }
      }
      options(requestUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(requestUrl, this._baseUrl);
          let res = yield this.client.options(url, this._headersFromOptions(options));
          return this.processResponse(res, options);
        });
      }
      get(resource, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(resource, this._baseUrl, (options || {}).queryParameters);
          let res = yield this.client.get(url, this._headersFromOptions(options));
          return this.processResponse(res, options);
        });
      }
      del(resource, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(resource, this._baseUrl, (options || {}).queryParameters);
          let res = yield this.client.del(url, this._headersFromOptions(options));
          return this.processResponse(res, options);
        });
      }
      create(resource, resources, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(resource, this._baseUrl);
          let headers = this._headersFromOptions(options, true);
          let data = JSON.stringify(resources, null, 2);
          let res = yield this.client.post(url, data, headers);
          return this.processResponse(res, options);
        });
      }
      update(resource, resources, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(resource, this._baseUrl);
          let headers = this._headersFromOptions(options, true);
          let data = JSON.stringify(resources, null, 2);
          let res = yield this.client.patch(url, data, headers);
          return this.processResponse(res, options);
        });
      }
      replace(resource, resources, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(resource, this._baseUrl);
          let headers = this._headersFromOptions(options, true);
          let data = JSON.stringify(resources, null, 2);
          let res = yield this.client.put(url, data, headers);
          return this.processResponse(res, options);
        });
      }
      uploadStream(verb, requestUrl, stream, options) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = util.getUrl(requestUrl, this._baseUrl);
          let headers = this._headersFromOptions(options, true);
          let res = yield this.client.sendStream(verb, url, stream, headers);
          return this.processResponse(res, options);
        });
      }
      _headersFromOptions(options, contentType) {
        options = options || {};
        let headers = options.additionalHeaders || {};
        headers["Accept"] = options.acceptHeader || "application/json";
        if (contentType) {
          let found = false;
          for (let header in headers) {
            if (header.toLowerCase() == "content-type") {
              found = true;
            }
          }
          if (!found) {
            headers["Content-Type"] = "application/json; charset=utf-8";
          }
        }
        return headers;
      }
      static dateTimeDeserializer(key, value) {
        if (typeof value === "string") {
          let a = new Date(value);
          if (!isNaN(a.valueOf())) {
            return a;
          }
        }
        return value;
      }
      processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode == httpm.HttpCodes.NotFound) {
              resolve(response);
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, RestClient.dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                if (options && options.responseProcessor) {
                  response.result = options.responseProcessor(obj);
                } else {
                  response.result = obj;
                }
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = "Failed request: (" + statusCode + ")";
              }
              let err = new Error(msg);
              err["statusCode"] = statusCode;
              if (response.result) {
                err["result"] = response.result;
              }
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports.RestClient = RestClient;
  }
});

// node_modules/azure-devops-node-api/ClientApiBases.js
var require_ClientApiBases = __commonJS({
  "node_modules/azure-devops-node-api/ClientApiBases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vsom = require_VsoClient();
    var serm = require_Serialization();
    var rm = require_RestClient();
    var hm = require_HttpClient();
    var ClientApiBase = class {
      constructor(baseUrl, handlers, userAgent, options) {
        this.baseUrl = baseUrl;
        this.http = new hm.HttpClient(userAgent, handlers, options);
        this.rest = new rm.RestClient(userAgent, null, handlers, options);
        this.vsoClient = new vsom.VsoClient(baseUrl, this.rest);
        this.userAgent = userAgent;
      }
      createAcceptHeader(type, apiVersion) {
        return type + (apiVersion ? ";api-version=" + apiVersion : "");
      }
      createRequestOptions(type, apiVersion) {
        let options = {};
        options.acceptHeader = this.createAcceptHeader(type, apiVersion);
        return options;
      }
      formatResponse(data, responseTypeMetadata, isCollection) {
        let serializationData = {
          responseTypeMetadata,
          responseIsCollection: isCollection
        };
        let deserializedResult = serm.ContractSerializer.deserialize(data, serializationData.responseTypeMetadata, false, serializationData.responseIsCollection);
        return deserializedResult;
      }
    };
    exports.ClientApiBase = ClientApiBase;
  }
});

// node_modules/azure-devops-node-api/interfaces/common/SystemDataInterfaces.js
var require_SystemDataInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/common/SystemDataInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SqlDbType;
    (function(SqlDbType2) {
      SqlDbType2[SqlDbType2["BigInt"] = 0] = "BigInt";
      SqlDbType2[SqlDbType2["Binary"] = 1] = "Binary";
      SqlDbType2[SqlDbType2["Bit"] = 2] = "Bit";
      SqlDbType2[SqlDbType2["Char"] = 3] = "Char";
      SqlDbType2[SqlDbType2["DateTime"] = 4] = "DateTime";
      SqlDbType2[SqlDbType2["Decimal"] = 5] = "Decimal";
      SqlDbType2[SqlDbType2["Float"] = 6] = "Float";
      SqlDbType2[SqlDbType2["Image"] = 7] = "Image";
      SqlDbType2[SqlDbType2["Int"] = 8] = "Int";
      SqlDbType2[SqlDbType2["Money"] = 9] = "Money";
      SqlDbType2[SqlDbType2["NChar"] = 10] = "NChar";
      SqlDbType2[SqlDbType2["NText"] = 11] = "NText";
      SqlDbType2[SqlDbType2["NVarChar"] = 12] = "NVarChar";
      SqlDbType2[SqlDbType2["Real"] = 13] = "Real";
      SqlDbType2[SqlDbType2["UniqueIdentifier"] = 14] = "UniqueIdentifier";
      SqlDbType2[SqlDbType2["SmallDateTime"] = 15] = "SmallDateTime";
      SqlDbType2[SqlDbType2["SmallInt"] = 16] = "SmallInt";
      SqlDbType2[SqlDbType2["SmallMoney"] = 17] = "SmallMoney";
      SqlDbType2[SqlDbType2["Text"] = 18] = "Text";
      SqlDbType2[SqlDbType2["Timestamp"] = 19] = "Timestamp";
      SqlDbType2[SqlDbType2["TinyInt"] = 20] = "TinyInt";
      SqlDbType2[SqlDbType2["VarBinary"] = 21] = "VarBinary";
      SqlDbType2[SqlDbType2["VarChar"] = 22] = "VarChar";
      SqlDbType2[SqlDbType2["Variant"] = 23] = "Variant";
      SqlDbType2[SqlDbType2["Xml"] = 25] = "Xml";
      SqlDbType2[SqlDbType2["Udt"] = 29] = "Udt";
      SqlDbType2[SqlDbType2["Structured"] = 30] = "Structured";
      SqlDbType2[SqlDbType2["Date"] = 31] = "Date";
      SqlDbType2[SqlDbType2["Time"] = 32] = "Time";
      SqlDbType2[SqlDbType2["DateTime2"] = 33] = "DateTime2";
      SqlDbType2[SqlDbType2["DateTimeOffset"] = 34] = "DateTimeOffset";
    })(SqlDbType = exports.SqlDbType || (exports.SqlDbType = {}));
    exports.TypeInfo = {
      SqlDbType: {
        enumValues: {
          "BigInt": 0,
          "Binary": 1,
          "Bit": 2,
          "Char": 3,
          "DateTime": 4,
          "Decimal": 5,
          "Float": 6,
          "Image": 7,
          "Int": 8,
          "Money": 9,
          "NChar": 10,
          "NText": 11,
          "NVarChar": 12,
          "Real": 13,
          "UniqueIdentifier": 14,
          "SmallDateTime": 15,
          "SmallInt": 16,
          "SmallMoney": 17,
          "Text": 18,
          "Timestamp": 19,
          "TinyInt": 20,
          "VarBinary": 21,
          "VarChar": 22,
          "Variant": 23,
          "Xml": 25,
          "Udt": 29,
          "Structured": 30,
          "Date": 31,
          "Time": 32,
          "DateTime2": 33,
          "DateTimeOffset": 34
        }
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/CoreInterfaces.js
var require_CoreInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/CoreInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConnectedServiceKind;
    (function(ConnectedServiceKind2) {
      ConnectedServiceKind2[ConnectedServiceKind2["Custom"] = 0] = "Custom";
      ConnectedServiceKind2[ConnectedServiceKind2["AzureSubscription"] = 1] = "AzureSubscription";
      ConnectedServiceKind2[ConnectedServiceKind2["Chef"] = 2] = "Chef";
      ConnectedServiceKind2[ConnectedServiceKind2["Generic"] = 3] = "Generic";
    })(ConnectedServiceKind = exports.ConnectedServiceKind || (exports.ConnectedServiceKind = {}));
    var ProcessCustomizationType;
    (function(ProcessCustomizationType2) {
      ProcessCustomizationType2[ProcessCustomizationType2["Unknown"] = -1] = "Unknown";
      ProcessCustomizationType2[ProcessCustomizationType2["Xml"] = 0] = "Xml";
      ProcessCustomizationType2[ProcessCustomizationType2["Inherited"] = 1] = "Inherited";
    })(ProcessCustomizationType = exports.ProcessCustomizationType || (exports.ProcessCustomizationType = {}));
    var ProcessType;
    (function(ProcessType2) {
      ProcessType2[ProcessType2["System"] = 0] = "System";
      ProcessType2[ProcessType2["Custom"] = 1] = "Custom";
      ProcessType2[ProcessType2["Inherited"] = 2] = "Inherited";
    })(ProcessType = exports.ProcessType || (exports.ProcessType = {}));
    var ProjectChangeType;
    (function(ProjectChangeType2) {
      ProjectChangeType2[ProjectChangeType2["Modified"] = 0] = "Modified";
      ProjectChangeType2[ProjectChangeType2["Deleted"] = 1] = "Deleted";
      ProjectChangeType2[ProjectChangeType2["Added"] = 2] = "Added";
    })(ProjectChangeType = exports.ProjectChangeType || (exports.ProjectChangeType = {}));
    var ProjectVisibility;
    (function(ProjectVisibility2) {
      ProjectVisibility2[ProjectVisibility2["Unchanged"] = -1] = "Unchanged";
      ProjectVisibility2[ProjectVisibility2["Private"] = 0] = "Private";
      ProjectVisibility2[ProjectVisibility2["Organization"] = 1] = "Organization";
      ProjectVisibility2[ProjectVisibility2["Public"] = 2] = "Public";
      ProjectVisibility2[ProjectVisibility2["SystemPrivate"] = 3] = "SystemPrivate";
    })(ProjectVisibility = exports.ProjectVisibility || (exports.ProjectVisibility = {}));
    var SourceControlTypes;
    (function(SourceControlTypes2) {
      SourceControlTypes2[SourceControlTypes2["Tfvc"] = 1] = "Tfvc";
      SourceControlTypes2[SourceControlTypes2["Git"] = 2] = "Git";
    })(SourceControlTypes = exports.SourceControlTypes || (exports.SourceControlTypes = {}));
    exports.TypeInfo = {
      ConnectedServiceKind: {
        enumValues: {
          "custom": 0,
          "azureSubscription": 1,
          "chef": 2,
          "generic": 3
        }
      },
      Process: {},
      ProcessCustomizationType: {
        enumValues: {
          "unknown": -1,
          "xml": 0,
          "inherited": 1
        }
      },
      ProcessType: {
        enumValues: {
          "system": 0,
          "custom": 1,
          "inherited": 2
        }
      },
      ProjectChangeType: {
        enumValues: {
          "modified": 0,
          "deleted": 1,
          "added": 2
        }
      },
      ProjectInfo: {},
      ProjectMessage: {},
      ProjectVisibility: {
        enumValues: {
          "private": 0,
          "organization": 1,
          "public": 2
        }
      },
      SourceControlTypes: {
        enumValues: {
          "tfvc": 1,
          "git": 2
        }
      },
      TeamProject: {},
      TeamProjectCollection: {},
      TeamProjectReference: {},
      TemporaryDataCreatedDTO: {},
      WebApiConnectedService: {},
      WebApiConnectedServiceDetails: {},
      WebApiProject: {}
    };
    exports.TypeInfo.Process.fields = {
      type: {
        enumType: exports.TypeInfo.ProcessType
      }
    };
    exports.TypeInfo.ProjectInfo.fields = {
      lastUpdateTime: {
        isDate: true
      },
      visibility: {
        enumType: exports.TypeInfo.ProjectVisibility
      }
    };
    exports.TypeInfo.ProjectMessage.fields = {
      project: {
        typeInfo: exports.TypeInfo.ProjectInfo
      },
      projectChangeType: {
        enumType: exports.TypeInfo.ProjectChangeType
      }
    };
    exports.TypeInfo.TeamProject.fields = {
      lastUpdateTime: {
        isDate: true
      },
      visibility: {
        enumType: exports.TypeInfo.ProjectVisibility
      }
    };
    exports.TypeInfo.TeamProjectCollection.fields = {
      processCustomizationType: {
        enumType: exports.TypeInfo.ProcessCustomizationType
      }
    };
    exports.TypeInfo.TeamProjectReference.fields = {
      lastUpdateTime: {
        isDate: true
      },
      visibility: {
        enumType: exports.TypeInfo.ProjectVisibility
      }
    };
    exports.TypeInfo.TemporaryDataCreatedDTO.fields = {
      expirationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.WebApiConnectedService.fields = {
      project: {
        typeInfo: exports.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.WebApiConnectedServiceDetails.fields = {
      connectedServiceMetaData: {
        typeInfo: exports.TypeInfo.WebApiConnectedService
      }
    };
    exports.TypeInfo.WebApiProject.fields = {
      lastUpdateTime: {
        isDate: true
      },
      visibility: {
        enumType: exports.TypeInfo.ProjectVisibility
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/TestInterfaces.js
var require_TestInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/TestInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SystemData = require_SystemDataInterfaces();
    var TfsCoreInterfaces = require_CoreInterfaces();
    var AttachmentType;
    (function(AttachmentType2) {
      AttachmentType2[AttachmentType2["GeneralAttachment"] = 0] = "GeneralAttachment";
      AttachmentType2[AttachmentType2["AfnStrip"] = 1] = "AfnStrip";
      AttachmentType2[AttachmentType2["BugFilingData"] = 2] = "BugFilingData";
      AttachmentType2[AttachmentType2["CodeCoverage"] = 3] = "CodeCoverage";
      AttachmentType2[AttachmentType2["IntermediateCollectorData"] = 4] = "IntermediateCollectorData";
      AttachmentType2[AttachmentType2["RunConfig"] = 5] = "RunConfig";
      AttachmentType2[AttachmentType2["TestImpactDetails"] = 6] = "TestImpactDetails";
      AttachmentType2[AttachmentType2["TmiTestRunDeploymentFiles"] = 7] = "TmiTestRunDeploymentFiles";
      AttachmentType2[AttachmentType2["TmiTestRunReverseDeploymentFiles"] = 8] = "TmiTestRunReverseDeploymentFiles";
      AttachmentType2[AttachmentType2["TmiTestResultDetail"] = 9] = "TmiTestResultDetail";
      AttachmentType2[AttachmentType2["TmiTestRunSummary"] = 10] = "TmiTestRunSummary";
      AttachmentType2[AttachmentType2["ConsoleLog"] = 11] = "ConsoleLog";
    })(AttachmentType = exports.AttachmentType || (exports.AttachmentType = {}));
    var CloneOperationState;
    (function(CloneOperationState2) {
      CloneOperationState2[CloneOperationState2["Failed"] = 2] = "Failed";
      CloneOperationState2[CloneOperationState2["InProgress"] = 1] = "InProgress";
      CloneOperationState2[CloneOperationState2["Queued"] = 0] = "Queued";
      CloneOperationState2[CloneOperationState2["Succeeded"] = 3] = "Succeeded";
    })(CloneOperationState = exports.CloneOperationState || (exports.CloneOperationState = {}));
    var CoverageQueryFlags;
    (function(CoverageQueryFlags2) {
      CoverageQueryFlags2[CoverageQueryFlags2["Modules"] = 1] = "Modules";
      CoverageQueryFlags2[CoverageQueryFlags2["Functions"] = 2] = "Functions";
      CoverageQueryFlags2[CoverageQueryFlags2["BlockData"] = 4] = "BlockData";
    })(CoverageQueryFlags = exports.CoverageQueryFlags || (exports.CoverageQueryFlags = {}));
    var CoverageStatus;
    (function(CoverageStatus2) {
      CoverageStatus2[CoverageStatus2["Covered"] = 0] = "Covered";
      CoverageStatus2[CoverageStatus2["NotCovered"] = 1] = "NotCovered";
      CoverageStatus2[CoverageStatus2["PartiallyCovered"] = 2] = "PartiallyCovered";
    })(CoverageStatus = exports.CoverageStatus || (exports.CoverageStatus = {}));
    var CoverageSummaryStatus;
    (function(CoverageSummaryStatus2) {
      CoverageSummaryStatus2[CoverageSummaryStatus2["None"] = 0] = "None";
      CoverageSummaryStatus2[CoverageSummaryStatus2["InProgress"] = 1] = "InProgress";
      CoverageSummaryStatus2[CoverageSummaryStatus2["Completed"] = 2] = "Completed";
      CoverageSummaryStatus2[CoverageSummaryStatus2["Finalized"] = 3] = "Finalized";
      CoverageSummaryStatus2[CoverageSummaryStatus2["Pending"] = 4] = "Pending";
      CoverageSummaryStatus2[CoverageSummaryStatus2["UpdateRequestQueued"] = 5] = "UpdateRequestQueued";
    })(CoverageSummaryStatus = exports.CoverageSummaryStatus || (exports.CoverageSummaryStatus = {}));
    var CustomTestFieldScope;
    (function(CustomTestFieldScope2) {
      CustomTestFieldScope2[CustomTestFieldScope2["None"] = 0] = "None";
      CustomTestFieldScope2[CustomTestFieldScope2["TestRun"] = 1] = "TestRun";
      CustomTestFieldScope2[CustomTestFieldScope2["TestResult"] = 2] = "TestResult";
      CustomTestFieldScope2[CustomTestFieldScope2["System"] = 4] = "System";
      CustomTestFieldScope2[CustomTestFieldScope2["All"] = 7] = "All";
    })(CustomTestFieldScope = exports.CustomTestFieldScope || (exports.CustomTestFieldScope = {}));
    var CustomTestFieldType;
    (function(CustomTestFieldType2) {
      CustomTestFieldType2[CustomTestFieldType2["Bit"] = 2] = "Bit";
      CustomTestFieldType2[CustomTestFieldType2["DateTime"] = 4] = "DateTime";
      CustomTestFieldType2[CustomTestFieldType2["Int"] = 8] = "Int";
      CustomTestFieldType2[CustomTestFieldType2["Float"] = 6] = "Float";
      CustomTestFieldType2[CustomTestFieldType2["String"] = 12] = "String";
      CustomTestFieldType2[CustomTestFieldType2["Guid"] = 14] = "Guid";
    })(CustomTestFieldType = exports.CustomTestFieldType || (exports.CustomTestFieldType = {}));
    var FlakyDetectionType;
    (function(FlakyDetectionType2) {
      FlakyDetectionType2[FlakyDetectionType2["Custom"] = 1] = "Custom";
      FlakyDetectionType2[FlakyDetectionType2["System"] = 2] = "System";
    })(FlakyDetectionType = exports.FlakyDetectionType || (exports.FlakyDetectionType = {}));
    var Metrics;
    (function(Metrics2) {
      Metrics2[Metrics2["All"] = 1] = "All";
      Metrics2[Metrics2["ResultSummary"] = 2] = "ResultSummary";
      Metrics2[Metrics2["ResultsAnalysis"] = 3] = "ResultsAnalysis";
      Metrics2[Metrics2["RunSummary"] = 4] = "RunSummary";
    })(Metrics = exports.Metrics || (exports.Metrics = {}));
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["Add"] = 1] = "Add";
      OperationType2[OperationType2["Delete"] = 2] = "Delete";
    })(OperationType = exports.OperationType || (exports.OperationType = {}));
    var ResultDetails;
    (function(ResultDetails2) {
      ResultDetails2[ResultDetails2["None"] = 0] = "None";
      ResultDetails2[ResultDetails2["Iterations"] = 1] = "Iterations";
      ResultDetails2[ResultDetails2["WorkItems"] = 2] = "WorkItems";
      ResultDetails2[ResultDetails2["SubResults"] = 4] = "SubResults";
      ResultDetails2[ResultDetails2["Point"] = 8] = "Point";
    })(ResultDetails = exports.ResultDetails || (exports.ResultDetails = {}));
    var ResultGroupType;
    (function(ResultGroupType2) {
      ResultGroupType2[ResultGroupType2["None"] = 0] = "None";
      ResultGroupType2[ResultGroupType2["Rerun"] = 1] = "Rerun";
      ResultGroupType2[ResultGroupType2["DataDriven"] = 2] = "DataDriven";
      ResultGroupType2[ResultGroupType2["OrderedTest"] = 3] = "OrderedTest";
      ResultGroupType2[ResultGroupType2["Generic"] = 4] = "Generic";
    })(ResultGroupType = exports.ResultGroupType || (exports.ResultGroupType = {}));
    var ResultMetadata;
    (function(ResultMetadata2) {
      ResultMetadata2[ResultMetadata2["Rerun"] = 1] = "Rerun";
      ResultMetadata2[ResultMetadata2["Flaky"] = 2] = "Flaky";
    })(ResultMetadata = exports.ResultMetadata || (exports.ResultMetadata = {}));
    var ResultMetaDataDetails;
    (function(ResultMetaDataDetails2) {
      ResultMetaDataDetails2[ResultMetaDataDetails2["None"] = 0] = "None";
      ResultMetaDataDetails2[ResultMetaDataDetails2["FlakyIdentifiers"] = 1] = "FlakyIdentifiers";
    })(ResultMetaDataDetails = exports.ResultMetaDataDetails || (exports.ResultMetaDataDetails = {}));
    var ResultObjectType;
    (function(ResultObjectType2) {
      ResultObjectType2[ResultObjectType2["TestSuite"] = 0] = "TestSuite";
      ResultObjectType2[ResultObjectType2["TestPlan"] = 1] = "TestPlan";
    })(ResultObjectType = exports.ResultObjectType || (exports.ResultObjectType = {}));
    var RunType;
    (function(RunType2) {
      RunType2[RunType2["Unspecified"] = 0] = "Unspecified";
      RunType2[RunType2["Normal"] = 1] = "Normal";
      RunType2[RunType2["Blocking"] = 2] = "Blocking";
      RunType2[RunType2["Web"] = 4] = "Web";
      RunType2[RunType2["MtrRunInitiatedFromWeb"] = 8] = "MtrRunInitiatedFromWeb";
      RunType2[RunType2["RunWithDtlEnv"] = 16] = "RunWithDtlEnv";
      RunType2[RunType2["NoConfigRun"] = 32] = "NoConfigRun";
    })(RunType = exports.RunType || (exports.RunType = {}));
    var Service;
    (function(Service2) {
      Service2[Service2["Any"] = 0] = "Any";
      Service2[Service2["Tcm"] = 1] = "Tcm";
      Service2[Service2["Tfs"] = 2] = "Tfs";
    })(Service = exports.Service || (exports.Service = {}));
    var SuiteExpand;
    (function(SuiteExpand2) {
      SuiteExpand2[SuiteExpand2["Children"] = 1] = "Children";
      SuiteExpand2[SuiteExpand2["DefaultTesters"] = 2] = "DefaultTesters";
    })(SuiteExpand = exports.SuiteExpand || (exports.SuiteExpand = {}));
    var TCMServiceDataMigrationStatus;
    (function(TCMServiceDataMigrationStatus2) {
      TCMServiceDataMigrationStatus2[TCMServiceDataMigrationStatus2["NotStarted"] = 0] = "NotStarted";
      TCMServiceDataMigrationStatus2[TCMServiceDataMigrationStatus2["InProgress"] = 1] = "InProgress";
      TCMServiceDataMigrationStatus2[TCMServiceDataMigrationStatus2["Completed"] = 2] = "Completed";
      TCMServiceDataMigrationStatus2[TCMServiceDataMigrationStatus2["Failed"] = 3] = "Failed";
    })(TCMServiceDataMigrationStatus = exports.TCMServiceDataMigrationStatus || (exports.TCMServiceDataMigrationStatus = {}));
    var TestConfigurationState;
    (function(TestConfigurationState2) {
      TestConfigurationState2[TestConfigurationState2["Active"] = 1] = "Active";
      TestConfigurationState2[TestConfigurationState2["Inactive"] = 2] = "Inactive";
    })(TestConfigurationState = exports.TestConfigurationState || (exports.TestConfigurationState = {}));
    var TestLogScope;
    (function(TestLogScope2) {
      TestLogScope2[TestLogScope2["Run"] = 0] = "Run";
      TestLogScope2[TestLogScope2["Build"] = 1] = "Build";
      TestLogScope2[TestLogScope2["Release"] = 2] = "Release";
    })(TestLogScope = exports.TestLogScope || (exports.TestLogScope = {}));
    var TestLogStatusCode;
    (function(TestLogStatusCode2) {
      TestLogStatusCode2[TestLogStatusCode2["Success"] = 0] = "Success";
      TestLogStatusCode2[TestLogStatusCode2["Failed"] = 1] = "Failed";
      TestLogStatusCode2[TestLogStatusCode2["FileAlreadyExists"] = 2] = "FileAlreadyExists";
      TestLogStatusCode2[TestLogStatusCode2["InvalidInput"] = 3] = "InvalidInput";
      TestLogStatusCode2[TestLogStatusCode2["InvalidFileName"] = 4] = "InvalidFileName";
      TestLogStatusCode2[TestLogStatusCode2["InvalidContainer"] = 5] = "InvalidContainer";
      TestLogStatusCode2[TestLogStatusCode2["TransferFailed"] = 6] = "TransferFailed";
      TestLogStatusCode2[TestLogStatusCode2["FeatureDisabled"] = 7] = "FeatureDisabled";
      TestLogStatusCode2[TestLogStatusCode2["BuildDoesNotExist"] = 8] = "BuildDoesNotExist";
      TestLogStatusCode2[TestLogStatusCode2["RunDoesNotExist"] = 9] = "RunDoesNotExist";
      TestLogStatusCode2[TestLogStatusCode2["ContainerNotCreated"] = 10] = "ContainerNotCreated";
      TestLogStatusCode2[TestLogStatusCode2["APINotSupported"] = 11] = "APINotSupported";
      TestLogStatusCode2[TestLogStatusCode2["FileSizeExceeds"] = 12] = "FileSizeExceeds";
      TestLogStatusCode2[TestLogStatusCode2["ContainerNotFound"] = 13] = "ContainerNotFound";
      TestLogStatusCode2[TestLogStatusCode2["FileNotFound"] = 14] = "FileNotFound";
      TestLogStatusCode2[TestLogStatusCode2["DirectoryNotFound"] = 15] = "DirectoryNotFound";
      TestLogStatusCode2[TestLogStatusCode2["StorageCapacityExceeded"] = 16] = "StorageCapacityExceeded";
    })(TestLogStatusCode = exports.TestLogStatusCode || (exports.TestLogStatusCode = {}));
    var TestLogStoreEndpointType;
    (function(TestLogStoreEndpointType2) {
      TestLogStoreEndpointType2[TestLogStoreEndpointType2["Root"] = 1] = "Root";
      TestLogStoreEndpointType2[TestLogStoreEndpointType2["File"] = 2] = "File";
    })(TestLogStoreEndpointType = exports.TestLogStoreEndpointType || (exports.TestLogStoreEndpointType = {}));
    var TestLogStoreOperationType;
    (function(TestLogStoreOperationType2) {
      TestLogStoreOperationType2[TestLogStoreOperationType2["Read"] = 1] = "Read";
      TestLogStoreOperationType2[TestLogStoreOperationType2["Create"] = 2] = "Create";
      TestLogStoreOperationType2[TestLogStoreOperationType2["ReadAndCreate"] = 3] = "ReadAndCreate";
    })(TestLogStoreOperationType = exports.TestLogStoreOperationType || (exports.TestLogStoreOperationType = {}));
    var TestLogType;
    (function(TestLogType2) {
      TestLogType2[TestLogType2["GeneralAttachment"] = 1] = "GeneralAttachment";
      TestLogType2[TestLogType2["CodeCoverage"] = 2] = "CodeCoverage";
      TestLogType2[TestLogType2["TestImpact"] = 3] = "TestImpact";
      TestLogType2[TestLogType2["Intermediate"] = 4] = "Intermediate";
      TestLogType2[TestLogType2["System"] = 5] = "System";
    })(TestLogType = exports.TestLogType || (exports.TestLogType = {}));
    var TestOutcome;
    (function(TestOutcome2) {
      TestOutcome2[TestOutcome2["Unspecified"] = 0] = "Unspecified";
      TestOutcome2[TestOutcome2["None"] = 1] = "None";
      TestOutcome2[TestOutcome2["Passed"] = 2] = "Passed";
      TestOutcome2[TestOutcome2["Failed"] = 3] = "Failed";
      TestOutcome2[TestOutcome2["Inconclusive"] = 4] = "Inconclusive";
      TestOutcome2[TestOutcome2["Timeout"] = 5] = "Timeout";
      TestOutcome2[TestOutcome2["Aborted"] = 6] = "Aborted";
      TestOutcome2[TestOutcome2["Blocked"] = 7] = "Blocked";
      TestOutcome2[TestOutcome2["NotExecuted"] = 8] = "NotExecuted";
      TestOutcome2[TestOutcome2["Warning"] = 9] = "Warning";
      TestOutcome2[TestOutcome2["Error"] = 10] = "Error";
      TestOutcome2[TestOutcome2["NotApplicable"] = 11] = "NotApplicable";
      TestOutcome2[TestOutcome2["Paused"] = 12] = "Paused";
      TestOutcome2[TestOutcome2["InProgress"] = 13] = "InProgress";
      TestOutcome2[TestOutcome2["NotImpacted"] = 14] = "NotImpacted";
      TestOutcome2[TestOutcome2["MaxValue"] = 14] = "MaxValue";
    })(TestOutcome = exports.TestOutcome || (exports.TestOutcome = {}));
    var TestPointState;
    (function(TestPointState2) {
      TestPointState2[TestPointState2["None"] = 0] = "None";
      TestPointState2[TestPointState2["Ready"] = 1] = "Ready";
      TestPointState2[TestPointState2["Completed"] = 2] = "Completed";
      TestPointState2[TestPointState2["NotReady"] = 3] = "NotReady";
      TestPointState2[TestPointState2["InProgress"] = 4] = "InProgress";
      TestPointState2[TestPointState2["MaxValue"] = 4] = "MaxValue";
    })(TestPointState = exports.TestPointState || (exports.TestPointState = {}));
    var TestResultGroupBy;
    (function(TestResultGroupBy2) {
      TestResultGroupBy2[TestResultGroupBy2["Branch"] = 1] = "Branch";
      TestResultGroupBy2[TestResultGroupBy2["Environment"] = 2] = "Environment";
    })(TestResultGroupBy = exports.TestResultGroupBy || (exports.TestResultGroupBy = {}));
    var TestResultsContextType;
    (function(TestResultsContextType2) {
      TestResultsContextType2[TestResultsContextType2["Build"] = 1] = "Build";
      TestResultsContextType2[TestResultsContextType2["Release"] = 2] = "Release";
      TestResultsContextType2[TestResultsContextType2["Pipeline"] = 3] = "Pipeline";
    })(TestResultsContextType = exports.TestResultsContextType || (exports.TestResultsContextType = {}));
    var TestResultsSettingsType;
    (function(TestResultsSettingsType2) {
      TestResultsSettingsType2[TestResultsSettingsType2["All"] = 1] = "All";
      TestResultsSettingsType2[TestResultsSettingsType2["Flaky"] = 2] = "Flaky";
      TestResultsSettingsType2[TestResultsSettingsType2["NewTestLogging"] = 3] = "NewTestLogging";
    })(TestResultsSettingsType = exports.TestResultsSettingsType || (exports.TestResultsSettingsType = {}));
    var TestRunOutcome;
    (function(TestRunOutcome2) {
      TestRunOutcome2[TestRunOutcome2["Passed"] = 0] = "Passed";
      TestRunOutcome2[TestRunOutcome2["Failed"] = 1] = "Failed";
      TestRunOutcome2[TestRunOutcome2["NotImpacted"] = 2] = "NotImpacted";
      TestRunOutcome2[TestRunOutcome2["Others"] = 3] = "Others";
    })(TestRunOutcome = exports.TestRunOutcome || (exports.TestRunOutcome = {}));
    var TestRunPublishContext;
    (function(TestRunPublishContext2) {
      TestRunPublishContext2[TestRunPublishContext2["Build"] = 1] = "Build";
      TestRunPublishContext2[TestRunPublishContext2["Release"] = 2] = "Release";
      TestRunPublishContext2[TestRunPublishContext2["All"] = 3] = "All";
    })(TestRunPublishContext = exports.TestRunPublishContext || (exports.TestRunPublishContext = {}));
    var TestRunState;
    (function(TestRunState2) {
      TestRunState2[TestRunState2["Unspecified"] = 0] = "Unspecified";
      TestRunState2[TestRunState2["NotStarted"] = 1] = "NotStarted";
      TestRunState2[TestRunState2["InProgress"] = 2] = "InProgress";
      TestRunState2[TestRunState2["Completed"] = 3] = "Completed";
      TestRunState2[TestRunState2["Aborted"] = 4] = "Aborted";
      TestRunState2[TestRunState2["Waiting"] = 5] = "Waiting";
      TestRunState2[TestRunState2["NeedsInvestigation"] = 6] = "NeedsInvestigation";
    })(TestRunState = exports.TestRunState || (exports.TestRunState = {}));
    var TestRunSubstate;
    (function(TestRunSubstate2) {
      TestRunSubstate2[TestRunSubstate2["None"] = 0] = "None";
      TestRunSubstate2[TestRunSubstate2["CreatingEnvironment"] = 1] = "CreatingEnvironment";
      TestRunSubstate2[TestRunSubstate2["RunningTests"] = 2] = "RunningTests";
      TestRunSubstate2[TestRunSubstate2["CanceledByUser"] = 3] = "CanceledByUser";
      TestRunSubstate2[TestRunSubstate2["AbortedBySystem"] = 4] = "AbortedBySystem";
      TestRunSubstate2[TestRunSubstate2["TimedOut"] = 5] = "TimedOut";
      TestRunSubstate2[TestRunSubstate2["PendingAnalysis"] = 6] = "PendingAnalysis";
      TestRunSubstate2[TestRunSubstate2["Analyzed"] = 7] = "Analyzed";
      TestRunSubstate2[TestRunSubstate2["CancellationInProgress"] = 8] = "CancellationInProgress";
    })(TestRunSubstate = exports.TestRunSubstate || (exports.TestRunSubstate = {}));
    var TestSessionSource;
    (function(TestSessionSource2) {
      TestSessionSource2[TestSessionSource2["Unknown"] = 0] = "Unknown";
      TestSessionSource2[TestSessionSource2["XTDesktop"] = 1] = "XTDesktop";
      TestSessionSource2[TestSessionSource2["FeedbackDesktop"] = 2] = "FeedbackDesktop";
      TestSessionSource2[TestSessionSource2["XTWeb"] = 3] = "XTWeb";
      TestSessionSource2[TestSessionSource2["FeedbackWeb"] = 4] = "FeedbackWeb";
      TestSessionSource2[TestSessionSource2["XTDesktop2"] = 5] = "XTDesktop2";
      TestSessionSource2[TestSessionSource2["SessionInsightsForAll"] = 6] = "SessionInsightsForAll";
    })(TestSessionSource = exports.TestSessionSource || (exports.TestSessionSource = {}));
    var TestSessionState;
    (function(TestSessionState2) {
      TestSessionState2[TestSessionState2["Unspecified"] = 0] = "Unspecified";
      TestSessionState2[TestSessionState2["NotStarted"] = 1] = "NotStarted";
      TestSessionState2[TestSessionState2["InProgress"] = 2] = "InProgress";
      TestSessionState2[TestSessionState2["Paused"] = 3] = "Paused";
      TestSessionState2[TestSessionState2["Completed"] = 4] = "Completed";
      TestSessionState2[TestSessionState2["Declined"] = 5] = "Declined";
    })(TestSessionState = exports.TestSessionState || (exports.TestSessionState = {}));
    exports.TypeInfo = {
      AfnStrip: {},
      AggregatedDataForResultTrend: {},
      AggregatedResultDetailsByOutcome: {},
      AggregatedResultsAnalysis: {},
      AggregatedResultsByOutcome: {},
      AggregatedRunsByOutcome: {},
      AggregatedRunsByState: {},
      AttachmentType: {
        enumValues: {
          "generalAttachment": 0,
          "afnStrip": 1,
          "bugFilingData": 2,
          "codeCoverage": 3,
          "intermediateCollectorData": 4,
          "runConfig": 5,
          "testImpactDetails": 6,
          "tmiTestRunDeploymentFiles": 7,
          "tmiTestRunReverseDeploymentFiles": 8,
          "tmiTestResultDetail": 9,
          "tmiTestRunSummary": 10,
          "consoleLog": 11
        }
      },
      BatchResponse: {},
      BuildConfiguration: {},
      BuildCoverage: {},
      BuildReference2: {},
      BulkResultUpdateRequest: {},
      CloneOperationInformation: {},
      CloneOperationState: {
        enumValues: {
          "failed": 2,
          "inProgress": 1,
          "queued": 0,
          "succeeded": 3
        }
      },
      CodeCoverageSummary: {},
      Coverage2: {},
      CoverageQueryFlags: {
        enumValues: {
          "modules": 1,
          "functions": 2,
          "blockData": 4
        }
      },
      CoverageStatus: {
        enumValues: {
          "covered": 0,
          "notCovered": 1,
          "partiallyCovered": 2
        }
      },
      CoverageSummaryStatus: {
        enumValues: {
          "none": 0,
          "inProgress": 1,
          "completed": 2,
          "finalized": 3,
          "pending": 4,
          "updateRequestQueued": 5
        }
      },
      CreateTestMessageLogEntryRequest: {},
      CreateTestResultsRequest: {},
      CreateTestRunRequest: {},
      CustomTestFieldDefinition: {},
      CustomTestFieldScope: {
        enumValues: {
          "none": 0,
          "testRun": 1,
          "testResult": 2,
          "system": 4,
          "all": 7
        }
      },
      CustomTestFieldType: {
        enumValues: {
          "bit": 2,
          "dateTime": 4,
          "int": 8,
          "float": 6,
          "string": 12,
          "guid": 14
        }
      },
      DatedTestFieldData: {},
      FailingSince: {},
      FetchTestResultsResponse: {},
      FlakyDetection: {},
      FlakyDetectionType: {
        enumValues: {
          "custom": 1,
          "system": 2
        }
      },
      FlakySettings: {},
      LastResultDetails: {},
      LegacyBuildConfiguration: {},
      LegacyReleaseReference: {},
      LegacyTestCaseResult: {},
      LegacyTestRun: {},
      LegacyTestSettings: {},
      Metrics: {
        enumValues: {
          "all": 1,
          "resultSummary": 2,
          "resultsAnalysis": 3,
          "runSummary": 4
        }
      },
      OperationType: {
        enumValues: {
          "add": 1,
          "delete": 2
        }
      },
      PipelineTestMetrics: {},
      PointLastResult: {},
      PointsResults2: {},
      QueryTestActionResultResponse: {},
      ReleaseReference: {},
      ReleaseReference2: {},
      RequirementsToTestsMapping2: {},
      Response: {},
      ResultDetails: {
        enumValues: {
          "none": 0,
          "iterations": 1,
          "workItems": 2,
          "subResults": 4,
          "point": 8
        }
      },
      ResultGroupType: {
        enumValues: {
          "none": 0,
          "rerun": 1,
          "dataDriven": 2,
          "orderedTest": 3,
          "generic": 4
        }
      },
      ResultMetadata: {
        enumValues: {
          "rerun": 1,
          "flaky": 2
        }
      },
      ResultMetaDataDetails: {
        enumValues: {
          "none": 0,
          "flakyIdentifiers": 1
        }
      },
      ResultObjectType: {
        enumValues: {
          "testSuite": 0,
          "testPlan": 1
        }
      },
      ResultRetentionSettings: {},
      ResultsByQueryResponse: {},
      ResultsFilter: {},
      ResultsSummaryByOutcome: {},
      ResultSummary: {},
      ResultUpdateRequest: {},
      ResultUpdateRequestModel: {},
      ResultUpdateResponse: {},
      RunCreateModel: {},
      RunStatistic: {},
      RunSummary: {},
      RunSummaryModel: {},
      RunType: {
        enumValues: {
          "unspecified": 0,
          "normal": 1,
          "blocking": 2,
          "web": 4,
          "mtrRunInitiatedFromWeb": 8,
          "runWithDtlEnv": 16,
          "noConfigRun": 32
        }
      },
      RunUpdateModel: {},
      Service: {
        enumValues: {
          "any": 0,
          "tcm": 1,
          "tfs": 2
        }
      },
      SuiteExpand: {
        enumValues: {
          "children": 1,
          "defaultTesters": 2
        }
      },
      TCMServiceDataMigrationStatus: {
        enumValues: {
          "notStarted": 0,
          "inProgress": 1,
          "completed": 2,
          "failed": 3
        }
      },
      TestActionResult: {},
      TestActionResult2: {},
      TestActionResultModel: {},
      TestAttachment: {},
      TestAuthoringDetails: {},
      TestCaseReference2: {},
      TestCaseResult: {},
      TestConfiguration: {},
      TestConfigurationState: {
        enumValues: {
          "active": 1,
          "inactive": 2
        }
      },
      TestExecutionReportData: {},
      TestExtensionField: {},
      TestExtensionFieldDetails: {},
      TestFailuresAnalysis: {},
      TestHistoryQuery: {},
      TestIterationDetailsModel: {},
      TestLog: {},
      TestLogReference: {},
      TestLogScope: {
        enumValues: {
          "run": 0,
          "build": 1,
          "release": 2
        }
      },
      TestLogStatus: {},
      TestLogStatusCode: {
        enumValues: {
          "success": 0,
          "failed": 1,
          "fileAlreadyExists": 2,
          "invalidInput": 3,
          "invalidFileName": 4,
          "invalidContainer": 5,
          "transferFailed": 6,
          "featureDisabled": 7,
          "buildDoesNotExist": 8,
          "runDoesNotExist": 9,
          "containerNotCreated": 10,
          "apiNotSupported": 11,
          "fileSizeExceeds": 12,
          "containerNotFound": 13,
          "fileNotFound": 14,
          "directoryNotFound": 15,
          "storageCapacityExceeded": 16
        }
      },
      TestLogStoreEndpointDetails: {},
      TestLogStoreEndpointType: {
        enumValues: {
          "root": 1,
          "file": 2
        }
      },
      TestLogStoreOperationType: {
        enumValues: {
          "read": 1,
          "create": 2,
          "readAndCreate": 3
        }
      },
      TestLogType: {
        enumValues: {
          "generalAttachment": 1,
          "codeCoverage": 2,
          "testImpact": 3,
          "intermediate": 4,
          "system": 5
        }
      },
      TestMessageLogDetails: {},
      TestMessageLogEntry: {},
      TestMessageLogEntry2: {},
      TestOutcome: {
        enumValues: {
          "unspecified": 0,
          "none": 1,
          "passed": 2,
          "failed": 3,
          "inconclusive": 4,
          "timeout": 5,
          "aborted": 6,
          "blocked": 7,
          "notExecuted": 8,
          "warning": 9,
          "error": 10,
          "notApplicable": 11,
          "paused": 12,
          "inProgress": 13,
          "notImpacted": 14,
          "maxValue": 14
        }
      },
      TestParameter2: {},
      TestPlan: {},
      TestPlanCloneRequest: {},
      TestPlanHubData: {},
      TestPlansWithSelection: {},
      TestPoint: {},
      TestPointReference: {},
      TestPointsEvent: {},
      TestPointsQuery: {},
      TestPointState: {
        enumValues: {
          "none": 0,
          "ready": 1,
          "completed": 2,
          "notReady": 3,
          "inProgress": 4,
          "maxValue": 4
        }
      },
      TestPointsUpdatedEvent: {},
      TestResult2: {},
      TestResultAcrossProjectResponse: {},
      TestResultAttachment: {},
      TestResultGroupBy: {
        enumValues: {
          "branch": 1,
          "environment": 2
        }
      },
      TestResultHistory: {},
      TestResultHistoryDetailsForGroup: {},
      TestResultHistoryForGroup: {},
      TestResultModelBase: {},
      TestResultReset2: {},
      TestResultsContext: {},
      TestResultsContextType: {
        enumValues: {
          "build": 1,
          "release": 2,
          "pipeline": 3
        }
      },
      TestResultsDetails: {},
      TestResultsDetailsForGroup: {},
      TestResultsEx2: {},
      TestResultsQuery: {},
      TestResultsSettings: {},
      TestResultsSettingsType: {
        enumValues: {
          "all": 1,
          "flaky": 2,
          "newTestLogging": 3
        }
      },
      TestResultSummary: {},
      TestResultsUpdateSettings: {},
      TestResultsWithWatermark: {},
      TestResultTrendFilter: {},
      TestRun: {},
      TestRun2: {},
      TestRunCanceledEvent: {},
      TestRunCreatedEvent: {},
      TestRunEvent: {},
      TestRunEx2: {},
      TestRunOutcome: {
        enumValues: {
          "passed": 0,
          "failed": 1,
          "notImpacted": 2,
          "others": 3
        }
      },
      TestRunPublishContext: {
        enumValues: {
          "build": 1,
          "release": 2,
          "all": 3
        }
      },
      TestRunStartedEvent: {},
      TestRunState: {
        enumValues: {
          "unspecified": 0,
          "notStarted": 1,
          "inProgress": 2,
          "completed": 3,
          "aborted": 4,
          "waiting": 5,
          "needsInvestigation": 6
        }
      },
      TestRunStatistic: {},
      TestRunSubstate: {
        enumValues: {
          "none": 0,
          "creatingEnvironment": 1,
          "runningTests": 2,
          "canceledByUser": 3,
          "abortedBySystem": 4,
          "timedOut": 5,
          "pendingAnalysis": 6,
          "analyzed": 7,
          "cancellationInProgress": 8
        }
      },
      TestRunSummary2: {},
      TestRunWithDtlEnvEvent: {},
      TestSession: {},
      TestSessionExploredWorkItemReference: {},
      TestSessionSource: {
        enumValues: {
          "unknown": 0,
          "xtDesktop": 1,
          "feedbackDesktop": 2,
          "xtWeb": 3,
          "feedbackWeb": 4,
          "xtDesktop2": 5,
          "sessionInsightsForAll": 6
        }
      },
      TestSessionState: {
        enumValues: {
          "unspecified": 0,
          "notStarted": 1,
          "inProgress": 2,
          "paused": 3,
          "completed": 4,
          "declined": 5
        }
      },
      TestSettings2: {},
      TestSubResult: {},
      TestSuite: {},
      TestSummaryForWorkItem: {},
      UpdatedProperties: {},
      UpdateTestRunRequest: {},
      UpdateTestRunResponse: {},
      WorkItemToTestLinks: {}
    };
    exports.TypeInfo.AfnStrip.fields = {
      creationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.AggregatedDataForResultTrend.fields = {
      resultsByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome
      },
      runSummaryByState: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByState
      },
      testResultsContext: {
        typeInfo: exports.TypeInfo.TestResultsContext
      }
    };
    exports.TypeInfo.AggregatedResultDetailsByOutcome.fields = {
      outcome: {
        enumType: exports.TypeInfo.TestOutcome
      }
    };
    exports.TypeInfo.AggregatedResultsAnalysis.fields = {
      notReportedResultsByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome
      },
      previousContext: {
        typeInfo: exports.TypeInfo.TestResultsContext
      },
      resultsByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome
      },
      runSummaryByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByOutcome
      },
      runSummaryByState: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByState
      }
    };
    exports.TypeInfo.AggregatedResultsByOutcome.fields = {
      outcome: {
        enumType: exports.TypeInfo.TestOutcome
      }
    };
    exports.TypeInfo.AggregatedRunsByOutcome.fields = {
      outcome: {
        enumType: exports.TypeInfo.TestRunOutcome
      }
    };
    exports.TypeInfo.AggregatedRunsByState.fields = {
      resultsByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome
      },
      state: {
        enumType: exports.TypeInfo.TestRunState
      }
    };
    exports.TypeInfo.BatchResponse.fields = {
      responses: {
        isArray: true,
        typeInfo: exports.TypeInfo.Response
      }
    };
    exports.TypeInfo.BuildConfiguration.fields = {
      creationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildCoverage.fields = {
      configuration: {
        typeInfo: exports.TypeInfo.BuildConfiguration
      }
    };
    exports.TypeInfo.BuildReference2.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.BulkResultUpdateRequest.fields = {
      requests: {
        isArray: true,
        typeInfo: exports.TypeInfo.ResultUpdateRequest
      }
    };
    exports.TypeInfo.CloneOperationInformation.fields = {
      completionDate: {
        isDate: true
      },
      creationDate: {
        isDate: true
      },
      resultObjectType: {
        enumType: exports.TypeInfo.ResultObjectType
      },
      state: {
        enumType: exports.TypeInfo.CloneOperationState
      }
    };
    exports.TypeInfo.CodeCoverageSummary.fields = {
      status: {
        enumType: exports.TypeInfo.CoverageSummaryStatus
      }
    };
    exports.TypeInfo.Coverage2.fields = {
      dateCreated: {
        isDate: true
      },
      dateModified: {
        isDate: true
      }
    };
    exports.TypeInfo.CreateTestMessageLogEntryRequest.fields = {
      testMessageLogEntry: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestMessageLogEntry
      }
    };
    exports.TypeInfo.CreateTestResultsRequest.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      }
    };
    exports.TypeInfo.CreateTestRunRequest.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      },
      testRun: {
        typeInfo: exports.TypeInfo.LegacyTestRun
      },
      testSettings: {
        typeInfo: exports.TypeInfo.LegacyTestSettings
      }
    };
    exports.TypeInfo.CustomTestFieldDefinition.fields = {
      fieldType: {
        enumType: exports.TypeInfo.CustomTestFieldType
      },
      scope: {
        enumType: exports.TypeInfo.CustomTestFieldScope
      }
    };
    exports.TypeInfo.DatedTestFieldData.fields = {
      date: {
        isDate: true
      }
    };
    exports.TypeInfo.FailingSince.fields = {
      date: {
        isDate: true
      },
      release: {
        typeInfo: exports.TypeInfo.ReleaseReference
      }
    };
    exports.TypeInfo.FetchTestResultsResponse.fields = {
      actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResult
      },
      attachments: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultAttachment
      },
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      }
    };
    exports.TypeInfo.FlakyDetection.fields = {
      flakyDetectionType: {
        enumType: exports.TypeInfo.FlakyDetectionType
      }
    };
    exports.TypeInfo.FlakySettings.fields = {
      flakyDetection: {
        typeInfo: exports.TypeInfo.FlakyDetection
      }
    };
    exports.TypeInfo.LastResultDetails.fields = {
      dateCompleted: {
        isDate: true
      }
    };
    exports.TypeInfo.LegacyBuildConfiguration.fields = {
      completedDate: {
        isDate: true
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.LegacyReleaseReference.fields = {
      environmentCreationDate: {
        isDate: true
      },
      releaseCreationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.LegacyTestCaseResult.fields = {
      buildReference: {
        typeInfo: exports.TypeInfo.LegacyBuildConfiguration
      },
      creationDate: {
        isDate: true
      },
      customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestExtensionField
      },
      dateCompleted: {
        isDate: true
      },
      dateStarted: {
        isDate: true
      },
      failingSince: {
        typeInfo: exports.TypeInfo.FailingSince
      },
      lastUpdated: {
        isDate: true
      },
      releaseReference: {
        typeInfo: exports.TypeInfo.LegacyReleaseReference
      },
      resultGroupType: {
        enumType: exports.TypeInfo.ResultGroupType
      },
      stackTrace: {
        typeInfo: exports.TypeInfo.TestExtensionField
      }
    };
    exports.TypeInfo.LegacyTestRun.fields = {
      buildReference: {
        typeInfo: exports.TypeInfo.LegacyBuildConfiguration
      },
      completeDate: {
        isDate: true
      },
      creationDate: {
        isDate: true
      },
      customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestExtensionField
      },
      dueDate: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      },
      releaseReference: {
        typeInfo: exports.TypeInfo.LegacyReleaseReference
      },
      startDate: {
        isDate: true
      },
      testMessageLogEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestMessageLogDetails
      }
    };
    exports.TypeInfo.LegacyTestSettings.fields = {
      createdDate: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.PipelineTestMetrics.fields = {
      resultSummary: {
        typeInfo: exports.TypeInfo.ResultSummary
      },
      runSummary: {
        typeInfo: exports.TypeInfo.RunSummary
      },
      summaryAtChild: {
        isArray: true,
        typeInfo: exports.TypeInfo.PipelineTestMetrics
      }
    };
    exports.TypeInfo.PointLastResult.fields = {
      lastUpdatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.PointsResults2.fields = {
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.QueryTestActionResultResponse.fields = {
      testActionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResult
      },
      testAttachments: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultAttachment
      }
    };
    exports.TypeInfo.ReleaseReference.fields = {
      creationDate: {
        isDate: true
      },
      environmentCreationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseReference2.fields = {
      environmentCreationDate: {
        isDate: true
      },
      releaseCreationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.RequirementsToTestsMapping2.fields = {
      creationDate: {
        isDate: true
      },
      deletionDate: {
        isDate: true
      }
    };
    exports.TypeInfo.Response.fields = {};
    exports.TypeInfo.ResultRetentionSettings.fields = {
      lastUpdatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ResultsByQueryResponse.fields = {
      testResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      }
    };
    exports.TypeInfo.ResultsFilter.fields = {
      executedIn: {
        enumType: exports.TypeInfo.Service
      },
      maxCompleteDate: {
        isDate: true
      },
      testResultsContext: {
        typeInfo: exports.TypeInfo.TestResultsContext
      }
    };
    exports.TypeInfo.ResultsSummaryByOutcome.fields = {
      aggregatedResultDetailsByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultDetailsByOutcome
      }
    };
    exports.TypeInfo.ResultSummary.fields = {
      resultSummaryByRunState: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,
        dictionaryValueTypeInfo: exports.TypeInfo.ResultsSummaryByOutcome
      }
    };
    exports.TypeInfo.ResultUpdateRequest.fields = {
      actionResultDeletes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResult
      },
      actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResult
      },
      attachments: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultAttachment
      },
      testCaseResult: {
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      }
    };
    exports.TypeInfo.ResultUpdateRequestModel.fields = {
      actionResultDeletes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
      },
      actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
      }
    };
    exports.TypeInfo.ResultUpdateResponse.fields = {
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.RunCreateModel.fields = {
      buildReference: {
        typeInfo: exports.TypeInfo.BuildConfiguration
      },
      releaseReference: {
        typeInfo: exports.TypeInfo.ReleaseReference
      },
      runSummary: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunSummaryModel
      }
    };
    exports.TypeInfo.RunStatistic.fields = {
      resultMetadata: {
        enumType: exports.TypeInfo.ResultMetadata
      }
    };
    exports.TypeInfo.RunSummary.fields = {
      runSummaryByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunOutcome
      },
      runSummaryByState: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestRunState
      }
    };
    exports.TypeInfo.RunSummaryModel.fields = {
      testOutcome: {
        enumType: exports.TypeInfo.TestOutcome
      }
    };
    exports.TypeInfo.RunUpdateModel.fields = {
      logEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestMessageLogDetails
      },
      runSummary: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunSummaryModel
      },
      substate: {
        enumType: exports.TypeInfo.TestRunSubstate
      }
    };
    exports.TypeInfo.TestActionResult.fields = {
      creationDate: {
        isDate: true
      },
      dateCompleted: {
        isDate: true
      },
      dateStarted: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestActionResult2.fields = {
      creationDate: {
        isDate: true
      },
      dateCompleted: {
        isDate: true
      },
      dateStarted: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestActionResultModel.fields = {
      completedDate: {
        isDate: true
      },
      startedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestAttachment.fields = {
      attachmentType: {
        enumType: exports.TypeInfo.AttachmentType
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestAuthoringDetails.fields = {
      lastUpdated: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TestPointState
      }
    };
    exports.TypeInfo.TestCaseReference2.fields = {
      creationDate: {
        isDate: true
      },
      lastRefTestRunDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestCaseResult.fields = {
      completedDate: {
        isDate: true
      },
      createdDate: {
        isDate: true
      },
      failingSince: {
        typeInfo: exports.TypeInfo.FailingSince
      },
      iterationDetails: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestIterationDetailsModel
      },
      lastUpdatedDate: {
        isDate: true
      },
      releaseReference: {
        typeInfo: exports.TypeInfo.ReleaseReference
      },
      resultGroupType: {
        enumType: exports.TypeInfo.ResultGroupType
      },
      startedDate: {
        isDate: true
      },
      subResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestSubResult
      }
    };
    exports.TypeInfo.TestConfiguration.fields = {
      lastUpdatedDate: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TestConfigurationState
      }
    };
    exports.TypeInfo.TestExecutionReportData.fields = {
      reportData: {
        isArray: true,
        typeInfo: exports.TypeInfo.DatedTestFieldData
      }
    };
    exports.TypeInfo.TestExtensionField.fields = {
      field: {
        typeInfo: exports.TypeInfo.TestExtensionFieldDetails
      }
    };
    exports.TypeInfo.TestExtensionFieldDetails.fields = {
      type: {
        enumType: SystemData.TypeInfo.SqlDbType
      }
    };
    exports.TypeInfo.TestFailuresAnalysis.fields = {
      previousContext: {
        typeInfo: exports.TypeInfo.TestResultsContext
      }
    };
    exports.TypeInfo.TestHistoryQuery.fields = {
      groupBy: {
        enumType: exports.TypeInfo.TestResultGroupBy
      },
      maxCompleteDate: {
        isDate: true
      },
      resultsForGroup: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultHistoryForGroup
      }
    };
    exports.TypeInfo.TestIterationDetailsModel.fields = {
      actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
      },
      completedDate: {
        isDate: true
      },
      startedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestLog.fields = {
      logReference: {
        typeInfo: exports.TypeInfo.TestLogReference
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.TestLogReference.fields = {
      scope: {
        enumType: exports.TypeInfo.TestLogScope
      },
      type: {
        enumType: exports.TypeInfo.TestLogType
      }
    };
    exports.TypeInfo.TestLogStatus.fields = {
      status: {
        enumType: exports.TypeInfo.TestLogStatusCode
      }
    };
    exports.TypeInfo.TestLogStoreEndpointDetails.fields = {
      endpointType: {
        enumType: exports.TypeInfo.TestLogStoreEndpointType
      },
      status: {
        enumType: exports.TypeInfo.TestLogStatusCode
      }
    };
    exports.TypeInfo.TestMessageLogDetails.fields = {
      dateCreated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestMessageLogEntry.fields = {
      dateCreated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestMessageLogEntry2.fields = {
      dateCreated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestParameter2.fields = {
      creationDate: {
        isDate: true
      },
      dateModified: {
        isDate: true
      }
    };
    exports.TypeInfo.TestPlan.fields = {
      endDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestPlanCloneRequest.fields = {
      destinationTestPlan: {
        typeInfo: exports.TypeInfo.TestPlan
      }
    };
    exports.TypeInfo.TestPlanHubData.fields = {
      testPlan: {
        typeInfo: exports.TypeInfo.TestPlan
      },
      testPoints: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPoint
      },
      testSuites: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestSuite
      }
    };
    exports.TypeInfo.TestPlansWithSelection.fields = {
      plans: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPlan
      }
    };
    exports.TypeInfo.TestPoint.fields = {
      lastResetToActive: {
        isDate: true
      },
      lastResultDetails: {
        typeInfo: exports.TypeInfo.LastResultDetails
      },
      lastUpdatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestPointReference.fields = {
      state: {
        enumType: exports.TypeInfo.TestPointState
      }
    };
    exports.TypeInfo.TestPointsEvent.fields = {
      testPoints: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPointReference
      }
    };
    exports.TypeInfo.TestPointsQuery.fields = {
      points: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPoint
      }
    };
    exports.TypeInfo.TestPointsUpdatedEvent.fields = {
      testPoints: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPointReference
      }
    };
    exports.TypeInfo.TestResult2.fields = {
      creationDate: {
        isDate: true
      },
      dateCompleted: {
        isDate: true
      },
      dateStarted: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.TestResultAcrossProjectResponse.fields = {
      testResult: {
        typeInfo: exports.TypeInfo.LegacyTestCaseResult
      }
    };
    exports.TypeInfo.TestResultAttachment.fields = {
      attachmentType: {
        enumType: exports.TypeInfo.AttachmentType
      },
      creationDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestResultHistory.fields = {
      resultsForGroup: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultHistoryDetailsForGroup
      }
    };
    exports.TypeInfo.TestResultHistoryDetailsForGroup.fields = {
      latestResult: {
        typeInfo: exports.TypeInfo.TestCaseResult
      }
    };
    exports.TypeInfo.TestResultHistoryForGroup.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestCaseResult
      }
    };
    exports.TypeInfo.TestResultModelBase.fields = {
      completedDate: {
        isDate: true
      },
      startedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestResultReset2.fields = {
      dateModified: {
        isDate: true
      }
    };
    exports.TypeInfo.TestResultsContext.fields = {
      contextType: {
        enumType: exports.TypeInfo.TestResultsContextType
      },
      release: {
        typeInfo: exports.TypeInfo.ReleaseReference
      }
    };
    exports.TypeInfo.TestResultsDetails.fields = {
      resultsForGroup: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultsDetailsForGroup
      }
    };
    exports.TypeInfo.TestResultsDetailsForGroup.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestCaseResult
      },
      resultsCountByOutcome: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,
        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome
      }
    };
    exports.TypeInfo.TestResultsEx2.fields = {
      creationDate: {
        isDate: true
      },
      dateTimeValue: {
        isDate: true
      }
    };
    exports.TypeInfo.TestResultsQuery.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestCaseResult
      },
      resultsFilter: {
        typeInfo: exports.TypeInfo.ResultsFilter
      }
    };
    exports.TypeInfo.TestResultsSettings.fields = {
      flakySettings: {
        typeInfo: exports.TypeInfo.FlakySettings
      }
    };
    exports.TypeInfo.TestResultSummary.fields = {
      aggregatedResultsAnalysis: {
        typeInfo: exports.TypeInfo.AggregatedResultsAnalysis
      },
      teamProject: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      testFailures: {
        typeInfo: exports.TypeInfo.TestFailuresAnalysis
      },
      testResultsContext: {
        typeInfo: exports.TypeInfo.TestResultsContext
      }
    };
    exports.TypeInfo.TestResultsUpdateSettings.fields = {
      flakySettings: {
        typeInfo: exports.TypeInfo.FlakySettings
      }
    };
    exports.TypeInfo.TestResultsWithWatermark.fields = {
      changedDate: {
        isDate: true
      },
      pointsResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.PointsResults2
      }
    };
    exports.TypeInfo.TestResultTrendFilter.fields = {
      maxCompleteDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestRun.fields = {
      buildConfiguration: {
        typeInfo: exports.TypeInfo.BuildConfiguration
      },
      completedDate: {
        isDate: true
      },
      createdDate: {
        isDate: true
      },
      dueDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      },
      release: {
        typeInfo: exports.TypeInfo.ReleaseReference
      },
      runStatistics: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunStatistic
      },
      startedDate: {
        isDate: true
      },
      substate: {
        enumType: exports.TypeInfo.TestRunSubstate
      }
    };
    exports.TypeInfo.TestRun2.fields = {
      completeDate: {
        isDate: true
      },
      creationDate: {
        isDate: true
      },
      deletedOn: {
        isDate: true
      },
      dueDate: {
        isDate: true
      },
      lastUpdated: {
        isDate: true
      },
      startDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestRunCanceledEvent.fields = {
      testRun: {
        typeInfo: exports.TypeInfo.TestRun
      }
    };
    exports.TypeInfo.TestRunCreatedEvent.fields = {
      testRun: {
        typeInfo: exports.TypeInfo.TestRun
      }
    };
    exports.TypeInfo.TestRunEvent.fields = {
      testRun: {
        typeInfo: exports.TypeInfo.TestRun
      }
    };
    exports.TypeInfo.TestRunEx2.fields = {
      createdDate: {
        isDate: true
      },
      dateTimeValue: {
        isDate: true
      }
    };
    exports.TypeInfo.TestRunStartedEvent.fields = {
      testRun: {
        typeInfo: exports.TypeInfo.TestRun
      }
    };
    exports.TypeInfo.TestRunStatistic.fields = {
      runStatistics: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunStatistic
      }
    };
    exports.TypeInfo.TestRunSummary2.fields = {
      testRunCompletedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestRunWithDtlEnvEvent.fields = {
      testRun: {
        typeInfo: exports.TypeInfo.TestRun
      }
    };
    exports.TypeInfo.TestSession.fields = {
      endDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      },
      source: {
        enumType: exports.TypeInfo.TestSessionSource
      },
      startDate: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TestSessionState
      }
    };
    exports.TypeInfo.TestSessionExploredWorkItemReference.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.TestSettings2.fields = {
      createdDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestSubResult.fields = {
      completedDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      },
      resultGroupType: {
        enumType: exports.TypeInfo.ResultGroupType
      },
      startedDate: {
        isDate: true
      },
      subResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestSubResult
      }
    };
    exports.TypeInfo.TestSuite.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestSuite
      },
      lastPopulatedDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TestSummaryForWorkItem.fields = {
      summary: {
        typeInfo: exports.TypeInfo.AggregatedDataForResultTrend
      }
    };
    exports.TypeInfo.UpdatedProperties.fields = {
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.UpdateTestRunRequest.fields = {
      attachmentsToAdd: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultAttachment
      },
      testRun: {
        typeInfo: exports.TypeInfo.LegacyTestRun
      }
    };
    exports.TypeInfo.UpdateTestRunResponse.fields = {
      updatedProperties: {
        typeInfo: exports.TypeInfo.UpdatedProperties
      }
    };
    exports.TypeInfo.WorkItemToTestLinks.fields = {
      executedIn: {
        enumType: exports.TypeInfo.Service
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/BuildInterfaces.js
var require_BuildInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/BuildInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TFS_TestManagement_Contracts = require_TestInterfaces();
    var TfsCoreInterfaces = require_CoreInterfaces();
    var AgentStatus;
    (function(AgentStatus2) {
      AgentStatus2[AgentStatus2["Unavailable"] = 0] = "Unavailable";
      AgentStatus2[AgentStatus2["Available"] = 1] = "Available";
      AgentStatus2[AgentStatus2["Offline"] = 2] = "Offline";
    })(AgentStatus = exports.AgentStatus || (exports.AgentStatus = {}));
    var AuditAction;
    (function(AuditAction2) {
      AuditAction2[AuditAction2["Add"] = 1] = "Add";
      AuditAction2[AuditAction2["Update"] = 2] = "Update";
      AuditAction2[AuditAction2["Delete"] = 3] = "Delete";
    })(AuditAction = exports.AuditAction || (exports.AuditAction = {}));
    var BuildAuthorizationScope;
    (function(BuildAuthorizationScope2) {
      BuildAuthorizationScope2[BuildAuthorizationScope2["ProjectCollection"] = 1] = "ProjectCollection";
      BuildAuthorizationScope2[BuildAuthorizationScope2["Project"] = 2] = "Project";
    })(BuildAuthorizationScope = exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));
    var BuildOptionInputType;
    (function(BuildOptionInputType2) {
      BuildOptionInputType2[BuildOptionInputType2["String"] = 0] = "String";
      BuildOptionInputType2[BuildOptionInputType2["Boolean"] = 1] = "Boolean";
      BuildOptionInputType2[BuildOptionInputType2["StringList"] = 2] = "StringList";
      BuildOptionInputType2[BuildOptionInputType2["Radio"] = 3] = "Radio";
      BuildOptionInputType2[BuildOptionInputType2["PickList"] = 4] = "PickList";
      BuildOptionInputType2[BuildOptionInputType2["MultiLine"] = 5] = "MultiLine";
      BuildOptionInputType2[BuildOptionInputType2["BranchFilter"] = 6] = "BranchFilter";
    })(BuildOptionInputType = exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));
    var BuildPhaseStatus;
    (function(BuildPhaseStatus2) {
      BuildPhaseStatus2[BuildPhaseStatus2["Unknown"] = 0] = "Unknown";
      BuildPhaseStatus2[BuildPhaseStatus2["Failed"] = 1] = "Failed";
      BuildPhaseStatus2[BuildPhaseStatus2["Succeeded"] = 2] = "Succeeded";
    })(BuildPhaseStatus = exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));
    var BuildQueryOrder;
    (function(BuildQueryOrder2) {
      BuildQueryOrder2[BuildQueryOrder2["FinishTimeAscending"] = 2] = "FinishTimeAscending";
      BuildQueryOrder2[BuildQueryOrder2["FinishTimeDescending"] = 3] = "FinishTimeDescending";
      BuildQueryOrder2[BuildQueryOrder2["QueueTimeDescending"] = 4] = "QueueTimeDescending";
      BuildQueryOrder2[BuildQueryOrder2["QueueTimeAscending"] = 5] = "QueueTimeAscending";
      BuildQueryOrder2[BuildQueryOrder2["StartTimeDescending"] = 6] = "StartTimeDescending";
      BuildQueryOrder2[BuildQueryOrder2["StartTimeAscending"] = 7] = "StartTimeAscending";
    })(BuildQueryOrder = exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));
    var BuildReason;
    (function(BuildReason2) {
      BuildReason2[BuildReason2["None"] = 0] = "None";
      BuildReason2[BuildReason2["Manual"] = 1] = "Manual";
      BuildReason2[BuildReason2["IndividualCI"] = 2] = "IndividualCI";
      BuildReason2[BuildReason2["BatchedCI"] = 4] = "BatchedCI";
      BuildReason2[BuildReason2["Schedule"] = 8] = "Schedule";
      BuildReason2[BuildReason2["ScheduleForced"] = 16] = "ScheduleForced";
      BuildReason2[BuildReason2["UserCreated"] = 32] = "UserCreated";
      BuildReason2[BuildReason2["ValidateShelveset"] = 64] = "ValidateShelveset";
      BuildReason2[BuildReason2["CheckInShelveset"] = 128] = "CheckInShelveset";
      BuildReason2[BuildReason2["PullRequest"] = 256] = "PullRequest";
      BuildReason2[BuildReason2["BuildCompletion"] = 512] = "BuildCompletion";
      BuildReason2[BuildReason2["ResourceTrigger"] = 1024] = "ResourceTrigger";
      BuildReason2[BuildReason2["Triggered"] = 1967] = "Triggered";
      BuildReason2[BuildReason2["All"] = 2031] = "All";
    })(BuildReason = exports.BuildReason || (exports.BuildReason = {}));
    var BuildResult;
    (function(BuildResult2) {
      BuildResult2[BuildResult2["None"] = 0] = "None";
      BuildResult2[BuildResult2["Succeeded"] = 2] = "Succeeded";
      BuildResult2[BuildResult2["PartiallySucceeded"] = 4] = "PartiallySucceeded";
      BuildResult2[BuildResult2["Failed"] = 8] = "Failed";
      BuildResult2[BuildResult2["Canceled"] = 32] = "Canceled";
    })(BuildResult = exports.BuildResult || (exports.BuildResult = {}));
    var BuildStatus;
    (function(BuildStatus2) {
      BuildStatus2[BuildStatus2["None"] = 0] = "None";
      BuildStatus2[BuildStatus2["InProgress"] = 1] = "InProgress";
      BuildStatus2[BuildStatus2["Completed"] = 2] = "Completed";
      BuildStatus2[BuildStatus2["Cancelling"] = 4] = "Cancelling";
      BuildStatus2[BuildStatus2["Postponed"] = 8] = "Postponed";
      BuildStatus2[BuildStatus2["NotStarted"] = 32] = "NotStarted";
      BuildStatus2[BuildStatus2["All"] = 47] = "All";
    })(BuildStatus = exports.BuildStatus || (exports.BuildStatus = {}));
    var ControllerStatus;
    (function(ControllerStatus2) {
      ControllerStatus2[ControllerStatus2["Unavailable"] = 0] = "Unavailable";
      ControllerStatus2[ControllerStatus2["Available"] = 1] = "Available";
      ControllerStatus2[ControllerStatus2["Offline"] = 2] = "Offline";
    })(ControllerStatus = exports.ControllerStatus || (exports.ControllerStatus = {}));
    var DefinitionQuality;
    (function(DefinitionQuality2) {
      DefinitionQuality2[DefinitionQuality2["Definition"] = 1] = "Definition";
      DefinitionQuality2[DefinitionQuality2["Draft"] = 2] = "Draft";
    })(DefinitionQuality = exports.DefinitionQuality || (exports.DefinitionQuality = {}));
    var DefinitionQueryOrder;
    (function(DefinitionQueryOrder2) {
      DefinitionQueryOrder2[DefinitionQueryOrder2["None"] = 0] = "None";
      DefinitionQueryOrder2[DefinitionQueryOrder2["LastModifiedAscending"] = 1] = "LastModifiedAscending";
      DefinitionQueryOrder2[DefinitionQueryOrder2["LastModifiedDescending"] = 2] = "LastModifiedDescending";
      DefinitionQueryOrder2[DefinitionQueryOrder2["DefinitionNameAscending"] = 3] = "DefinitionNameAscending";
      DefinitionQueryOrder2[DefinitionQueryOrder2["DefinitionNameDescending"] = 4] = "DefinitionNameDescending";
    })(DefinitionQueryOrder = exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));
    var DefinitionQueueStatus;
    (function(DefinitionQueueStatus2) {
      DefinitionQueueStatus2[DefinitionQueueStatus2["Enabled"] = 0] = "Enabled";
      DefinitionQueueStatus2[DefinitionQueueStatus2["Paused"] = 1] = "Paused";
      DefinitionQueueStatus2[DefinitionQueueStatus2["Disabled"] = 2] = "Disabled";
    })(DefinitionQueueStatus = exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));
    var DefinitionTriggerType;
    (function(DefinitionTriggerType2) {
      DefinitionTriggerType2[DefinitionTriggerType2["None"] = 1] = "None";
      DefinitionTriggerType2[DefinitionTriggerType2["ContinuousIntegration"] = 2] = "ContinuousIntegration";
      DefinitionTriggerType2[DefinitionTriggerType2["BatchedContinuousIntegration"] = 4] = "BatchedContinuousIntegration";
      DefinitionTriggerType2[DefinitionTriggerType2["Schedule"] = 8] = "Schedule";
      DefinitionTriggerType2[DefinitionTriggerType2["GatedCheckIn"] = 16] = "GatedCheckIn";
      DefinitionTriggerType2[DefinitionTriggerType2["BatchedGatedCheckIn"] = 32] = "BatchedGatedCheckIn";
      DefinitionTriggerType2[DefinitionTriggerType2["PullRequest"] = 64] = "PullRequest";
      DefinitionTriggerType2[DefinitionTriggerType2["BuildCompletion"] = 128] = "BuildCompletion";
      DefinitionTriggerType2[DefinitionTriggerType2["All"] = 255] = "All";
    })(DefinitionTriggerType = exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));
    var DefinitionType;
    (function(DefinitionType2) {
      DefinitionType2[DefinitionType2["Xaml"] = 1] = "Xaml";
      DefinitionType2[DefinitionType2["Build"] = 2] = "Build";
    })(DefinitionType = exports.DefinitionType || (exports.DefinitionType = {}));
    var DeleteOptions;
    (function(DeleteOptions2) {
      DeleteOptions2[DeleteOptions2["None"] = 0] = "None";
      DeleteOptions2[DeleteOptions2["DropLocation"] = 1] = "DropLocation";
      DeleteOptions2[DeleteOptions2["TestResults"] = 2] = "TestResults";
      DeleteOptions2[DeleteOptions2["Label"] = 4] = "Label";
      DeleteOptions2[DeleteOptions2["Details"] = 8] = "Details";
      DeleteOptions2[DeleteOptions2["Symbols"] = 16] = "Symbols";
      DeleteOptions2[DeleteOptions2["All"] = 31] = "All";
    })(DeleteOptions = exports.DeleteOptions || (exports.DeleteOptions = {}));
    var FolderQueryOrder;
    (function(FolderQueryOrder2) {
      FolderQueryOrder2[FolderQueryOrder2["None"] = 0] = "None";
      FolderQueryOrder2[FolderQueryOrder2["FolderAscending"] = 1] = "FolderAscending";
      FolderQueryOrder2[FolderQueryOrder2["FolderDescending"] = 2] = "FolderDescending";
    })(FolderQueryOrder = exports.FolderQueryOrder || (exports.FolderQueryOrder = {}));
    var GetOption;
    (function(GetOption2) {
      GetOption2[GetOption2["LatestOnQueue"] = 0] = "LatestOnQueue";
      GetOption2[GetOption2["LatestOnBuild"] = 1] = "LatestOnBuild";
      GetOption2[GetOption2["Custom"] = 2] = "Custom";
    })(GetOption = exports.GetOption || (exports.GetOption = {}));
    var IssueType;
    (function(IssueType2) {
      IssueType2[IssueType2["Error"] = 1] = "Error";
      IssueType2[IssueType2["Warning"] = 2] = "Warning";
    })(IssueType = exports.IssueType || (exports.IssueType = {}));
    var ProcessTemplateType;
    (function(ProcessTemplateType2) {
      ProcessTemplateType2[ProcessTemplateType2["Custom"] = 0] = "Custom";
      ProcessTemplateType2[ProcessTemplateType2["Default"] = 1] = "Default";
      ProcessTemplateType2[ProcessTemplateType2["Upgrade"] = 2] = "Upgrade";
    })(ProcessTemplateType = exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));
    var QueryDeletedOption;
    (function(QueryDeletedOption2) {
      QueryDeletedOption2[QueryDeletedOption2["ExcludeDeleted"] = 0] = "ExcludeDeleted";
      QueryDeletedOption2[QueryDeletedOption2["IncludeDeleted"] = 1] = "IncludeDeleted";
      QueryDeletedOption2[QueryDeletedOption2["OnlyDeleted"] = 2] = "OnlyDeleted";
    })(QueryDeletedOption = exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));
    var QueueOptions;
    (function(QueueOptions2) {
      QueueOptions2[QueueOptions2["None"] = 0] = "None";
      QueueOptions2[QueueOptions2["DoNotRun"] = 1] = "DoNotRun";
    })(QueueOptions = exports.QueueOptions || (exports.QueueOptions = {}));
    var QueuePriority;
    (function(QueuePriority2) {
      QueuePriority2[QueuePriority2["Low"] = 5] = "Low";
      QueuePriority2[QueuePriority2["BelowNormal"] = 4] = "BelowNormal";
      QueuePriority2[QueuePriority2["Normal"] = 3] = "Normal";
      QueuePriority2[QueuePriority2["AboveNormal"] = 2] = "AboveNormal";
      QueuePriority2[QueuePriority2["High"] = 1] = "High";
    })(QueuePriority = exports.QueuePriority || (exports.QueuePriority = {}));
    var RepositoryCleanOptions;
    (function(RepositoryCleanOptions2) {
      RepositoryCleanOptions2[RepositoryCleanOptions2["Source"] = 0] = "Source";
      RepositoryCleanOptions2[RepositoryCleanOptions2["SourceAndOutputDir"] = 1] = "SourceAndOutputDir";
      RepositoryCleanOptions2[RepositoryCleanOptions2["SourceDir"] = 2] = "SourceDir";
      RepositoryCleanOptions2[RepositoryCleanOptions2["AllBuildDir"] = 3] = "AllBuildDir";
    })(RepositoryCleanOptions = exports.RepositoryCleanOptions || (exports.RepositoryCleanOptions = {}));
    var ResultSet;
    (function(ResultSet2) {
      ResultSet2[ResultSet2["All"] = 0] = "All";
      ResultSet2[ResultSet2["Top"] = 1] = "Top";
    })(ResultSet = exports.ResultSet || (exports.ResultSet = {}));
    var ScheduleDays;
    (function(ScheduleDays2) {
      ScheduleDays2[ScheduleDays2["None"] = 0] = "None";
      ScheduleDays2[ScheduleDays2["Monday"] = 1] = "Monday";
      ScheduleDays2[ScheduleDays2["Tuesday"] = 2] = "Tuesday";
      ScheduleDays2[ScheduleDays2["Wednesday"] = 4] = "Wednesday";
      ScheduleDays2[ScheduleDays2["Thursday"] = 8] = "Thursday";
      ScheduleDays2[ScheduleDays2["Friday"] = 16] = "Friday";
      ScheduleDays2[ScheduleDays2["Saturday"] = 32] = "Saturday";
      ScheduleDays2[ScheduleDays2["Sunday"] = 64] = "Sunday";
      ScheduleDays2[ScheduleDays2["All"] = 127] = "All";
    })(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));
    var ServiceHostStatus;
    (function(ServiceHostStatus2) {
      ServiceHostStatus2[ServiceHostStatus2["Online"] = 1] = "Online";
      ServiceHostStatus2[ServiceHostStatus2["Offline"] = 2] = "Offline";
    })(ServiceHostStatus = exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));
    var SourceProviderAvailability;
    (function(SourceProviderAvailability2) {
      SourceProviderAvailability2[SourceProviderAvailability2["Hosted"] = 1] = "Hosted";
      SourceProviderAvailability2[SourceProviderAvailability2["OnPremises"] = 2] = "OnPremises";
      SourceProviderAvailability2[SourceProviderAvailability2["All"] = 3] = "All";
    })(SourceProviderAvailability = exports.SourceProviderAvailability || (exports.SourceProviderAvailability = {}));
    var StageUpdateType;
    (function(StageUpdateType2) {
      StageUpdateType2[StageUpdateType2["Cancel"] = 0] = "Cancel";
      StageUpdateType2[StageUpdateType2["Retry"] = 1] = "Retry";
    })(StageUpdateType = exports.StageUpdateType || (exports.StageUpdateType = {}));
    var SupportLevel;
    (function(SupportLevel2) {
      SupportLevel2[SupportLevel2["Unsupported"] = 0] = "Unsupported";
      SupportLevel2[SupportLevel2["Supported"] = 1] = "Supported";
      SupportLevel2[SupportLevel2["Required"] = 2] = "Required";
    })(SupportLevel = exports.SupportLevel || (exports.SupportLevel = {}));
    var TaskResult;
    (function(TaskResult2) {
      TaskResult2[TaskResult2["Succeeded"] = 0] = "Succeeded";
      TaskResult2[TaskResult2["SucceededWithIssues"] = 1] = "SucceededWithIssues";
      TaskResult2[TaskResult2["Failed"] = 2] = "Failed";
      TaskResult2[TaskResult2["Canceled"] = 3] = "Canceled";
      TaskResult2[TaskResult2["Skipped"] = 4] = "Skipped";
      TaskResult2[TaskResult2["Abandoned"] = 5] = "Abandoned";
    })(TaskResult = exports.TaskResult || (exports.TaskResult = {}));
    var TimelineRecordState;
    (function(TimelineRecordState2) {
      TimelineRecordState2[TimelineRecordState2["Pending"] = 0] = "Pending";
      TimelineRecordState2[TimelineRecordState2["InProgress"] = 1] = "InProgress";
      TimelineRecordState2[TimelineRecordState2["Completed"] = 2] = "Completed";
    })(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));
    var ValidationResult;
    (function(ValidationResult2) {
      ValidationResult2[ValidationResult2["OK"] = 0] = "OK";
      ValidationResult2[ValidationResult2["Warning"] = 1] = "Warning";
      ValidationResult2[ValidationResult2["Error"] = 2] = "Error";
    })(ValidationResult = exports.ValidationResult || (exports.ValidationResult = {}));
    var WorkspaceMappingType;
    (function(WorkspaceMappingType2) {
      WorkspaceMappingType2[WorkspaceMappingType2["Map"] = 0] = "Map";
      WorkspaceMappingType2[WorkspaceMappingType2["Cloak"] = 1] = "Cloak";
    })(WorkspaceMappingType = exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));
    exports.TypeInfo = {
      AgentStatus: {
        enumValues: {
          "unavailable": 0,
          "available": 1,
          "offline": 2
        }
      },
      AuditAction: {
        enumValues: {
          "add": 1,
          "update": 2,
          "delete": 3
        }
      },
      Build: {},
      BuildAgent: {},
      BuildAuthorizationScope: {
        enumValues: {
          "projectCollection": 1,
          "project": 2
        }
      },
      BuildCompletedEvent: {},
      BuildCompletionTrigger: {},
      BuildController: {},
      BuildDefinition: {},
      BuildDefinition3_2: {},
      BuildDefinitionReference: {},
      BuildDefinitionReference3_2: {},
      BuildDefinitionRevision: {},
      BuildDefinitionSourceProvider: {},
      BuildDefinitionTemplate: {},
      BuildDefinitionTemplate3_2: {},
      BuildDeletedEvent: {},
      BuildDeployment: {},
      BuildLog: {},
      BuildMetric: {},
      BuildOptionDefinition: {},
      BuildOptionInputDefinition: {},
      BuildOptionInputType: {
        enumValues: {
          "string": 0,
          "boolean": 1,
          "stringList": 2,
          "radio": 3,
          "pickList": 4,
          "multiLine": 5,
          "branchFilter": 6
        }
      },
      BuildPhaseStatus: {
        enumValues: {
          "unknown": 0,
          "failed": 1,
          "succeeded": 2
        }
      },
      BuildProcessTemplate: {},
      BuildQueryOrder: {
        enumValues: {
          "finishTimeAscending": 2,
          "finishTimeDescending": 3,
          "queueTimeDescending": 4,
          "queueTimeAscending": 5,
          "startTimeDescending": 6,
          "startTimeAscending": 7
        }
      },
      BuildQueuedEvent: {},
      BuildReason: {
        enumValues: {
          "none": 0,
          "manual": 1,
          "individualCI": 2,
          "batchedCI": 4,
          "schedule": 8,
          "scheduleForced": 16,
          "userCreated": 32,
          "validateShelveset": 64,
          "checkInShelveset": 128,
          "pullRequest": 256,
          "buildCompletion": 512,
          "resourceTrigger": 1024,
          "triggered": 1967,
          "all": 2031
        }
      },
      BuildReference: {},
      BuildRequestValidationResult: {},
      BuildResult: {
        enumValues: {
          "none": 0,
          "succeeded": 2,
          "partiallySucceeded": 4,
          "failed": 8,
          "canceled": 32
        }
      },
      BuildRetentionHistory: {},
      BuildRetentionSample: {},
      BuildServer: {},
      BuildStatus: {
        enumValues: {
          "none": 0,
          "inProgress": 1,
          "completed": 2,
          "cancelling": 4,
          "postponed": 8,
          "notStarted": 32,
          "all": 47
        }
      },
      BuildSummary: {},
      BuildTagsAddedEvent: {},
      BuildTrigger: {},
      BuildUpdatedEvent: {},
      Change: {},
      ContinuousDeploymentDefinition: {},
      ContinuousIntegrationTrigger: {},
      ControllerStatus: {
        enumValues: {
          "unavailable": 0,
          "available": 1,
          "offline": 2
        }
      },
      DefinitionQuality: {
        enumValues: {
          "definition": 1,
          "draft": 2
        }
      },
      DefinitionQueryOrder: {
        enumValues: {
          "none": 0,
          "lastModifiedAscending": 1,
          "lastModifiedDescending": 2,
          "definitionNameAscending": 3,
          "definitionNameDescending": 4
        }
      },
      DefinitionQueueStatus: {
        enumValues: {
          "enabled": 0,
          "paused": 1,
          "disabled": 2
        }
      },
      DefinitionReference: {},
      DefinitionTriggerType: {
        enumValues: {
          "none": 1,
          "continuousIntegration": 2,
          "batchedContinuousIntegration": 4,
          "schedule": 8,
          "gatedCheckIn": 16,
          "batchedGatedCheckIn": 32,
          "pullRequest": 64,
          "buildCompletion": 128,
          "all": 255
        }
      },
      DefinitionType: {
        enumValues: {
          "xaml": 1,
          "build": 2
        }
      },
      DeleteOptions: {
        enumValues: {
          "none": 0,
          "dropLocation": 1,
          "testResults": 2,
          "label": 4,
          "details": 8,
          "symbols": 16,
          "all": 31
        }
      },
      DesignerProcess: {},
      Folder: {},
      FolderQueryOrder: {
        enumValues: {
          "none": 0,
          "folderAscending": 1,
          "folderDescending": 2
        }
      },
      GatedCheckInTrigger: {},
      GetOption: {
        enumValues: {
          "latestOnQueue": 0,
          "latestOnBuild": 1,
          "custom": 2
        }
      },
      InformationNode: {},
      Issue: {},
      IssueType: {
        enumValues: {
          "error": 1,
          "warning": 2
        }
      },
      Phase: {},
      ProcessTemplateType: {
        enumValues: {
          "custom": 0,
          "default": 1,
          "upgrade": 2
        }
      },
      PullRequestTrigger: {},
      QueryDeletedOption: {
        enumValues: {
          "excludeDeleted": 0,
          "includeDeleted": 1,
          "onlyDeleted": 2
        }
      },
      QueueOptions: {
        enumValues: {
          "none": 0,
          "doNotRun": 1
        }
      },
      QueuePriority: {
        enumValues: {
          "low": 5,
          "belowNormal": 4,
          "normal": 3,
          "aboveNormal": 2,
          "high": 1
        }
      },
      RepositoryCleanOptions: {
        enumValues: {
          "source": 0,
          "sourceAndOutputDir": 1,
          "sourceDir": 2,
          "allBuildDir": 3
        }
      },
      RepositoryWebhook: {},
      ResultSet: {
        enumValues: {
          "all": 0,
          "top": 1
        }
      },
      RetentionLease: {},
      Schedule: {},
      ScheduleDays: {
        enumValues: {
          "none": 0,
          "monday": 1,
          "tuesday": 2,
          "wednesday": 4,
          "thursday": 8,
          "friday": 16,
          "saturday": 32,
          "sunday": 64,
          "all": 127
        }
      },
      ScheduleTrigger: {},
      ServiceHostStatus: {
        enumValues: {
          "online": 1,
          "offline": 2
        }
      },
      SourceProviderAttributes: {},
      SourceProviderAvailability: {
        enumValues: {
          "hosted": 1,
          "onPremises": 2,
          "all": 3
        }
      },
      StageUpdateType: {
        enumValues: {
          "cancel": 0,
          "retry": 1
        }
      },
      SupportedTrigger: {},
      SupportLevel: {
        enumValues: {
          "unsupported": 0,
          "supported": 1,
          "required": 2
        }
      },
      TaskResult: {
        enumValues: {
          "succeeded": 0,
          "succeededWithIssues": 1,
          "failed": 2,
          "canceled": 3,
          "skipped": 4,
          "abandoned": 5
        }
      },
      Timeline: {},
      TimelineRecord: {},
      TimelineRecordState: {
        enumValues: {
          "pending": 0,
          "inProgress": 1,
          "completed": 2
        }
      },
      TimelineRecordsUpdatedEvent: {},
      UpdateStageParameters: {},
      ValidationResult: {
        enumValues: {
          "ok": 0,
          "warning": 1,
          "error": 2
        }
      },
      WorkspaceMapping: {},
      WorkspaceMappingType: {
        enumValues: {
          "map": 0,
          "cloak": 1
        }
      },
      WorkspaceTemplate: {},
      XamlBuildDefinition: {}
    };
    exports.TypeInfo.Build.fields = {
      controller: {
        typeInfo: exports.TypeInfo.BuildController
      },
      definition: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      deletedDate: {
        isDate: true
      },
      finishTime: {
        isDate: true
      },
      lastChangedDate: {
        isDate: true
      },
      priority: {
        enumType: exports.TypeInfo.QueuePriority
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      queueOptions: {
        enumType: exports.TypeInfo.QueueOptions
      },
      queueTime: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.BuildReason
      },
      result: {
        enumType: exports.TypeInfo.BuildResult
      },
      startTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.BuildStatus
      },
      triggeredByBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      validationResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildRequestValidationResult
      }
    };
    exports.TypeInfo.BuildAgent.fields = {
      createdDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.AgentStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildCompletedEvent.fields = {
      build: {
        typeInfo: exports.TypeInfo.Build
      },
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.Change
      },
      testResults: {
        typeInfo: TFS_TestManagement_Contracts.TypeInfo.AggregatedResultsAnalysis
      },
      timelineRecords: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
      }
    };
    exports.TypeInfo.BuildCompletionTrigger.fields = {
      definition: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.BuildController.fields = {
      createdDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.ControllerStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildDefinition.fields = {
      createdDate: {
        isDate: true
      },
      draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      drafts: {
        isArray: true,
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      jobAuthorizationScope: {
        enumType: exports.TypeInfo.BuildAuthorizationScope
      },
      latestBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      latestCompletedBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      quality: {
        enumType: exports.TypeInfo.DefinitionQuality
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildTrigger
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
    exports.TypeInfo.BuildDefinition3_2.fields = {
      createdDate: {
        isDate: true
      },
      draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      drafts: {
        isArray: true,
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      jobAuthorizationScope: {
        enumType: exports.TypeInfo.BuildAuthorizationScope
      },
      latestBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      latestCompletedBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      quality: {
        enumType: exports.TypeInfo.DefinitionQuality
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildTrigger
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
    exports.TypeInfo.BuildDefinitionReference.fields = {
      createdDate: {
        isDate: true
      },
      draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      drafts: {
        isArray: true,
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      latestBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      latestCompletedBuild: {
        typeInfo: exports.TypeInfo.Build
      },
      metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      quality: {
        enumType: exports.TypeInfo.DefinitionQuality
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
    exports.TypeInfo.BuildDefinitionReference3_2.fields = {
      createdDate: {
        isDate: true
      },
      draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      drafts: {
        isArray: true,
        typeInfo: exports.TypeInfo.DefinitionReference
      },
      metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      quality: {
        enumType: exports.TypeInfo.DefinitionQuality
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
    exports.TypeInfo.BuildDefinitionRevision.fields = {
      changedDate: {
        isDate: true
      },
      changeType: {
        enumType: exports.TypeInfo.AuditAction
      }
    };
    exports.TypeInfo.BuildDefinitionSourceProvider.fields = {
      lastModified: {
        isDate: true
      },
      supportedTriggerTypes: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.BuildDefinitionTemplate.fields = {
      template: {
        typeInfo: exports.TypeInfo.BuildDefinition
      }
    };
    exports.TypeInfo.BuildDefinitionTemplate3_2.fields = {
      template: {
        typeInfo: exports.TypeInfo.BuildDefinition3_2
      }
    };
    exports.TypeInfo.BuildDeletedEvent.fields = {
      build: {
        typeInfo: exports.TypeInfo.Build
      }
    };
    exports.TypeInfo.BuildDeployment.fields = {
      deployment: {
        typeInfo: exports.TypeInfo.BuildSummary
      }
    };
    exports.TypeInfo.BuildLog.fields = {
      createdOn: {
        isDate: true
      },
      lastChangedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildMetric.fields = {
      date: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildOptionDefinition.fields = {
      inputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOptionInputDefinition
      }
    };
    exports.TypeInfo.BuildOptionInputDefinition.fields = {
      type: {
        enumType: exports.TypeInfo.BuildOptionInputType
      }
    };
    exports.TypeInfo.BuildProcessTemplate.fields = {
      supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
      },
      templateType: {
        enumType: exports.TypeInfo.ProcessTemplateType
      }
    };
    exports.TypeInfo.BuildQueuedEvent.fields = {
      build: {
        typeInfo: exports.TypeInfo.Build
      }
    };
    exports.TypeInfo.BuildReference.fields = {
      finishTime: {
        isDate: true
      },
      queueTime: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.BuildResult
      },
      startTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.BuildStatus
      }
    };
    exports.TypeInfo.BuildRequestValidationResult.fields = {
      result: {
        enumType: exports.TypeInfo.ValidationResult
      }
    };
    exports.TypeInfo.BuildRetentionHistory.fields = {
      buildRetentionSamples: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildRetentionSample
      }
    };
    exports.TypeInfo.BuildRetentionSample.fields = {
      sampleTime: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildServer.fields = {
      status: {
        enumType: exports.TypeInfo.ServiceHostStatus
      },
      statusChangedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildSummary.fields = {
      finishTime: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.BuildReason
      },
      startTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.BuildStatus
      }
    };
    exports.TypeInfo.BuildTagsAddedEvent.fields = {
      build: {
        typeInfo: exports.TypeInfo.Build
      }
    };
    exports.TypeInfo.BuildTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.BuildUpdatedEvent.fields = {
      build: {
        typeInfo: exports.TypeInfo.Build
      }
    };
    exports.TypeInfo.Change.fields = {
      timestamp: {
        isDate: true
      }
    };
    exports.TypeInfo.ContinuousDeploymentDefinition.fields = {
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.ContinuousIntegrationTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.DefinitionReference.fields = {
      createdDate: {
        isDate: true
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
    exports.TypeInfo.DesignerProcess.fields = {
      phases: {
        isArray: true,
        typeInfo: exports.TypeInfo.Phase
      }
    };
    exports.TypeInfo.Folder.fields = {
      createdOn: {
        isDate: true
      },
      lastChangedDate: {
        isDate: true
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GatedCheckInTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.InformationNode.fields = {
      lastModifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.Issue.fields = {
      type: {
        enumType: exports.TypeInfo.IssueType
      }
    };
    exports.TypeInfo.Phase.fields = {
      jobAuthorizationScope: {
        enumType: exports.TypeInfo.BuildAuthorizationScope
      }
    };
    exports.TypeInfo.PullRequestTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.RepositoryWebhook.fields = {
      types: {
        isArray: true,
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.RetentionLease.fields = {
      createdOn: {
        isDate: true
      },
      validUntil: {
        isDate: true
      }
    };
    exports.TypeInfo.Schedule.fields = {
      daysToBuild: {
        enumType: exports.TypeInfo.ScheduleDays
      }
    };
    exports.TypeInfo.ScheduleTrigger.fields = {
      schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.Schedule
      },
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.SourceProviderAttributes.fields = {
      supportedTriggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.SupportedTrigger
      }
    };
    exports.TypeInfo.SupportedTrigger.fields = {
      supportedCapabilities: {
        isDictionary: true,
        dictionaryValueEnumType: exports.TypeInfo.SupportLevel
      },
      type: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      }
    };
    exports.TypeInfo.Timeline.fields = {
      lastChangedOn: {
        isDate: true
      },
      records: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
      }
    };
    exports.TypeInfo.TimelineRecord.fields = {
      finishTime: {
        isDate: true
      },
      issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
      },
      lastModified: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TimelineRecordState
      }
    };
    exports.TypeInfo.TimelineRecordsUpdatedEvent.fields = {
      timelineRecords: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
      }
    };
    exports.TypeInfo.UpdateStageParameters.fields = {
      state: {
        enumType: exports.TypeInfo.StageUpdateType
      }
    };
    exports.TypeInfo.WorkspaceMapping.fields = {
      mappingType: {
        enumType: exports.TypeInfo.WorkspaceMappingType
      }
    };
    exports.TypeInfo.WorkspaceTemplate.fields = {
      lastModifiedDate: {
        isDate: true
      },
      mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkspaceMapping
      }
    };
    exports.TypeInfo.XamlBuildDefinition.fields = {
      controller: {
        typeInfo: exports.TypeInfo.BuildController
      },
      createdDate: {
        isDate: true
      },
      createdOn: {
        isDate: true
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      },
      queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
      },
      supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
      },
      triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
      },
      type: {
        enumType: exports.TypeInfo.DefinitionType
      }
    };
  }
});

// node_modules/azure-devops-node-api/BuildApi.js
var require_BuildApi = __commonJS({
  "node_modules/azure-devops-node-api/BuildApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var BuildInterfaces = require_BuildInterfaces();
    var BuildApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Build-api", options);
      }
      createArtifact(artifact, project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.5", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, artifact, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifact(project, buildId, artifactName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactName == null) {
            throw new TypeError("artifactName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              artifactName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.5", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifactContentZip(project, buildId, artifactName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactName == null) {
            throw new TypeError("artifactName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              artifactName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.5", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifacts(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.5", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFile(project, buildId, artifactName, fileId, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactName == null) {
            throw new TypeError("artifactName can not be null or undefined");
          }
          if (fileId == null) {
            throw new TypeError("fileId can not be null or undefined");
          }
          if (fileName == null) {
            throw new TypeError("fileName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              artifactName,
              fileId,
              fileName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.5", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachments(project, buildId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "f2192269-89fa-4f94-baf6-8fb128c55159", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachment(project, buildId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              timelineId,
              recordId,
              type,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "af5122d3-3438-485e-a25a-2dbbfde84ee6", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      authorizeProjectResources(resources, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "398c85bc-81aa-4822-947c-a194a05f0fef", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, resources, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectResources(project, type, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              type,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "398c85bc-81aa-4822-947c-a194a05f0fef", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBadge(project, definitionId, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "de6a4df8-22cd-44ee-af2d-39f6aa7a4261", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listBranches(project, providerName, serviceEndpointId, repository, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository,
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "e05d4403-9b81-4244-8763-20fde28d1976", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildBadge(project, repoType, repoId, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repoType
            };
            let queryValues = {
              repoId,
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "21b3b9ce-fad5-4567-9ad0-80679794e003", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildBadgeData(project, repoType, repoId, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repoType
            };
            let queryValues = {
              repoId,
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "21b3b9ce-fad5-4567-9ad0-80679794e003", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionLeasesForBuild(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "3da19a6a-f088-45c4-83ce-2ad3a87be6c4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteBuild(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuild(project, buildId, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              propertyFilters
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuilds(project, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              definitions: definitions && definitions.join(","),
              queues: queues && queues.join(","),
              buildNumber,
              minTime,
              maxTime,
              requestedFor,
              reasonFilter,
              statusFilter,
              resultFilter,
              tagFilters: tagFilters && tagFilters.join(","),
              properties: properties && properties.join(","),
              "$top": top,
              continuationToken,
              maxBuildsPerDefinition,
              deletedFilter,
              queryOrder,
              branchName,
              buildIds: buildIds && buildIds.join(","),
              repositoryId,
              repositoryType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueBuild(build, project, ignoreWarnings, checkInTicket, sourceBuildId, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ignoreWarnings,
              checkInTicket,
              sourceBuildId,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, build, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuild(build, project, buildId, retry) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              retry
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, build, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuilds(builds, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, builds, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildChanges(project, buildId, continuationToken, top, includeSourceChange) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              continuationToken,
              "$top": top,
              includeSourceChange
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "54572c7b-bbd3-45d4-80dc-28be08941620", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChangesBetweenBuilds(project, fromBuildId, toBuildId, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fromBuildId,
              toBuildId,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "f10f0ea5-18a1-43ec-a8fb-2042c7be9b43", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildController(controllerId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              controllerId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "fcac1932-2ee1-437f-9b6f-7f696be858f6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildControllers(name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "fcac1932-2ee1-437f-9b6f-7f696be858f6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createDefinition(definition, project, definitionToCloneId, definitionToCloneRevision) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              definitionToCloneId,
              definitionToCloneRevision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, definition, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDefinition(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinition(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              revision,
              minMetricsTime,
              propertyFilters: propertyFilters && propertyFilters.join(","),
              includeLatestBuilds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitions(project, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              name,
              repositoryId,
              repositoryType,
              queryOrder,
              "$top": top,
              continuationToken,
              minMetricsTime,
              definitionIds: definitionIds && definitionIds.join(","),
              path,
              builtAfter,
              notBuiltAfter,
              includeAllProperties,
              includeLatestBuilds,
              taskIdFilter,
              processType,
              yamlFilename
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionReference, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      restoreDefinition(project, definitionId, deleted) {
        return __awaiter(this, void 0, void 0, function* () {
          if (deleted == null) {
            throw new TypeError("deleted can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              deleted
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDefinition(definition, project, definitionId, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              secretsSourceDefinitionId,
              secretsSourceDefinitionRevision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, definition, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFileContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository,
              commitOrBranch,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "29d12225-b1d9-425f-b668-6c594a981313", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createFolder(folder, project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "a906531b-d2da-4f55-bda7-f3e676cc50d9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, folder, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteFolder(project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "a906531b-d2da-4f55-bda7-f3e676cc50d9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFolders(project, path, queryOrder) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              path
            };
            let queryValues = {
              queryOrder
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "a906531b-d2da-4f55-bda7-f3e676cc50d9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateFolder(folder, project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "a906531b-d2da-4f55-bda7-f3e676cc50d9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, folder, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildGeneralSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "c4aefd19-30ff-405b-80ad-aca021e7242a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuildGeneralSettings(newSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "c4aefd19-30ff-405b-80ad-aca021e7242a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, newSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionHistory(daysToLookback) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              daysToLookback
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "1a9c48be-0ef5-4ec2-b94f-f053bdd2d3bf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildRetentionHistory, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLatestBuild(project, definition, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definition
            };
            let queryValues = {
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "54481611-01f4-47f3-998f-160da0f0c229", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addRetentionLeases(newLeases, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, newLeases, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRetentionLeasesById(project, ids) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ids: ids && ids.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionLease(project, leaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              leaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionLeasesByMinimalRetentionLeases(project, leasesToFetch) {
        return __awaiter(this, void 0, void 0, function* () {
          if (leasesToFetch == null) {
            throw new TypeError("leasesToFetch can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              leasesToFetch: leasesToFetch && leasesToFetch.join("|")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionLeasesByOwnerId(project, ownerId, definitionId, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ownerId,
              definitionId,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionLeasesByUserId(project, userOwnerId, definitionId, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (userOwnerId == null) {
            throw new TypeError("userOwnerId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              userOwnerId,
              definitionId,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRetentionLease(leaseUpdate, project, leaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              leaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "272051e4-9af1-45b5-ae22-8d960a5539d4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, leaseUpdate, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildLog(project, buildId, logId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              logId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildLogLines(project, buildId, logId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              logId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildLogs(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildLog, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildLogsZip(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildLogZip(project, buildId, logId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              logId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectMetrics(project, metricAggregationType, minMetricsTime) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              metricAggregationType
            };
            let queryValues = {
              minMetricsTime
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "7433fae7-a6bc-41dc-a6e2-eef9005ce41a", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionMetrics(project, definitionId, minMetricsTime) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              minMetricsTime
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "d973b939-0ce0-4fec-91d8-da3940fa1827", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildOptionDefinitions(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "591cb5a4-2d46-4f3a-a697-5cd42b6bd332", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildOptionDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPathContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository,
              commitOrBranch,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "7944d6fb-df01-4709-920a-7a189aa34037", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildProperties(project, buildId, filter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              filter: filter && filter.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "0a6312e9-0627-49b7-8083-7d74a64849c9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuildProperties(customHeaders, document, project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "0a6312e9-0627-49b7-8083-7d74a64849c9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, document, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionProperties(project, definitionId, filter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              filter: filter && filter.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "d9826ad7-2a68-46a9-a6e9-677698777895", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDefinitionProperties(customHeaders, document, project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "d9826ad7-2a68-46a9-a6e9-677698777895", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, document, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequest(project, providerName, pullRequestId, repositoryId, serviceEndpointId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName,
              pullRequestId
            };
            let queryValues = {
              repositoryId,
              serviceEndpointId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "d8763ec7-9ff0-4fb4-b2b2-9d757906ff14", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildReport(project, buildId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "45bcaa88-67e1-4042-a035-56d3b4a7d44c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildReportHtmlContent(project, buildId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "45bcaa88-67e1-4042-a035-56d3b4a7d44c", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/html", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listRepositories(project, providerName, serviceEndpointId, repository, resultSet, pageResults, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository,
              resultSet,
              pageResults,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "d44d1680-f978-4834-9b93-8c6e132329c9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      authorizeDefinitionResources(resources, project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "ea623316-1967-45eb-89ab-e9e6110cf2d6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, resources, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionResources(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "ea623316-1967-45eb-89ab-e9e6110cf2d6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceUsage() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "3813d06c-9e36-4ea1-aac3-61a485d60e3d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRetentionSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "dadb46e7-5851-4c72-820e-ae8abb82f59f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRetentionSettings(updateModel, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "dadb46e7-5851-4c72-820e-ae8abb82f59f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionRevisions(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "7c116775-52e5-453e-8c5d-914d9762d8c4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionRevision, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuildSettings(settings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, settings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listSourceProviders(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "3ce81729-954f-423d-a581-9fea01d25186", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.SourceProviderAttributes, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateStage(updateParameters, buildId, stageRefName, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              stageRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "b8aac6c9-744b-46e1-88fc-3550969f9313", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStatusBadge(project, definition, branchName, stageName, jobName, configuration, label) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definition
            };
            let queryValues = {
              branchName,
              stageName,
              jobName,
              configuration,
              label
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "07acfdce-4757-4439-b422-ddd13a2fcc10", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addBuildTag(project, buildId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addBuildTags(tags, project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, tags, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteBuildTag(project, buildId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildTags(project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBuildTags(updateParameters, project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDefinitionTag(project, definitionId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "cb894432-134a-4d31-a839-83beceaace4b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDefinitionTags(tags, project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "cb894432-134a-4d31-a839-83beceaace4b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, tags, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDefinitionTag(project, definitionId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "cb894432-134a-4d31-a839-83beceaace4b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionTags(project, definitionId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              revision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "cb894432-134a-4d31-a839-83beceaace4b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDefinitionTags(updateParameters, project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "cb894432-134a-4d31-a839-83beceaace4b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTag(project, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "d84ac5c6-edc7-43d5-adc9-1b34be5dea09", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTags(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "d84ac5c6-edc7-43d5-adc9-1b34be5dea09", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTemplates(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      saveTemplate(template, project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, template, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildTimeline(project, buildId, timelineId, changeId, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId,
              timelineId
            };
            let queryValues = {
              changeId,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "8baac422-4c6e-4de5-8532-db96d92acffa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Timeline, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      restoreWebhooks(triggerTypes, project, providerName, serviceEndpointId, repository) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "793bceb8-9736-4030-bd2f-fb3ce6d6b478", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, triggerTypes, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listWebhooks(project, providerName, serviceEndpointId, repository) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              providerName
            };
            let queryValues = {
              serviceEndpointId,
              repository
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "8f20ff82-9498-4812-9f6e-9c01bdc50e99", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RepositoryWebhook, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildWorkItemsRefs(project, buildId, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "5a21f5d2-5642-47e4-a0bd-1356e6731bee", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildWorkItemsRefsFromCommits(commitIds, project, buildId, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "5a21f5d2-5642-47e4-a0bd-1356e6731bee", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, commitIds, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemsBetweenBuilds(project, fromBuildId, toBuildId, top) {
        return __awaiter(this, void 0, void 0, function* () {
          if (fromBuildId == null) {
            throw new TypeError("fromBuildId can not be null or undefined");
          }
          if (toBuildId == null) {
            throw new TypeError("toBuildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fromBuildId,
              toBuildId,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "build", "52ba8915-5518-42e3-a4bb-b0182d159e2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionYaml(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              revision,
              minMetricsTime,
              propertyFilters: propertyFilters && propertyFilters.join(","),
              includeLatestBuilds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "build", "7c3df3a1-7e51-4150-8cf7-540347f8697f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    BuildApi.RESOURCE_AREA_ID = "965220d5-5bb9-42cf-8d67-9b146df2a5a4";
    exports.BuildApi = BuildApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/common/OperationsInterfaces.js
var require_OperationsInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/common/OperationsInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationStatus;
    (function(OperationStatus2) {
      OperationStatus2[OperationStatus2["NotSet"] = 0] = "NotSet";
      OperationStatus2[OperationStatus2["Queued"] = 1] = "Queued";
      OperationStatus2[OperationStatus2["InProgress"] = 2] = "InProgress";
      OperationStatus2[OperationStatus2["Cancelled"] = 3] = "Cancelled";
      OperationStatus2[OperationStatus2["Succeeded"] = 4] = "Succeeded";
      OperationStatus2[OperationStatus2["Failed"] = 5] = "Failed";
    })(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));
    exports.TypeInfo = {
      OperationReference: {
        fields: null
      },
      OperationStatus: {
        enumValues: {
          "notSet": 0,
          "queued": 1,
          "inProgress": 2,
          "cancelled": 3,
          "succeeded": 4,
          "failed": 5
        }
      }
    };
    exports.TypeInfo.OperationReference.fields = {
      status: {
        enumType: exports.TypeInfo.OperationStatus
      }
    };
  }
});

// node_modules/azure-devops-node-api/CoreApi.js
var require_CoreApi = __commonJS({
  "node_modules/azure-devops-node-api/CoreApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var CoreInterfaces = require_CoreInterfaces();
    var OperationsInterfaces = require_OperationsInterfaces();
    var CoreApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Core-api", options);
      }
      removeProjectAvatar(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "54b2a2a0-859b-4d05-827c-ec4c862f641a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setProjectAvatar(avatarBlob, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "54b2a2a0-859b-4d05-827c-ec4c862f641a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, avatarBlob, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createConnectedService(connectedServiceCreationData, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, connectedServiceCreationData, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getConnectedServiceDetails(projectId, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedServiceDetails, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getConnectedServices(projectId, kind) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            let queryValues = {
              kind
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createIdentityMru(mruData, mruName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              mruName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, mruData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteIdentityMru(mruData, mruName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              mruName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getIdentityMru(mruName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              mruName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateIdentityMru(mruData, mruName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              mruName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, mruData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamMembersWithExtendedProperties(projectId, teamId, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              teamId
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "294c494c-2600-4d7e-b76c-3dd50c3c95be", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessById(processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "93878975-88c5-4e6a-8abb-7ddd77a8a7d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcesses() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "93878975-88c5-4e6a-8abb-7ddd77a8a7d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectCollection(collectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              collectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "8031090f-ef1d-4af6-85fc-698cd75d42bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectCollection, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectCollections(top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "8031090f-ef1d-4af6-85fc-698cd75d42bf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectHistoryEntries(minRevision) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              minRevision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "6488a877-4749-4954-82ea-7340d36be9f2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.ProjectInfo, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProject(projectId, includeCapabilities, includeHistory) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            let queryValues = {
              includeCapabilities,
              includeHistory
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProject, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjects(stateFilter, top, skip, continuationToken, getDefaultTeamImageUrl) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              stateFilter,
              "$top": top,
              "$skip": skip,
              continuationToken,
              getDefaultTeamImageUrl
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectReference, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueCreateProject(projectToCreate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, projectToCreate, options);
              let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueDeleteProject(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateProject(projectUpdate, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, projectUpdate, options);
              let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectsProperties(projectIds, properties) {
        return __awaiter(this, void 0, void 0, function* () {
          if (projectIds == null) {
            throw new TypeError("projectIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              projectIds: projectIds && projectIds.join(","),
              properties: properties && properties.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "0a3ffdfc-fe94-47a6-bb27-79bf3f762eac", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectProperties(projectId, keys) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            let queryValues = {
              keys: keys && keys.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "4976a71a-4487-49aa-8aab-a1eda469037a", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setProjectProperties(customHeaders, projectId, patchDocument) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "core", "4976a71a-4487-49aa-8aab-a1eda469037a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, patchDocument, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createOrUpdateProxy(proxy) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "ec1f4311-f2b4-4c15-b2b8-8990b80d2908", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, proxy, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteProxy(proxyUrl, site) {
        return __awaiter(this, void 0, void 0, function* () {
          if (proxyUrl == null) {
            throw new TypeError("proxyUrl can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              proxyUrl,
              site
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "ec1f4311-f2b4-4c15-b2b8-8990b80d2908", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProxies(proxyUrl) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              proxyUrl
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "core", "ec1f4311-f2b4-4c15-b2b8-8990b80d2908", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAllTeams(mine, top, skip, expandIdentity) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              "$mine": mine,
              "$top": top,
              "$skip": skip,
              "$expandIdentity": expandIdentity
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "7a4d9ee9-3433-4347-b47a-7a80f1cf307e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTeam(team, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, team, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTeam(projectId, teamId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              teamId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeam(projectId, teamId, expandIdentity) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              teamId
            };
            let queryValues = {
              "$expandIdentity": expandIdentity
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeams(projectId, mine, top, skip, expandIdentity) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId
            };
            let queryValues = {
              "$mine": mine,
              "$top": top,
              "$skip": skip,
              "$expandIdentity": expandIdentity
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTeam(teamData, projectId, teamId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              teamId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, teamData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    CoreApi.RESOURCE_AREA_ID = "79134c72-4a58-4b42-976c-04e7115f32bf";
    exports.CoreApi = CoreApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/DashboardInterfaces.js
var require_DashboardInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/DashboardInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DashboardScope;
    (function(DashboardScope2) {
      DashboardScope2[DashboardScope2["Collection_User"] = 0] = "Collection_User";
      DashboardScope2[DashboardScope2["Project_Team"] = 1] = "Project_Team";
      DashboardScope2[DashboardScope2["Project"] = 2] = "Project";
    })(DashboardScope = exports.DashboardScope || (exports.DashboardScope = {}));
    var GroupMemberPermission;
    (function(GroupMemberPermission2) {
      GroupMemberPermission2[GroupMemberPermission2["None"] = 0] = "None";
      GroupMemberPermission2[GroupMemberPermission2["Edit"] = 1] = "Edit";
      GroupMemberPermission2[GroupMemberPermission2["Manage"] = 2] = "Manage";
      GroupMemberPermission2[GroupMemberPermission2["ManagePermissions"] = 3] = "ManagePermissions";
    })(GroupMemberPermission = exports.GroupMemberPermission || (exports.GroupMemberPermission = {}));
    var TeamDashboardPermission;
    (function(TeamDashboardPermission2) {
      TeamDashboardPermission2[TeamDashboardPermission2["None"] = 0] = "None";
      TeamDashboardPermission2[TeamDashboardPermission2["Read"] = 1] = "Read";
      TeamDashboardPermission2[TeamDashboardPermission2["Create"] = 2] = "Create";
      TeamDashboardPermission2[TeamDashboardPermission2["Edit"] = 4] = "Edit";
      TeamDashboardPermission2[TeamDashboardPermission2["Delete"] = 8] = "Delete";
      TeamDashboardPermission2[TeamDashboardPermission2["ManagePermissions"] = 16] = "ManagePermissions";
    })(TeamDashboardPermission = exports.TeamDashboardPermission || (exports.TeamDashboardPermission = {}));
    var WidgetScope;
    (function(WidgetScope2) {
      WidgetScope2[WidgetScope2["Collection_User"] = 0] = "Collection_User";
      WidgetScope2[WidgetScope2["Project_Team"] = 1] = "Project_Team";
    })(WidgetScope = exports.WidgetScope || (exports.WidgetScope = {}));
    exports.TypeInfo = {
      CopyDashboardOptions: {},
      CopyDashboardResponse: {},
      Dashboard: {},
      DashboardGroup: {},
      DashboardGroupEntry: {},
      DashboardGroupEntryResponse: {},
      DashboardResponse: {},
      DashboardScope: {
        enumValues: {
          "collection_User": 0,
          "project_Team": 1,
          "project": 2
        }
      },
      GroupMemberPermission: {
        enumValues: {
          "none": 0,
          "edit": 1,
          "manage": 2,
          "managePermissions": 3
        }
      },
      TeamDashboardPermission: {
        enumValues: {
          "none": 0,
          "read": 1,
          "create": 2,
          "edit": 4,
          "delete": 8,
          "managePermissions": 16
        }
      },
      Widget: {},
      WidgetMetadata: {},
      WidgetMetadataResponse: {},
      WidgetResponse: {},
      WidgetScope: {
        enumValues: {
          "collection_User": 0,
          "project_Team": 1
        }
      },
      WidgetsVersionedList: {},
      WidgetTypesResponse: {}
    };
    exports.TypeInfo.CopyDashboardOptions.fields = {
      copyDashboardScope: {
        enumType: exports.TypeInfo.DashboardScope
      }
    };
    exports.TypeInfo.CopyDashboardResponse.fields = {
      copiedDashboard: {
        typeInfo: exports.TypeInfo.Dashboard
      },
      copyDashboardOptions: {
        typeInfo: exports.TypeInfo.CopyDashboardOptions
      }
    };
    exports.TypeInfo.Dashboard.fields = {
      dashboardScope: {
        enumType: exports.TypeInfo.DashboardScope
      },
      widgets: {
        isArray: true,
        typeInfo: exports.TypeInfo.Widget
      }
    };
    exports.TypeInfo.DashboardGroup.fields = {
      dashboardEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.DashboardGroupEntry
      },
      permission: {
        enumType: exports.TypeInfo.GroupMemberPermission
      },
      teamDashboardPermission: {
        enumType: exports.TypeInfo.TeamDashboardPermission
      }
    };
    exports.TypeInfo.DashboardGroupEntry.fields = {
      dashboardScope: {
        enumType: exports.TypeInfo.DashboardScope
      },
      widgets: {
        isArray: true,
        typeInfo: exports.TypeInfo.Widget
      }
    };
    exports.TypeInfo.DashboardGroupEntryResponse.fields = {
      dashboardScope: {
        enumType: exports.TypeInfo.DashboardScope
      },
      widgets: {
        isArray: true,
        typeInfo: exports.TypeInfo.Widget
      }
    };
    exports.TypeInfo.DashboardResponse.fields = {
      dashboardScope: {
        enumType: exports.TypeInfo.DashboardScope
      },
      widgets: {
        isArray: true,
        typeInfo: exports.TypeInfo.Widget
      }
    };
    exports.TypeInfo.Widget.fields = {
      dashboard: {
        typeInfo: exports.TypeInfo.Dashboard
      }
    };
    exports.TypeInfo.WidgetMetadata.fields = {
      supportedScopes: {
        isArray: true,
        enumType: exports.TypeInfo.WidgetScope
      }
    };
    exports.TypeInfo.WidgetMetadataResponse.fields = {
      widgetMetadata: {
        typeInfo: exports.TypeInfo.WidgetMetadata
      }
    };
    exports.TypeInfo.WidgetResponse.fields = {
      dashboard: {
        typeInfo: exports.TypeInfo.Dashboard
      }
    };
    exports.TypeInfo.WidgetsVersionedList.fields = {
      widgets: {
        isArray: true,
        typeInfo: exports.TypeInfo.Widget
      }
    };
    exports.TypeInfo.WidgetTypesResponse.fields = {
      widgetTypes: {
        isArray: true,
        typeInfo: exports.TypeInfo.WidgetMetadata
      }
    };
  }
});

// node_modules/azure-devops-node-api/DashboardApi.js
var require_DashboardApi = __commonJS({
  "node_modules/azure-devops-node-api/DashboardApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var DashboardInterfaces = require_DashboardInterfaces();
    var DashboardApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Dashboard-api", options);
      }
      createDashboard(dashboard, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, dashboard, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDashboard(teamContext, dashboardId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDashboard(teamContext, dashboardId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDashboardsByProject(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceDashboard(dashboard, teamContext, dashboardId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, dashboard, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceDashboards(group, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Dashboard", "454b3e51-2e6e-48d4-ad81-978154089351", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, group, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.DashboardGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createWidget(widget, teamContext, dashboardId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Dashboard", "bdcff53a-8355-4172-a00a-40497ea23afc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, widget, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteWidget(teamContext, dashboardId, widgetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId,
              widgetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Dashboard", "bdcff53a-8355-4172-a00a-40497ea23afc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWidget(teamContext, dashboardId, widgetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId,
              widgetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Dashboard", "bdcff53a-8355-4172-a00a-40497ea23afc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceWidget(widget, teamContext, dashboardId, widgetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId,
              widgetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Dashboard", "bdcff53a-8355-4172-a00a-40497ea23afc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, widget, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWidget(widget, teamContext, dashboardId, widgetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              dashboardId,
              widgetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Dashboard", "bdcff53a-8355-4172-a00a-40497ea23afc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, widget, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWidgetMetadata(contributionId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              contributionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Dashboard", "6b3628d3-e96f-4fc7-b176-50240b03b515", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetMetadataResponse, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWidgetTypes(scope, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (scope == null) {
            throw new TypeError("scope can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$scope": scope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Dashboard", "6b3628d3-e96f-4fc7-b176-50240b03b515", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetTypesResponse, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    DashboardApi.RESOURCE_AREA_ID = "31c84e0a-3ece-48fd-a29d-100849af99ba";
    exports.DashboardApi = DashboardApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/GalleryInterfaces.js
var require_GalleryInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/GalleryInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AcquisitionAssignmentType;
    (function(AcquisitionAssignmentType2) {
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["None"] = 0] = "None";
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["Me"] = 1] = "Me";
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["All"] = 2] = "All";
    })(AcquisitionAssignmentType = exports.AcquisitionAssignmentType || (exports.AcquisitionAssignmentType = {}));
    var AcquisitionOperationState;
    (function(AcquisitionOperationState2) {
      AcquisitionOperationState2[AcquisitionOperationState2["Disallow"] = 0] = "Disallow";
      AcquisitionOperationState2[AcquisitionOperationState2["Allow"] = 1] = "Allow";
      AcquisitionOperationState2[AcquisitionOperationState2["Completed"] = 3] = "Completed";
    })(AcquisitionOperationState = exports.AcquisitionOperationState || (exports.AcquisitionOperationState = {}));
    var AcquisitionOperationType;
    (function(AcquisitionOperationType2) {
      AcquisitionOperationType2[AcquisitionOperationType2["Get"] = 0] = "Get";
      AcquisitionOperationType2[AcquisitionOperationType2["Install"] = 1] = "Install";
      AcquisitionOperationType2[AcquisitionOperationType2["Buy"] = 2] = "Buy";
      AcquisitionOperationType2[AcquisitionOperationType2["Try"] = 3] = "Try";
      AcquisitionOperationType2[AcquisitionOperationType2["Request"] = 4] = "Request";
      AcquisitionOperationType2[AcquisitionOperationType2["None"] = 5] = "None";
      AcquisitionOperationType2[AcquisitionOperationType2["PurchaseRequest"] = 6] = "PurchaseRequest";
    })(AcquisitionOperationType = exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));
    var ConcernCategory;
    (function(ConcernCategory2) {
      ConcernCategory2[ConcernCategory2["General"] = 1] = "General";
      ConcernCategory2[ConcernCategory2["Abusive"] = 2] = "Abusive";
      ConcernCategory2[ConcernCategory2["Spam"] = 4] = "Spam";
    })(ConcernCategory = exports.ConcernCategory || (exports.ConcernCategory = {}));
    var DraftPatchOperation;
    (function(DraftPatchOperation2) {
      DraftPatchOperation2[DraftPatchOperation2["Publish"] = 1] = "Publish";
      DraftPatchOperation2[DraftPatchOperation2["Cancel"] = 2] = "Cancel";
    })(DraftPatchOperation = exports.DraftPatchOperation || (exports.DraftPatchOperation = {}));
    var DraftStateType;
    (function(DraftStateType2) {
      DraftStateType2[DraftStateType2["Unpublished"] = 1] = "Unpublished";
      DraftStateType2[DraftStateType2["Published"] = 2] = "Published";
      DraftStateType2[DraftStateType2["Cancelled"] = 3] = "Cancelled";
      DraftStateType2[DraftStateType2["Error"] = 4] = "Error";
    })(DraftStateType = exports.DraftStateType || (exports.DraftStateType = {}));
    var ExtensionDeploymentTechnology;
    (function(ExtensionDeploymentTechnology2) {
      ExtensionDeploymentTechnology2[ExtensionDeploymentTechnology2["Exe"] = 1] = "Exe";
      ExtensionDeploymentTechnology2[ExtensionDeploymentTechnology2["Msi"] = 2] = "Msi";
      ExtensionDeploymentTechnology2[ExtensionDeploymentTechnology2["Vsix"] = 3] = "Vsix";
      ExtensionDeploymentTechnology2[ExtensionDeploymentTechnology2["ReferralLink"] = 4] = "ReferralLink";
    })(ExtensionDeploymentTechnology = exports.ExtensionDeploymentTechnology || (exports.ExtensionDeploymentTechnology = {}));
    var ExtensionLifecycleEventType;
    (function(ExtensionLifecycleEventType2) {
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Uninstall"] = 1] = "Uninstall";
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Install"] = 2] = "Install";
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Review"] = 3] = "Review";
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Acquisition"] = 4] = "Acquisition";
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Sales"] = 5] = "Sales";
      ExtensionLifecycleEventType2[ExtensionLifecycleEventType2["Other"] = 999] = "Other";
    })(ExtensionLifecycleEventType = exports.ExtensionLifecycleEventType || (exports.ExtensionLifecycleEventType = {}));
    var ExtensionPolicyFlags;
    (function(ExtensionPolicyFlags2) {
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["None"] = 0] = "None";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["Private"] = 1] = "Private";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["Public"] = 2] = "Public";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["Preview"] = 4] = "Preview";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["Released"] = 8] = "Released";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["FirstParty"] = 16] = "FirstParty";
      ExtensionPolicyFlags2[ExtensionPolicyFlags2["All"] = 31] = "All";
    })(ExtensionPolicyFlags = exports.ExtensionPolicyFlags || (exports.ExtensionPolicyFlags = {}));
    var ExtensionQueryFilterType;
    (function(ExtensionQueryFilterType2) {
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Tag"] = 1] = "Tag";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["DisplayName"] = 2] = "DisplayName";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Private"] = 3] = "Private";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Id"] = 4] = "Id";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Category"] = 5] = "Category";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["ContributionType"] = 6] = "ContributionType";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Name"] = 7] = "Name";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["InstallationTarget"] = 8] = "InstallationTarget";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Featured"] = 9] = "Featured";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["SearchText"] = 10] = "SearchText";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["FeaturedInCategory"] = 11] = "FeaturedInCategory";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["ExcludeWithFlags"] = 12] = "ExcludeWithFlags";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["IncludeWithFlags"] = 13] = "IncludeWithFlags";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["Lcid"] = 14] = "Lcid";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["InstallationTargetVersion"] = 15] = "InstallationTargetVersion";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["InstallationTargetVersionRange"] = 16] = "InstallationTargetVersionRange";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["VsixMetadata"] = 17] = "VsixMetadata";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["PublisherName"] = 18] = "PublisherName";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["PublisherDisplayName"] = 19] = "PublisherDisplayName";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["IncludeWithPublisherFlags"] = 20] = "IncludeWithPublisherFlags";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["OrganizationSharedWith"] = 21] = "OrganizationSharedWith";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["ProductArchitecture"] = 22] = "ProductArchitecture";
      ExtensionQueryFilterType2[ExtensionQueryFilterType2["TargetPlatform"] = 23] = "TargetPlatform";
    })(ExtensionQueryFilterType = exports.ExtensionQueryFilterType || (exports.ExtensionQueryFilterType = {}));
    var ExtensionQueryFlags;
    (function(ExtensionQueryFlags2) {
      ExtensionQueryFlags2[ExtensionQueryFlags2["None"] = 0] = "None";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeVersions"] = 1] = "IncludeVersions";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeFiles"] = 2] = "IncludeFiles";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeCategoryAndTags"] = 4] = "IncludeCategoryAndTags";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeSharedAccounts"] = 8] = "IncludeSharedAccounts";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeVersionProperties"] = 16] = "IncludeVersionProperties";
      ExtensionQueryFlags2[ExtensionQueryFlags2["ExcludeNonValidated"] = 32] = "ExcludeNonValidated";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeInstallationTargets"] = 64] = "IncludeInstallationTargets";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeAssetUri"] = 128] = "IncludeAssetUri";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeStatistics"] = 256] = "IncludeStatistics";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeLatestVersionOnly"] = 512] = "IncludeLatestVersionOnly";
      ExtensionQueryFlags2[ExtensionQueryFlags2["UseFallbackAssetUri"] = 1024] = "UseFallbackAssetUri";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeMetadata"] = 2048] = "IncludeMetadata";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeMinimalPayloadForVsIde"] = 4096] = "IncludeMinimalPayloadForVsIde";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeLcids"] = 8192] = "IncludeLcids";
      ExtensionQueryFlags2[ExtensionQueryFlags2["IncludeSharedOrganizations"] = 16384] = "IncludeSharedOrganizations";
      ExtensionQueryFlags2[ExtensionQueryFlags2["AllAttributes"] = 16863] = "AllAttributes";
    })(ExtensionQueryFlags = exports.ExtensionQueryFlags || (exports.ExtensionQueryFlags = {}));
    var ExtensionStatisticOperation;
    (function(ExtensionStatisticOperation2) {
      ExtensionStatisticOperation2[ExtensionStatisticOperation2["None"] = 0] = "None";
      ExtensionStatisticOperation2[ExtensionStatisticOperation2["Set"] = 1] = "Set";
      ExtensionStatisticOperation2[ExtensionStatisticOperation2["Increment"] = 2] = "Increment";
      ExtensionStatisticOperation2[ExtensionStatisticOperation2["Decrement"] = 3] = "Decrement";
      ExtensionStatisticOperation2[ExtensionStatisticOperation2["Delete"] = 4] = "Delete";
    })(ExtensionStatisticOperation = exports.ExtensionStatisticOperation || (exports.ExtensionStatisticOperation = {}));
    var ExtensionStatsAggregateType;
    (function(ExtensionStatsAggregateType2) {
      ExtensionStatsAggregateType2[ExtensionStatsAggregateType2["Daily"] = 1] = "Daily";
    })(ExtensionStatsAggregateType = exports.ExtensionStatsAggregateType || (exports.ExtensionStatsAggregateType = {}));
    var ExtensionVersionFlags;
    (function(ExtensionVersionFlags2) {
      ExtensionVersionFlags2[ExtensionVersionFlags2["None"] = 0] = "None";
      ExtensionVersionFlags2[ExtensionVersionFlags2["Validated"] = 1] = "Validated";
    })(ExtensionVersionFlags = exports.ExtensionVersionFlags || (exports.ExtensionVersionFlags = {}));
    var NotificationTemplateType;
    (function(NotificationTemplateType2) {
      NotificationTemplateType2[NotificationTemplateType2["ReviewNotification"] = 1] = "ReviewNotification";
      NotificationTemplateType2[NotificationTemplateType2["QnaNotification"] = 2] = "QnaNotification";
      NotificationTemplateType2[NotificationTemplateType2["CustomerContactNotification"] = 3] = "CustomerContactNotification";
      NotificationTemplateType2[NotificationTemplateType2["PublisherMemberUpdateNotification"] = 4] = "PublisherMemberUpdateNotification";
    })(NotificationTemplateType = exports.NotificationTemplateType || (exports.NotificationTemplateType = {}));
    var PagingDirection;
    (function(PagingDirection2) {
      PagingDirection2[PagingDirection2["Backward"] = 1] = "Backward";
      PagingDirection2[PagingDirection2["Forward"] = 2] = "Forward";
    })(PagingDirection = exports.PagingDirection || (exports.PagingDirection = {}));
    var PublishedExtensionFlags;
    (function(PublishedExtensionFlags2) {
      PublishedExtensionFlags2[PublishedExtensionFlags2["None"] = 0] = "None";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Disabled"] = 1] = "Disabled";
      PublishedExtensionFlags2[PublishedExtensionFlags2["BuiltIn"] = 2] = "BuiltIn";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Validated"] = 4] = "Validated";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Trusted"] = 8] = "Trusted";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Paid"] = 16] = "Paid";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Public"] = 256] = "Public";
      PublishedExtensionFlags2[PublishedExtensionFlags2["MultiVersion"] = 512] = "MultiVersion";
      PublishedExtensionFlags2[PublishedExtensionFlags2["System"] = 1024] = "System";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Preview"] = 2048] = "Preview";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Unpublished"] = 4096] = "Unpublished";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Trial"] = 8192] = "Trial";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Locked"] = 16384] = "Locked";
      PublishedExtensionFlags2[PublishedExtensionFlags2["Hidden"] = 32768] = "Hidden";
    })(PublishedExtensionFlags = exports.PublishedExtensionFlags || (exports.PublishedExtensionFlags = {}));
    var PublisherFlags;
    (function(PublisherFlags2) {
      PublisherFlags2[PublisherFlags2["UnChanged"] = 1073741824] = "UnChanged";
      PublisherFlags2[PublisherFlags2["None"] = 0] = "None";
      PublisherFlags2[PublisherFlags2["Disabled"] = 1] = "Disabled";
      PublisherFlags2[PublisherFlags2["Verified"] = 2] = "Verified";
      PublisherFlags2[PublisherFlags2["Certified"] = 4] = "Certified";
      PublisherFlags2[PublisherFlags2["ServiceFlags"] = 7] = "ServiceFlags";
    })(PublisherFlags = exports.PublisherFlags || (exports.PublisherFlags = {}));
    var PublisherPermissions;
    (function(PublisherPermissions2) {
      PublisherPermissions2[PublisherPermissions2["Read"] = 1] = "Read";
      PublisherPermissions2[PublisherPermissions2["UpdateExtension"] = 2] = "UpdateExtension";
      PublisherPermissions2[PublisherPermissions2["CreatePublisher"] = 4] = "CreatePublisher";
      PublisherPermissions2[PublisherPermissions2["PublishExtension"] = 8] = "PublishExtension";
      PublisherPermissions2[PublisherPermissions2["Admin"] = 16] = "Admin";
      PublisherPermissions2[PublisherPermissions2["TrustedPartner"] = 32] = "TrustedPartner";
      PublisherPermissions2[PublisherPermissions2["PrivateRead"] = 64] = "PrivateRead";
      PublisherPermissions2[PublisherPermissions2["DeleteExtension"] = 128] = "DeleteExtension";
      PublisherPermissions2[PublisherPermissions2["EditSettings"] = 256] = "EditSettings";
      PublisherPermissions2[PublisherPermissions2["ViewPermissions"] = 512] = "ViewPermissions";
      PublisherPermissions2[PublisherPermissions2["ManagePermissions"] = 1024] = "ManagePermissions";
      PublisherPermissions2[PublisherPermissions2["DeletePublisher"] = 2048] = "DeletePublisher";
    })(PublisherPermissions = exports.PublisherPermissions || (exports.PublisherPermissions = {}));
    var PublisherQueryFlags;
    (function(PublisherQueryFlags2) {
      PublisherQueryFlags2[PublisherQueryFlags2["None"] = 0] = "None";
      PublisherQueryFlags2[PublisherQueryFlags2["IncludeExtensions"] = 1] = "IncludeExtensions";
      PublisherQueryFlags2[PublisherQueryFlags2["IncludeEmailAddress"] = 2] = "IncludeEmailAddress";
    })(PublisherQueryFlags = exports.PublisherQueryFlags || (exports.PublisherQueryFlags = {}));
    var PublisherRoleAccess;
    (function(PublisherRoleAccess2) {
      PublisherRoleAccess2[PublisherRoleAccess2["Assigned"] = 1] = "Assigned";
      PublisherRoleAccess2[PublisherRoleAccess2["Inherited"] = 2] = "Inherited";
    })(PublisherRoleAccess = exports.PublisherRoleAccess || (exports.PublisherRoleAccess = {}));
    var PublisherState;
    (function(PublisherState2) {
      PublisherState2[PublisherState2["None"] = 0] = "None";
      PublisherState2[PublisherState2["VerificationPending"] = 1] = "VerificationPending";
      PublisherState2[PublisherState2["CertificationPending"] = 2] = "CertificationPending";
      PublisherState2[PublisherState2["CertificationRejected"] = 4] = "CertificationRejected";
      PublisherState2[PublisherState2["CertificationRevoked"] = 8] = "CertificationRevoked";
    })(PublisherState = exports.PublisherState || (exports.PublisherState = {}));
    var QnAItemStatus;
    (function(QnAItemStatus2) {
      QnAItemStatus2[QnAItemStatus2["None"] = 0] = "None";
      QnAItemStatus2[QnAItemStatus2["UserEditable"] = 1] = "UserEditable";
      QnAItemStatus2[QnAItemStatus2["PublisherCreated"] = 2] = "PublisherCreated";
    })(QnAItemStatus = exports.QnAItemStatus || (exports.QnAItemStatus = {}));
    var RestApiResponseStatus;
    (function(RestApiResponseStatus2) {
      RestApiResponseStatus2[RestApiResponseStatus2["Completed"] = 0] = "Completed";
      RestApiResponseStatus2[RestApiResponseStatus2["Failed"] = 1] = "Failed";
      RestApiResponseStatus2[RestApiResponseStatus2["Inprogress"] = 2] = "Inprogress";
      RestApiResponseStatus2[RestApiResponseStatus2["Skipped"] = 3] = "Skipped";
    })(RestApiResponseStatus = exports.RestApiResponseStatus || (exports.RestApiResponseStatus = {}));
    var ReviewEventOperation;
    (function(ReviewEventOperation2) {
      ReviewEventOperation2[ReviewEventOperation2["Create"] = 1] = "Create";
      ReviewEventOperation2[ReviewEventOperation2["Update"] = 2] = "Update";
      ReviewEventOperation2[ReviewEventOperation2["Delete"] = 3] = "Delete";
    })(ReviewEventOperation = exports.ReviewEventOperation || (exports.ReviewEventOperation = {}));
    var ReviewFilterOptions;
    (function(ReviewFilterOptions2) {
      ReviewFilterOptions2[ReviewFilterOptions2["None"] = 0] = "None";
      ReviewFilterOptions2[ReviewFilterOptions2["FilterEmptyReviews"] = 1] = "FilterEmptyReviews";
      ReviewFilterOptions2[ReviewFilterOptions2["FilterEmptyUserNames"] = 2] = "FilterEmptyUserNames";
    })(ReviewFilterOptions = exports.ReviewFilterOptions || (exports.ReviewFilterOptions = {}));
    var ReviewPatchOperation;
    (function(ReviewPatchOperation2) {
      ReviewPatchOperation2[ReviewPatchOperation2["FlagReview"] = 1] = "FlagReview";
      ReviewPatchOperation2[ReviewPatchOperation2["UpdateReview"] = 2] = "UpdateReview";
      ReviewPatchOperation2[ReviewPatchOperation2["ReplyToReview"] = 3] = "ReplyToReview";
      ReviewPatchOperation2[ReviewPatchOperation2["AdminResponseForReview"] = 4] = "AdminResponseForReview";
      ReviewPatchOperation2[ReviewPatchOperation2["DeleteAdminReply"] = 5] = "DeleteAdminReply";
      ReviewPatchOperation2[ReviewPatchOperation2["DeletePublisherReply"] = 6] = "DeletePublisherReply";
    })(ReviewPatchOperation = exports.ReviewPatchOperation || (exports.ReviewPatchOperation = {}));
    var ReviewResourceType;
    (function(ReviewResourceType2) {
      ReviewResourceType2[ReviewResourceType2["Review"] = 1] = "Review";
      ReviewResourceType2[ReviewResourceType2["PublisherReply"] = 2] = "PublisherReply";
      ReviewResourceType2[ReviewResourceType2["AdminReply"] = 3] = "AdminReply";
    })(ReviewResourceType = exports.ReviewResourceType || (exports.ReviewResourceType = {}));
    var SortByType;
    (function(SortByType2) {
      SortByType2[SortByType2["Relevance"] = 0] = "Relevance";
      SortByType2[SortByType2["LastUpdatedDate"] = 1] = "LastUpdatedDate";
      SortByType2[SortByType2["Title"] = 2] = "Title";
      SortByType2[SortByType2["Publisher"] = 3] = "Publisher";
      SortByType2[SortByType2["InstallCount"] = 4] = "InstallCount";
      SortByType2[SortByType2["PublishedDate"] = 5] = "PublishedDate";
      SortByType2[SortByType2["AverageRating"] = 6] = "AverageRating";
      SortByType2[SortByType2["TrendingDaily"] = 7] = "TrendingDaily";
      SortByType2[SortByType2["TrendingWeekly"] = 8] = "TrendingWeekly";
      SortByType2[SortByType2["TrendingMonthly"] = 9] = "TrendingMonthly";
      SortByType2[SortByType2["ReleaseDate"] = 10] = "ReleaseDate";
      SortByType2[SortByType2["Author"] = 11] = "Author";
      SortByType2[SortByType2["WeightedRating"] = 12] = "WeightedRating";
    })(SortByType = exports.SortByType || (exports.SortByType = {}));
    var SortOrderType;
    (function(SortOrderType2) {
      SortOrderType2[SortOrderType2["Default"] = 0] = "Default";
      SortOrderType2[SortOrderType2["Ascending"] = 1] = "Ascending";
      SortOrderType2[SortOrderType2["Descending"] = 2] = "Descending";
    })(SortOrderType = exports.SortOrderType || (exports.SortOrderType = {}));
    var VSCodeWebExtensionStatisicsType;
    (function(VSCodeWebExtensionStatisicsType2) {
      VSCodeWebExtensionStatisicsType2[VSCodeWebExtensionStatisicsType2["Install"] = 1] = "Install";
      VSCodeWebExtensionStatisicsType2[VSCodeWebExtensionStatisicsType2["Update"] = 2] = "Update";
      VSCodeWebExtensionStatisicsType2[VSCodeWebExtensionStatisicsType2["Uninstall"] = 3] = "Uninstall";
    })(VSCodeWebExtensionStatisicsType = exports.VSCodeWebExtensionStatisicsType || (exports.VSCodeWebExtensionStatisicsType = {}));
    exports.TypeInfo = {
      AcquisitionAssignmentType: {
        enumValues: {
          "none": 0,
          "me": 1,
          "all": 2
        }
      },
      AcquisitionOperation: {},
      AcquisitionOperationState: {
        enumValues: {
          "disallow": 0,
          "allow": 1,
          "completed": 3
        }
      },
      AcquisitionOperationType: {
        enumValues: {
          "get": 0,
          "install": 1,
          "buy": 2,
          "try": 3,
          "request": 4,
          "none": 5,
          "purchaseRequest": 6
        }
      },
      AcquisitionOptions: {},
      AzureRestApiResponseModel: {},
      Concern: {},
      ConcernCategory: {
        enumValues: {
          "general": 1,
          "abusive": 2,
          "spam": 4
        }
      },
      CustomerLastContact: {},
      CustomerSupportRequest: {},
      DraftPatchOperation: {
        enumValues: {
          "publish": 1,
          "cancel": 2
        }
      },
      DraftStateType: {
        enumValues: {
          "unpublished": 1,
          "published": 2,
          "cancelled": 3,
          "error": 4
        }
      },
      ExtensionAcquisitionRequest: {},
      ExtensionDailyStat: {},
      ExtensionDailyStats: {},
      ExtensionDeploymentTechnology: {
        enumValues: {
          "exe": 1,
          "msi": 2,
          "vsix": 3,
          "referralLink": 4
        }
      },
      ExtensionDraft: {},
      ExtensionDraftPatch: {},
      ExtensionEvent: {},
      ExtensionEvents: {},
      ExtensionFilterResult: {},
      ExtensionLifecycleEventType: {
        enumValues: {
          "uninstall": 1,
          "install": 2,
          "review": 3,
          "acquisition": 4,
          "sales": 5,
          "other": 999
        }
      },
      ExtensionPayload: {},
      ExtensionPolicy: {},
      ExtensionPolicyFlags: {
        enumValues: {
          "none": 0,
          "private": 1,
          "public": 2,
          "preview": 4,
          "released": 8,
          "firstParty": 16,
          "all": 31
        }
      },
      ExtensionQuery: {},
      ExtensionQueryFilterType: {
        enumValues: {
          "tag": 1,
          "displayName": 2,
          "private": 3,
          "id": 4,
          "category": 5,
          "contributionType": 6,
          "name": 7,
          "installationTarget": 8,
          "featured": 9,
          "searchText": 10,
          "featuredInCategory": 11,
          "excludeWithFlags": 12,
          "includeWithFlags": 13,
          "lcid": 14,
          "installationTargetVersion": 15,
          "installationTargetVersionRange": 16,
          "vsixMetadata": 17,
          "publisherName": 18,
          "publisherDisplayName": 19,
          "includeWithPublisherFlags": 20,
          "organizationSharedWith": 21,
          "productArchitecture": 22,
          "targetPlatform": 23
        }
      },
      ExtensionQueryFlags: {
        enumValues: {
          "none": 0,
          "includeVersions": 1,
          "includeFiles": 2,
          "includeCategoryAndTags": 4,
          "includeSharedAccounts": 8,
          "includeVersionProperties": 16,
          "excludeNonValidated": 32,
          "includeInstallationTargets": 64,
          "includeAssetUri": 128,
          "includeStatistics": 256,
          "includeLatestVersionOnly": 512,
          "useFallbackAssetUri": 1024,
          "includeMetadata": 2048,
          "includeMinimalPayloadForVsIde": 4096,
          "includeLcids": 8192,
          "includeSharedOrganizations": 16384,
          "allAttributes": 16863
        }
      },
      ExtensionQueryResult: {},
      ExtensionStatisticOperation: {
        enumValues: {
          "none": 0,
          "set": 1,
          "increment": 2,
          "decrement": 3,
          "delete": 4
        }
      },
      ExtensionStatisticUpdate: {},
      ExtensionStatsAggregateType: {
        enumValues: {
          "daily": 1
        }
      },
      ExtensionVersion: {},
      ExtensionVersionFlags: {
        enumValues: {
          "none": 0,
          "validated": 1
        }
      },
      NotificationsData: {},
      NotificationTemplateType: {
        enumValues: {
          "reviewNotification": 1,
          "qnaNotification": 2,
          "customerContactNotification": 3,
          "publisherMemberUpdateNotification": 4
        }
      },
      PagingDirection: {
        enumValues: {
          "backward": 1,
          "forward": 2
        }
      },
      PublishedExtension: {},
      PublishedExtensionFlags: {
        enumValues: {
          "none": 0,
          "disabled": 1,
          "builtIn": 2,
          "validated": 4,
          "trusted": 8,
          "paid": 16,
          "public": 256,
          "multiVersion": 512,
          "system": 1024,
          "preview": 2048,
          "unpublished": 4096,
          "trial": 8192,
          "locked": 16384,
          "hidden": 32768
        }
      },
      Publisher: {},
      PublisherBase: {},
      PublisherFacts: {},
      PublisherFilterResult: {},
      PublisherFlags: {
        enumValues: {
          "unChanged": 1073741824,
          "none": 0,
          "disabled": 1,
          "verified": 2,
          "certified": 4,
          "serviceFlags": 7
        }
      },
      PublisherPermissions: {
        enumValues: {
          "read": 1,
          "updateExtension": 2,
          "createPublisher": 4,
          "publishExtension": 8,
          "admin": 16,
          "trustedPartner": 32,
          "privateRead": 64,
          "deleteExtension": 128,
          "editSettings": 256,
          "viewPermissions": 512,
          "managePermissions": 1024,
          "deletePublisher": 2048
        }
      },
      PublisherQuery: {},
      PublisherQueryFlags: {
        enumValues: {
          "none": 0,
          "includeExtensions": 1,
          "includeEmailAddress": 2
        }
      },
      PublisherQueryResult: {},
      PublisherRoleAccess: {
        enumValues: {
          "assigned": 1,
          "inherited": 2
        }
      },
      PublisherRoleAssignment: {},
      PublisherState: {
        enumValues: {
          "none": 0,
          "verificationPending": 1,
          "certificationPending": 2,
          "certificationRejected": 4,
          "certificationRevoked": 8
        }
      },
      QnAItem: {},
      QnAItemStatus: {
        enumValues: {
          "none": 0,
          "userEditable": 1,
          "publisherCreated": 2
        }
      },
      QueryFilter: {},
      Question: {},
      QuestionsResult: {},
      Response: {},
      RestApiResponseStatus: {
        enumValues: {
          "completed": 0,
          "failed": 1,
          "inprogress": 2,
          "skipped": 3
        }
      },
      RestApiResponseStatusModel: {},
      Review: {},
      ReviewEventOperation: {
        enumValues: {
          "create": 1,
          "update": 2,
          "delete": 3
        }
      },
      ReviewEventProperties: {},
      ReviewFilterOptions: {
        enumValues: {
          "none": 0,
          "filterEmptyReviews": 1,
          "filterEmptyUserNames": 2
        }
      },
      ReviewPatch: {},
      ReviewPatchOperation: {
        enumValues: {
          "flagReview": 1,
          "updateReview": 2,
          "replyToReview": 3,
          "adminResponseForReview": 4,
          "deleteAdminReply": 5,
          "deletePublisherReply": 6
        }
      },
      ReviewReply: {},
      ReviewResourceType: {
        enumValues: {
          "review": 1,
          "publisherReply": 2,
          "adminReply": 3
        }
      },
      ReviewsResult: {},
      SortByType: {
        enumValues: {
          "relevance": 0,
          "lastUpdatedDate": 1,
          "title": 2,
          "publisher": 3,
          "installCount": 4,
          "publishedDate": 5,
          "averageRating": 6,
          "trendingDaily": 7,
          "trendingWeekly": 8,
          "trendingMonthly": 9,
          "releaseDate": 10,
          "author": 11,
          "weightedRating": 12
        }
      },
      SortOrderType: {
        enumValues: {
          "default": 0,
          "ascending": 1,
          "descending": 2
        }
      },
      UserExtensionPolicy: {},
      UserReportedConcern: {},
      VSCodeWebExtensionStatisicsType: {
        enumValues: {
          "install": 1,
          "update": 2,
          "uninstall": 3
        }
      }
    };
    exports.TypeInfo.AcquisitionOperation.fields = {
      operationState: {
        enumType: exports.TypeInfo.AcquisitionOperationState
      },
      operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
      }
    };
    exports.TypeInfo.AcquisitionOptions.fields = {
      defaultOperation: {
        typeInfo: exports.TypeInfo.AcquisitionOperation
      },
      operations: {
        isArray: true,
        typeInfo: exports.TypeInfo.AcquisitionOperation
      }
    };
    exports.TypeInfo.AzureRestApiResponseModel.fields = {
      operationStatus: {
        typeInfo: exports.TypeInfo.RestApiResponseStatusModel
      }
    };
    exports.TypeInfo.Concern.fields = {
      category: {
        enumType: exports.TypeInfo.ConcernCategory
      },
      createdDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.QnAItemStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.CustomerLastContact.fields = {
      lastContactDate: {
        isDate: true
      }
    };
    exports.TypeInfo.CustomerSupportRequest.fields = {
      review: {
        typeInfo: exports.TypeInfo.Review
      }
    };
    exports.TypeInfo.ExtensionAcquisitionRequest.fields = {
      assignmentType: {
        enumType: exports.TypeInfo.AcquisitionAssignmentType
      },
      operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
      }
    };
    exports.TypeInfo.ExtensionDailyStat.fields = {
      statisticDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ExtensionDailyStats.fields = {
      dailyStats: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionDailyStat
      }
    };
    exports.TypeInfo.ExtensionDraft.fields = {
      createdDate: {
        isDate: true
      },
      draftState: {
        enumType: exports.TypeInfo.DraftStateType
      },
      lastUpdated: {
        isDate: true
      },
      payload: {
        typeInfo: exports.TypeInfo.ExtensionPayload
      }
    };
    exports.TypeInfo.ExtensionDraftPatch.fields = {
      operation: {
        enumType: exports.TypeInfo.DraftPatchOperation
      }
    };
    exports.TypeInfo.ExtensionEvent.fields = {
      statisticDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ExtensionEvents.fields = {
      events: {
        isDictionary: true,
        dictionaryValueFieldInfo: {
          isArray: true,
          typeInfo: exports.TypeInfo.ExtensionEvent
        }
      }
    };
    exports.TypeInfo.ExtensionFilterResult.fields = {
      extensions: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublishedExtension
      }
    };
    exports.TypeInfo.ExtensionPayload.fields = {
      type: {
        enumType: exports.TypeInfo.ExtensionDeploymentTechnology
      }
    };
    exports.TypeInfo.ExtensionPolicy.fields = {
      install: {
        enumType: exports.TypeInfo.ExtensionPolicyFlags
      },
      request: {
        enumType: exports.TypeInfo.ExtensionPolicyFlags
      }
    };
    exports.TypeInfo.ExtensionQuery.fields = {
      filters: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryFilter
      },
      flags: {
        enumType: exports.TypeInfo.ExtensionQueryFlags
      }
    };
    exports.TypeInfo.ExtensionQueryResult.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionFilterResult
      }
    };
    exports.TypeInfo.ExtensionStatisticUpdate.fields = {
      operation: {
        enumType: exports.TypeInfo.ExtensionStatisticOperation
      }
    };
    exports.TypeInfo.ExtensionVersion.fields = {
      flags: {
        enumType: exports.TypeInfo.ExtensionVersionFlags
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationsData.fields = {
      type: {
        enumType: exports.TypeInfo.NotificationTemplateType
      }
    };
    exports.TypeInfo.PublishedExtension.fields = {
      deploymentType: {
        enumType: exports.TypeInfo.ExtensionDeploymentTechnology
      },
      flags: {
        enumType: exports.TypeInfo.PublishedExtensionFlags
      },
      lastUpdated: {
        isDate: true
      },
      publishedDate: {
        isDate: true
      },
      publisher: {
        typeInfo: exports.TypeInfo.PublisherFacts
      },
      releaseDate: {
        isDate: true
      },
      versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionVersion
      }
    };
    exports.TypeInfo.Publisher.fields = {
      extensions: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublishedExtension
      },
      flags: {
        enumType: exports.TypeInfo.PublisherFlags
      },
      lastUpdated: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.PublisherState
      }
    };
    exports.TypeInfo.PublisherBase.fields = {
      extensions: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublishedExtension
      },
      flags: {
        enumType: exports.TypeInfo.PublisherFlags
      },
      lastUpdated: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.PublisherState
      }
    };
    exports.TypeInfo.PublisherFacts.fields = {
      flags: {
        enumType: exports.TypeInfo.PublisherFlags
      }
    };
    exports.TypeInfo.PublisherFilterResult.fields = {
      publishers: {
        isArray: true,
        typeInfo: exports.TypeInfo.Publisher
      }
    };
    exports.TypeInfo.PublisherQuery.fields = {
      filters: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryFilter
      },
      flags: {
        enumType: exports.TypeInfo.PublisherQueryFlags
      }
    };
    exports.TypeInfo.PublisherQueryResult.fields = {
      results: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublisherFilterResult
      }
    };
    exports.TypeInfo.PublisherRoleAssignment.fields = {
      access: {
        enumType: exports.TypeInfo.PublisherRoleAccess
      }
    };
    exports.TypeInfo.QnAItem.fields = {
      createdDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.QnAItemStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.QueryFilter.fields = {
      direction: {
        enumType: exports.TypeInfo.PagingDirection
      }
    };
    exports.TypeInfo.Question.fields = {
      createdDate: {
        isDate: true
      },
      responses: {
        isArray: true,
        typeInfo: exports.TypeInfo.Response
      },
      status: {
        enumType: exports.TypeInfo.QnAItemStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.QuestionsResult.fields = {
      questions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Question
      }
    };
    exports.TypeInfo.Response.fields = {
      createdDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.QnAItemStatus
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.RestApiResponseStatusModel.fields = {
      status: {
        enumType: exports.TypeInfo.RestApiResponseStatus
      }
    };
    exports.TypeInfo.Review.fields = {
      adminReply: {
        typeInfo: exports.TypeInfo.ReviewReply
      },
      reply: {
        typeInfo: exports.TypeInfo.ReviewReply
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ReviewEventProperties.fields = {
      eventOperation: {
        enumType: exports.TypeInfo.ReviewEventOperation
      },
      replyDate: {
        isDate: true
      },
      resourceType: {
        enumType: exports.TypeInfo.ReviewResourceType
      },
      reviewDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ReviewPatch.fields = {
      operation: {
        enumType: exports.TypeInfo.ReviewPatchOperation
      },
      reportedConcern: {
        typeInfo: exports.TypeInfo.UserReportedConcern
      },
      reviewItem: {
        typeInfo: exports.TypeInfo.Review
      }
    };
    exports.TypeInfo.ReviewReply.fields = {
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ReviewsResult.fields = {
      reviews: {
        isArray: true,
        typeInfo: exports.TypeInfo.Review
      }
    };
    exports.TypeInfo.UserExtensionPolicy.fields = {
      permissions: {
        typeInfo: exports.TypeInfo.ExtensionPolicy
      }
    };
    exports.TypeInfo.UserReportedConcern.fields = {
      category: {
        enumType: exports.TypeInfo.ConcernCategory
      },
      submittedDate: {
        isDate: true
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/ExtensionManagementInterfaces.js
var require_ExtensionManagementInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/ExtensionManagementInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GalleryInterfaces = require_GalleryInterfaces();
    var AcquisitionAssignmentType;
    (function(AcquisitionAssignmentType2) {
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["None"] = 0] = "None";
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["Me"] = 1] = "Me";
      AcquisitionAssignmentType2[AcquisitionAssignmentType2["All"] = 2] = "All";
    })(AcquisitionAssignmentType = exports.AcquisitionAssignmentType || (exports.AcquisitionAssignmentType = {}));
    var AcquisitionOperationState;
    (function(AcquisitionOperationState2) {
      AcquisitionOperationState2[AcquisitionOperationState2["Disallow"] = 0] = "Disallow";
      AcquisitionOperationState2[AcquisitionOperationState2["Allow"] = 1] = "Allow";
      AcquisitionOperationState2[AcquisitionOperationState2["Completed"] = 3] = "Completed";
    })(AcquisitionOperationState = exports.AcquisitionOperationState || (exports.AcquisitionOperationState = {}));
    var AcquisitionOperationType;
    (function(AcquisitionOperationType2) {
      AcquisitionOperationType2[AcquisitionOperationType2["Get"] = 0] = "Get";
      AcquisitionOperationType2[AcquisitionOperationType2["Install"] = 1] = "Install";
      AcquisitionOperationType2[AcquisitionOperationType2["Buy"] = 2] = "Buy";
      AcquisitionOperationType2[AcquisitionOperationType2["Try"] = 3] = "Try";
      AcquisitionOperationType2[AcquisitionOperationType2["Request"] = 4] = "Request";
      AcquisitionOperationType2[AcquisitionOperationType2["None"] = 5] = "None";
      AcquisitionOperationType2[AcquisitionOperationType2["PurchaseRequest"] = 6] = "PurchaseRequest";
    })(AcquisitionOperationType = exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));
    var ContributionLicensingBehaviorType;
    (function(ContributionLicensingBehaviorType2) {
      ContributionLicensingBehaviorType2[ContributionLicensingBehaviorType2["OnlyIfLicensed"] = 0] = "OnlyIfLicensed";
      ContributionLicensingBehaviorType2[ContributionLicensingBehaviorType2["OnlyIfUnlicensed"] = 1] = "OnlyIfUnlicensed";
      ContributionLicensingBehaviorType2[ContributionLicensingBehaviorType2["AlwaysInclude"] = 2] = "AlwaysInclude";
    })(ContributionLicensingBehaviorType = exports.ContributionLicensingBehaviorType || (exports.ContributionLicensingBehaviorType = {}));
    var ContributionPropertyType;
    (function(ContributionPropertyType2) {
      ContributionPropertyType2[ContributionPropertyType2["Unknown"] = 0] = "Unknown";
      ContributionPropertyType2[ContributionPropertyType2["String"] = 1] = "String";
      ContributionPropertyType2[ContributionPropertyType2["Uri"] = 2] = "Uri";
      ContributionPropertyType2[ContributionPropertyType2["Guid"] = 4] = "Guid";
      ContributionPropertyType2[ContributionPropertyType2["Boolean"] = 8] = "Boolean";
      ContributionPropertyType2[ContributionPropertyType2["Integer"] = 16] = "Integer";
      ContributionPropertyType2[ContributionPropertyType2["Double"] = 32] = "Double";
      ContributionPropertyType2[ContributionPropertyType2["DateTime"] = 64] = "DateTime";
      ContributionPropertyType2[ContributionPropertyType2["Dictionary"] = 128] = "Dictionary";
      ContributionPropertyType2[ContributionPropertyType2["Array"] = 256] = "Array";
      ContributionPropertyType2[ContributionPropertyType2["Object"] = 512] = "Object";
    })(ContributionPropertyType = exports.ContributionPropertyType || (exports.ContributionPropertyType = {}));
    var ContributionQueryOptions;
    (function(ContributionQueryOptions2) {
      ContributionQueryOptions2[ContributionQueryOptions2["None"] = 0] = "None";
      ContributionQueryOptions2[ContributionQueryOptions2["IncludeSelf"] = 16] = "IncludeSelf";
      ContributionQueryOptions2[ContributionQueryOptions2["IncludeChildren"] = 32] = "IncludeChildren";
      ContributionQueryOptions2[ContributionQueryOptions2["IncludeSubTree"] = 96] = "IncludeSubTree";
      ContributionQueryOptions2[ContributionQueryOptions2["IncludeAll"] = 112] = "IncludeAll";
      ContributionQueryOptions2[ContributionQueryOptions2["IgnoreConstraints"] = 256] = "IgnoreConstraints";
    })(ContributionQueryOptions = exports.ContributionQueryOptions || (exports.ContributionQueryOptions = {}));
    var ExtensionFlags;
    (function(ExtensionFlags2) {
      ExtensionFlags2[ExtensionFlags2["BuiltIn"] = 1] = "BuiltIn";
      ExtensionFlags2[ExtensionFlags2["Trusted"] = 2] = "Trusted";
    })(ExtensionFlags = exports.ExtensionFlags || (exports.ExtensionFlags = {}));
    var ExtensionRequestState;
    (function(ExtensionRequestState2) {
      ExtensionRequestState2[ExtensionRequestState2["Open"] = 0] = "Open";
      ExtensionRequestState2[ExtensionRequestState2["Accepted"] = 1] = "Accepted";
      ExtensionRequestState2[ExtensionRequestState2["Rejected"] = 2] = "Rejected";
    })(ExtensionRequestState = exports.ExtensionRequestState || (exports.ExtensionRequestState = {}));
    var ExtensionRequestUpdateType;
    (function(ExtensionRequestUpdateType2) {
      ExtensionRequestUpdateType2[ExtensionRequestUpdateType2["Created"] = 1] = "Created";
      ExtensionRequestUpdateType2[ExtensionRequestUpdateType2["Approved"] = 2] = "Approved";
      ExtensionRequestUpdateType2[ExtensionRequestUpdateType2["Rejected"] = 3] = "Rejected";
      ExtensionRequestUpdateType2[ExtensionRequestUpdateType2["Deleted"] = 4] = "Deleted";
    })(ExtensionRequestUpdateType = exports.ExtensionRequestUpdateType || (exports.ExtensionRequestUpdateType = {}));
    var ExtensionStateFlags;
    (function(ExtensionStateFlags2) {
      ExtensionStateFlags2[ExtensionStateFlags2["None"] = 0] = "None";
      ExtensionStateFlags2[ExtensionStateFlags2["Disabled"] = 1] = "Disabled";
      ExtensionStateFlags2[ExtensionStateFlags2["BuiltIn"] = 2] = "BuiltIn";
      ExtensionStateFlags2[ExtensionStateFlags2["MultiVersion"] = 4] = "MultiVersion";
      ExtensionStateFlags2[ExtensionStateFlags2["UnInstalled"] = 8] = "UnInstalled";
      ExtensionStateFlags2[ExtensionStateFlags2["VersionCheckError"] = 16] = "VersionCheckError";
      ExtensionStateFlags2[ExtensionStateFlags2["Trusted"] = 32] = "Trusted";
      ExtensionStateFlags2[ExtensionStateFlags2["Error"] = 64] = "Error";
      ExtensionStateFlags2[ExtensionStateFlags2["NeedsReauthorization"] = 128] = "NeedsReauthorization";
      ExtensionStateFlags2[ExtensionStateFlags2["AutoUpgradeError"] = 256] = "AutoUpgradeError";
      ExtensionStateFlags2[ExtensionStateFlags2["Warning"] = 512] = "Warning";
    })(ExtensionStateFlags = exports.ExtensionStateFlags || (exports.ExtensionStateFlags = {}));
    var ExtensionUpdateType;
    (function(ExtensionUpdateType2) {
      ExtensionUpdateType2[ExtensionUpdateType2["Installed"] = 1] = "Installed";
      ExtensionUpdateType2[ExtensionUpdateType2["Uninstalled"] = 2] = "Uninstalled";
      ExtensionUpdateType2[ExtensionUpdateType2["Enabled"] = 3] = "Enabled";
      ExtensionUpdateType2[ExtensionUpdateType2["Disabled"] = 4] = "Disabled";
      ExtensionUpdateType2[ExtensionUpdateType2["VersionUpdated"] = 5] = "VersionUpdated";
      ExtensionUpdateType2[ExtensionUpdateType2["ActionRequired"] = 6] = "ActionRequired";
      ExtensionUpdateType2[ExtensionUpdateType2["ActionResolved"] = 7] = "ActionResolved";
    })(ExtensionUpdateType = exports.ExtensionUpdateType || (exports.ExtensionUpdateType = {}));
    var InstalledExtensionStateIssueType;
    (function(InstalledExtensionStateIssueType2) {
      InstalledExtensionStateIssueType2[InstalledExtensionStateIssueType2["Warning"] = 0] = "Warning";
      InstalledExtensionStateIssueType2[InstalledExtensionStateIssueType2["Error"] = 1] = "Error";
    })(InstalledExtensionStateIssueType = exports.InstalledExtensionStateIssueType || (exports.InstalledExtensionStateIssueType = {}));
    exports.TypeInfo = {
      AcquisitionAssignmentType: {
        enumValues: {
          "none": 0,
          "me": 1,
          "all": 2
        }
      },
      AcquisitionOperation: {},
      AcquisitionOperationState: {
        enumValues: {
          "disallow": 0,
          "allow": 1,
          "completed": 3
        }
      },
      AcquisitionOperationType: {
        enumValues: {
          "get": 0,
          "install": 1,
          "buy": 2,
          "try": 3,
          "request": 4,
          "none": 5,
          "purchaseRequest": 6
        }
      },
      AcquisitionOptions: {},
      ContributionLicensingBehaviorType: {
        enumValues: {
          "onlyIfLicensed": 0,
          "onlyIfUnlicensed": 1,
          "alwaysInclude": 2
        }
      },
      ContributionNodeQuery: {},
      ContributionPropertyDescription: {},
      ContributionPropertyType: {
        enumValues: {
          "unknown": 0,
          "string": 1,
          "uri": 2,
          "guid": 4,
          "boolean": 8,
          "integer": 16,
          "double": 32,
          "dateTime": 64,
          "dictionary": 128,
          "array": 256,
          "object": 512
        }
      },
      ContributionQueryOptions: {
        enumValues: {
          "none": 0,
          "includeSelf": 16,
          "includeChildren": 32,
          "includeSubTree": 96,
          "includeAll": 112,
          "ignoreConstraints": 256
        }
      },
      ContributionType: {},
      ExtensionAcquisitionRequest: {},
      ExtensionAuditLog: {},
      ExtensionAuditLogEntry: {},
      ExtensionEvent: {},
      ExtensionFlags: {
        enumValues: {
          "builtIn": 1,
          "trusted": 2
        }
      },
      ExtensionLicensing: {},
      ExtensionManifest: {},
      ExtensionRequest: {},
      ExtensionRequestEvent: {},
      ExtensionRequestsEvent: {},
      ExtensionRequestState: {
        enumValues: {
          "open": 0,
          "accepted": 1,
          "rejected": 2
        }
      },
      ExtensionRequestUpdateType: {
        enumValues: {
          "created": 1,
          "approved": 2,
          "rejected": 3,
          "deleted": 4
        }
      },
      ExtensionState: {},
      ExtensionStateFlags: {
        enumValues: {
          "none": 0,
          "disabled": 1,
          "builtIn": 2,
          "multiVersion": 4,
          "unInstalled": 8,
          "versionCheckError": 16,
          "trusted": 32,
          "error": 64,
          "needsReauthorization": 128,
          "autoUpgradeError": 256,
          "warning": 512
        }
      },
      ExtensionUpdateType: {
        enumValues: {
          "installed": 1,
          "uninstalled": 2,
          "enabled": 3,
          "disabled": 4,
          "versionUpdated": 5,
          "actionRequired": 6,
          "actionResolved": 7
        }
      },
      InstalledExtension: {},
      InstalledExtensionState: {},
      InstalledExtensionStateIssue: {},
      InstalledExtensionStateIssueType: {
        enumValues: {
          "warning": 0,
          "error": 1
        }
      },
      LicensingOverride: {},
      RequestedExtension: {}
    };
    exports.TypeInfo.AcquisitionOperation.fields = {
      operationState: {
        enumType: exports.TypeInfo.AcquisitionOperationState
      },
      operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
      }
    };
    exports.TypeInfo.AcquisitionOptions.fields = {
      defaultOperation: {
        typeInfo: exports.TypeInfo.AcquisitionOperation
      },
      operations: {
        isArray: true,
        typeInfo: exports.TypeInfo.AcquisitionOperation
      }
    };
    exports.TypeInfo.ContributionNodeQuery.fields = {
      queryOptions: {
        enumType: exports.TypeInfo.ContributionQueryOptions
      }
    };
    exports.TypeInfo.ContributionPropertyDescription.fields = {
      type: {
        enumType: exports.TypeInfo.ContributionPropertyType
      }
    };
    exports.TypeInfo.ContributionType.fields = {
      properties: {
        isDictionary: true,
        dictionaryValueTypeInfo: exports.TypeInfo.ContributionPropertyDescription
      }
    };
    exports.TypeInfo.ExtensionAcquisitionRequest.fields = {
      assignmentType: {
        enumType: exports.TypeInfo.AcquisitionAssignmentType
      },
      operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
      }
    };
    exports.TypeInfo.ExtensionAuditLog.fields = {
      entries: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionAuditLogEntry
      }
    };
    exports.TypeInfo.ExtensionAuditLogEntry.fields = {
      auditDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ExtensionEvent.fields = {
      extension: {
        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension
      },
      updateType: {
        enumType: exports.TypeInfo.ExtensionUpdateType
      }
    };
    exports.TypeInfo.ExtensionLicensing.fields = {
      overrides: {
        isArray: true,
        typeInfo: exports.TypeInfo.LicensingOverride
      }
    };
    exports.TypeInfo.ExtensionManifest.fields = {
      contributionTypes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributionType
      },
      licensing: {
        typeInfo: exports.TypeInfo.ExtensionLicensing
      }
    };
    exports.TypeInfo.ExtensionRequest.fields = {
      requestDate: {
        isDate: true
      },
      requestState: {
        enumType: exports.TypeInfo.ExtensionRequestState
      },
      resolveDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ExtensionRequestEvent.fields = {
      extension: {
        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension
      },
      request: {
        typeInfo: exports.TypeInfo.ExtensionRequest
      },
      updateType: {
        enumType: exports.TypeInfo.ExtensionRequestUpdateType
      }
    };
    exports.TypeInfo.ExtensionRequestsEvent.fields = {
      extension: {
        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension
      },
      requests: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionRequest
      },
      updateType: {
        enumType: exports.TypeInfo.ExtensionRequestUpdateType
      }
    };
    exports.TypeInfo.ExtensionState.fields = {
      flags: {
        enumType: exports.TypeInfo.ExtensionStateFlags
      },
      installationIssues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue
      },
      lastUpdated: {
        isDate: true
      },
      lastVersionCheck: {
        isDate: true
      }
    };
    exports.TypeInfo.InstalledExtension.fields = {
      contributionTypes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributionType
      },
      flags: {
        enumType: exports.TypeInfo.ExtensionFlags
      },
      installState: {
        typeInfo: exports.TypeInfo.InstalledExtensionState
      },
      lastPublished: {
        isDate: true
      },
      licensing: {
        typeInfo: exports.TypeInfo.ExtensionLicensing
      }
    };
    exports.TypeInfo.InstalledExtensionState.fields = {
      flags: {
        enumType: exports.TypeInfo.ExtensionStateFlags
      },
      installationIssues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue
      },
      lastUpdated: {
        isDate: true
      }
    };
    exports.TypeInfo.InstalledExtensionStateIssue.fields = {
      type: {
        enumType: exports.TypeInfo.InstalledExtensionStateIssueType
      }
    };
    exports.TypeInfo.LicensingOverride.fields = {
      behavior: {
        enumType: exports.TypeInfo.ContributionLicensingBehaviorType
      }
    };
    exports.TypeInfo.RequestedExtension.fields = {
      extensionRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionRequest
      }
    };
  }
});

// node_modules/azure-devops-node-api/ExtensionManagementApi.js
var require_ExtensionManagementApi = __commonJS({
  "node_modules/azure-devops-node-api/ExtensionManagementApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var ExtensionManagementInterfaces = require_ExtensionManagementInterfaces();
    var GalleryInterfaces = require_GalleryInterfaces();
    var ExtensionManagementApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-ExtensionManagement-api", options);
      }
      getAcquisitionOptions(itemId, testCommerce, isFreeOrTrialInstall, isAccountOwner, isLinked, isConnectedServer, isBuyOperationValid) {
        return __awaiter(this, void 0, void 0, function* () {
          if (itemId == null) {
            throw new TypeError("itemId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              itemId,
              testCommerce,
              isFreeOrTrialInstall,
              isAccountOwner,
              isLinked,
              isConnectedServer,
              isBuyOperationValid
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "288dff58-d13b-468e-9671-0fb754e9398c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.AcquisitionOptions, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      requestAcquisition(acquisitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "da616457-eed3-4672-92d7-18d21f5c1658", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, acquisitionRequest, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAuditLog(publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "23a312e0-562d-42fb-a505-5a046b5635db", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAuditLog, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      registerAuthorization(publisherName, extensionName, registrationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              registrationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "f21cfc80-d2d2-4248-98bb-7820c74c4606", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, doc, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName,
              documentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName,
              documentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDocumentsByName(publisherName, extensionName, scopeType, scopeValue, collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, doc, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              scopeType,
              scopeValue,
              collectionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, doc, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryCollectionsByName(collectionQuery, publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "56c331f1-ce53-4318-adfd-4db5c52a7a2e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, collectionQuery, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStates(includeDisabled, includeErrors, includeInstallationIssues, forceRefresh) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              includeDisabled,
              includeErrors,
              includeInstallationIssues,
              forceRefresh
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "92755d3d-9a8a-42b3-8a4d-87359fe5aa93", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionState, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryExtensions(query) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "046c980f-1345-4ce2-bf85-b46d10ff4cfd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getInstalledExtensions(includeDisabledExtensions, includeErrors, assetTypes, includeInstallationIssues) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              includeDisabledExtensions,
              includeErrors,
              assetTypes: assetTypes && assetTypes.join(":"),
              includeInstallationIssues
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "275424d0-c844-4fe2-bda6-04933a1357d8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateInstalledExtension(extension) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "275424d0-c844-4fe2-bda6-04933a1357d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, extension, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getInstalledExtensionByName(publisherName, extensionName, assetTypes) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              assetTypes: assetTypes && assetTypes.join(":")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      installExtensionByName(publisherName, extensionName, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      uninstallExtensionByName(publisherName, extensionName, reason, reasonCode) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              reason,
              reasonCode
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicies(userId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              userId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "e5cc8c09-407b-4867-8319-2ae3338cbf6f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.UserExtensionPolicy, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      resolveRequest(rejectMessage, publisherName, extensionName, requesterId, state) {
        return __awaiter(this, void 0, void 0, function* () {
          if (state == null) {
            throw new TypeError("state can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              requesterId
            };
            let queryValues = {
              state
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "aa93e1f3-511c-4364-8b9c-eb98818f2e0b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, rejectMessage, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRequests() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "216b978f-b164-424e-ada2-b77561e842b7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      resolveAllRequests(rejectMessage, publisherName, extensionName, state) {
        return __awaiter(this, void 0, void 0, function* () {
          if (state == null) {
            throw new TypeError("state can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              state
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "ba93e1f3-511c-4364-8b9c-eb98818f2e0b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, rejectMessage, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRequest(publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "f5afca1e-a728-4294-aa2d-4af0173431b5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      requestExtension(publisherName, extensionName, requestMessage) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "f5afca1e-a728-4294-aa2d-4af0173431b5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, requestMessage, options);
              let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getToken() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "ExtensionManagement", "3a2e24ed-1d6f-4cb2-9f3b-45a96bbfaf50", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    ExtensionManagementApi.RESOURCE_AREA_ID = "6c2b0933-3600-42ae-bf8b-93d4f7e83594";
    exports.ExtensionManagementApi = ExtensionManagementApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/FeatureManagementInterfaces.js
var require_FeatureManagementInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/FeatureManagementInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContributedFeatureEnabledValue;
    (function(ContributedFeatureEnabledValue2) {
      ContributedFeatureEnabledValue2[ContributedFeatureEnabledValue2["Undefined"] = -1] = "Undefined";
      ContributedFeatureEnabledValue2[ContributedFeatureEnabledValue2["Disabled"] = 0] = "Disabled";
      ContributedFeatureEnabledValue2[ContributedFeatureEnabledValue2["Enabled"] = 1] = "Enabled";
    })(ContributedFeatureEnabledValue = exports.ContributedFeatureEnabledValue || (exports.ContributedFeatureEnabledValue = {}));
    exports.TypeInfo = {
      ContributedFeatureEnabledValue: {
        enumValues: {
          "undefined": -1,
          "disabled": 0,
          "enabled": 1
        }
      },
      ContributedFeatureState: {},
      ContributedFeatureStateQuery: {}
    };
    exports.TypeInfo.ContributedFeatureState.fields = {
      state: {
        enumType: exports.TypeInfo.ContributedFeatureEnabledValue
      }
    };
    exports.TypeInfo.ContributedFeatureStateQuery.fields = {
      featureStates: {
        isDictionary: true,
        dictionaryValueTypeInfo: exports.TypeInfo.ContributedFeatureState
      }
    };
  }
});

// node_modules/azure-devops-node-api/FeatureManagementApi.js
var require_FeatureManagementApi = __commonJS({
  "node_modules/azure-devops-node-api/FeatureManagementApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var FeatureManagementInterfaces = require_FeatureManagementInterfaces();
    var FeatureManagementApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-FeatureManagement-api", options);
      }
      getFeature(featureId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              featureId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "c4209f25-7a27-41dd-9f04-06080c7b6afd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFeatures(targetContributionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              targetContributionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "c4209f25-7a27-41dd-9f04-06080c7b6afd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFeatureState(featureId, userScope) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              featureId,
              userScope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "98911314-3f9b-4eaf-80e8-83900d8e85d9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setFeatureState(feature, featureId, userScope, reason, reasonCode) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              featureId,
              userScope
            };
            let queryValues = {
              reason,
              reasonCode
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "98911314-3f9b-4eaf-80e8-83900d8e85d9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, feature, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFeatureStateForScope(featureId, userScope, scopeName, scopeValue) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              featureId,
              userScope,
              scopeName,
              scopeValue
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "dd291e43-aa9f-4cee-8465-a93c78e414a4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setFeatureStateForScope(feature, featureId, userScope, scopeName, scopeValue, reason, reasonCode) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              featureId,
              userScope,
              scopeName,
              scopeValue
            };
            let queryValues = {
              reason,
              reasonCode
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "dd291e43-aa9f-4cee-8465-a93c78e414a4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, feature, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryFeatureStates(query) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "2b4486ad-122b-400c-ae65-17b6672c1f9d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryFeatureStatesForDefaultScope(query, userScope) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              userScope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "3f810f28-03e2-4239-b0bc-788add3005e5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryFeatureStatesForNamedScope(query, userScope, scopeName, scopeValue) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              userScope,
              scopeName,
              scopeValue
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "FeatureManagement", "f29e997b-c2da-4d15-8380-765788a1a74c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.FeatureManagementApi = FeatureManagementApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/FileContainerInterfaces.js
var require_FileContainerInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/FileContainerInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BlobCompressionType;
    (function(BlobCompressionType2) {
      BlobCompressionType2[BlobCompressionType2["None"] = 0] = "None";
      BlobCompressionType2[BlobCompressionType2["GZip"] = 1] = "GZip";
    })(BlobCompressionType = exports.BlobCompressionType || (exports.BlobCompressionType = {}));
    var ContainerItemStatus;
    (function(ContainerItemStatus2) {
      ContainerItemStatus2[ContainerItemStatus2["Created"] = 1] = "Created";
      ContainerItemStatus2[ContainerItemStatus2["PendingUpload"] = 2] = "PendingUpload";
    })(ContainerItemStatus = exports.ContainerItemStatus || (exports.ContainerItemStatus = {}));
    var ContainerItemType;
    (function(ContainerItemType2) {
      ContainerItemType2[ContainerItemType2["Any"] = 0] = "Any";
      ContainerItemType2[ContainerItemType2["Folder"] = 1] = "Folder";
      ContainerItemType2[ContainerItemType2["File"] = 2] = "File";
    })(ContainerItemType = exports.ContainerItemType || (exports.ContainerItemType = {}));
    var ContainerOptions;
    (function(ContainerOptions2) {
      ContainerOptions2[ContainerOptions2["None"] = 0] = "None";
    })(ContainerOptions = exports.ContainerOptions || (exports.ContainerOptions = {}));
    exports.TypeInfo = {
      BlobCompressionType: {
        enumValues: {
          "none": 0,
          "gZip": 1
        }
      },
      ContainerItemBlobReference: {},
      ContainerItemStatus: {
        enumValues: {
          "created": 1,
          "pendingUpload": 2
        }
      },
      ContainerItemType: {
        enumValues: {
          "any": 0,
          "folder": 1,
          "file": 2
        }
      },
      ContainerOptions: {
        enumValues: {
          "none": 0
        }
      },
      FileContainer: {},
      FileContainerItem: {}
    };
    exports.TypeInfo.ContainerItemBlobReference.fields = {
      compressionType: {
        enumType: exports.TypeInfo.BlobCompressionType
      }
    };
    exports.TypeInfo.FileContainer.fields = {
      dateCreated: {
        isDate: true
      },
      options: {
        enumType: exports.TypeInfo.ContainerOptions
      }
    };
    exports.TypeInfo.FileContainerItem.fields = {
      blobMetadata: {
        typeInfo: exports.TypeInfo.ContainerItemBlobReference
      },
      dateCreated: {
        isDate: true
      },
      dateLastModified: {
        isDate: true
      },
      itemType: {
        enumType: exports.TypeInfo.ContainerItemType
      },
      status: {
        enumType: exports.TypeInfo.ContainerItemStatus
      }
    };
  }
});

// node_modules/azure-devops-node-api/FileContainerApiBase.js
var require_FileContainerApiBase = __commonJS({
  "node_modules/azure-devops-node-api/FileContainerApiBase.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var FileContainerInterfaces = require_FileContainerInterfaces();
    var FileContainerApiBase = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-FileContainer-api", options);
      }
      createItems(items, containerId, scope) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              containerId
            };
            let queryValues = {
              scope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, items, options);
              let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteItem(containerId, itemPath, scope) {
        return __awaiter(this, void 0, void 0, function* () {
          if (itemPath == null) {
            throw new TypeError("itemPath can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              containerId
            };
            let queryValues = {
              itemPath,
              scope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getContainers(scope, artifactUris) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              scope,
              artifactUris
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainer, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItems(containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow, ignoreRequestedMediaType, includeBlobMetadata, saveAbsolutePath) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              containerId
            };
            let queryValues = {
              scope,
              itemPath,
              metadata,
              "$format": format,
              downloadFileName,
              includeDownloadTickets,
              isShallow,
              ignoreRequestedMediaType,
              includeBlobMetadata,
              saveAbsolutePath
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.FileContainerApiBase = FileContainerApiBase;
  }
});

// node_modules/azure-devops-node-api/FileContainerApi.js
var require_FileContainerApi = __commonJS({
  "node_modules/azure-devops-node-api/FileContainerApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream = require("stream");
    var zlib = require("zlib");
    var httpm = require_HttpClient();
    var FileContainerApiBase = require_FileContainerApiBase();
    var FileContainerInterfaces = require_FileContainerInterfaces();
    var FileContainerApi = class extends FileContainerApiBase.FileContainerApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, options);
      }
      getItem(containerId, scope, itemPath, downloadFileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              containerId
            };
            let queryValues = {
              scope,
              itemPath,
              "$format": "OctetStream",
              downloadFileName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("4.0-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/octet-stream", verData.apiVersion);
              let res = yield this.http.get(url);
              let rres = {};
              let statusCode = res.message.statusCode;
              rres.statusCode = statusCode;
              if (statusCode == httpm.HttpCodes.NotFound) {
                resolve(rres);
              }
              if (statusCode > 299) {
                let msg;
                let contents = yield res.readBody();
                let obj;
                if (contents && contents.length > 0) {
                  obj = JSON.parse(contents);
                  if (options && options.responseProcessor) {
                    rres.result = options.responseProcessor(obj);
                  } else {
                    rres.result = obj;
                  }
                }
                if (obj && obj.message) {
                  msg = obj.message;
                } else {
                  msg = "Failed request: (" + statusCode + ") " + res.message.url;
                }
                reject(new Error(msg));
              } else {
                if (res.message.headers["content-encoding"] === "gzip") {
                  let unzipStream = zlib.createGunzip();
                  res.message.pipe(unzipStream);
                  rres.result = unzipStream;
                } else {
                  rres.result = res.message;
                }
                resolve(rres);
              }
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createItem(contentStream, uncompressedLength, containerId, itemPath, scope, options) {
        return new Promise((resolve, reject) => {
          let chunkStream = new ChunkStream(this, uncompressedLength, containerId, itemPath, scope, options);
          chunkStream.on("finish", () => {
            resolve(chunkStream.getItem());
          });
          contentStream.pipe(chunkStream);
        });
      }
      _createItem(customHeaders, contentStream, containerId, itemPath, scope, onResult) {
        var routeValues = {
          containerId
        };
        var queryValues = {
          itemPath,
          scope
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "";
        this.vsoClient.getVersioningData("4.0-preview.4", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues).then((versioningData) => {
          var url = versioningData.requestUrl;
          var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: false };
          let options = this.createRequestOptions("application/octet-stream", versioningData.apiVersion);
          options.additionalHeaders = customHeaders;
          this.rest.uploadStream("PUT", url, contentStream, options).then((res) => {
            let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, false);
            onResult(null, res.statusCode, ret);
          }).catch((err) => {
            onResult(err, err.statusCode, null);
          });
        }, (error) => {
          onResult(error, error.statusCode, null);
        });
      }
    };
    exports.FileContainerApi = FileContainerApi;
    var ChunkStream = class extends stream.Writable {
      constructor(api, uncompressedLength, containerId, itemPath, scope, options) {
        super();
        this._buffer = new Buffer(ChunkStream.ChunkSize);
        this._length = 0;
        this._startRange = 0;
        this._bytesToSend = 0;
        this._totalReceived = 0;
        this._api = api;
        this._options = options || {};
        this._uncompressedLength = uncompressedLength;
        this._containerId = containerId;
        this._itemPath = itemPath;
        this._scope = scope;
        this._bytesToSend = this._options.isGzipped ? this._options.compressedLength : uncompressedLength;
      }
      _write(data, encoding, callback) {
        let chunk = data;
        if (!chunk) {
          if (this._length == 0) {
            callback();
          } else {
            this._sendChunk(callback);
          }
          return;
        }
        let newBuffer = null;
        if (this._length + chunk.length > ChunkStream.ChunkSize) {
          let overflowPosition = chunk.length - (ChunkStream.ChunkSize - this._length);
          chunk.copy(this._buffer, this._length, 0, overflowPosition);
          this._length += overflowPosition;
          newBuffer = chunk.slice(overflowPosition);
        } else {
          chunk.copy(this._buffer, this._length, 0, chunk.length);
          this._length += chunk.length;
        }
        this._totalReceived += chunk.length;
        if (this._length >= ChunkStream.ChunkSize || this._totalReceived >= this._bytesToSend) {
          this._sendChunk(callback, newBuffer);
        } else {
          callback();
        }
      }
      _sendChunk(callback, newBuffer) {
        let endRange = this._startRange + this._length;
        let headers = {
          "Content-Range": "bytes " + this._startRange + "-" + (endRange - 1) + "/" + this._bytesToSend,
          "Content-Length": this._length
        };
        if (this._options.isGzipped) {
          headers["Accept-Encoding"] = "gzip";
          headers["Content-Encoding"] = "gzip";
          headers["x-tfs-filelength"] = this._uncompressedLength;
        }
        this._startRange = endRange;
        this._api._createItem(headers, new BufferStream(this._buffer, this._length), this._containerId, this._itemPath, this._scope, (err, statusCode, item) => {
          if (newBuffer) {
            this._length = newBuffer.length;
            newBuffer.copy(this._buffer);
          } else {
            this._length = 0;
          }
          this._item = item;
          callback(err);
        });
      }
      getItem() {
        return this._item;
      }
    };
    ChunkStream.ChunkSize = 16 * 1024 * 1024;
    var BufferStream = class extends stream.Readable {
      constructor(buffer, length) {
        super();
        this._position = 0;
        this._length = 0;
        this._buffer = buffer;
        this._length = length;
      }
      _read(size) {
        if (this._position >= this._length) {
          this.push(null);
          return;
        }
        let end = Math.min(this._position + size, this._length);
        this.push(this._buffer.slice(this._position, end));
        this._position = end;
      }
    };
  }
});

// node_modules/azure-devops-node-api/GalleryCompatHttpClientBase.js
var require_GalleryCompatHttpClientBase = __commonJS({
  "node_modules/azure-devops-node-api/GalleryCompatHttpClientBase.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var GalleryInterfaces = require_GalleryInterfaces();
    var GalleryCompatHttpClientBase = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, userAgent, options) {
        super(baseUrl, handlers, userAgent, options);
      }
      createExtensionJson(extensionPackage) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          let routeValues = {};
          try {
            let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues);
            let url = verData.requestUrl;
            let options = this.createRequestOptions("application/json", verData.apiVersion);
            let res;
            res = yield this.rest.create(url, extensionPackage, options);
            let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
            resolve(ret);
          } catch (err) {
            reject(err);
          }
        }));
      }
      updateExtensionByIdJson(extensionPackage, extensionId) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          let routeValues = {
            extensionId
          };
          try {
            let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues);
            let url = verData.requestUrl;
            let options = this.createRequestOptions("application/json", verData.apiVersion);
            let res;
            res = yield this.rest.replace(url, extensionPackage, options);
            let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
            resolve(ret);
          } catch (err) {
            reject(err);
          }
        }));
      }
      createExtensionWithPublisherJson(extensionPackage, publisherName) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          let routeValues = {
            publisherName
          };
          try {
            let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues);
            let url = verData.requestUrl;
            let options = this.createRequestOptions("application/json", verData.apiVersion);
            let res;
            res = yield this.rest.create(url, extensionPackage, options);
            let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
            resolve(ret);
          } catch (err) {
            reject(err);
          }
        }));
      }
      updateExtensionJson(extensionPackage, publisherName, extensionName) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          let routeValues = {
            publisherName,
            extensionName
          };
          try {
            let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues);
            let url = verData.requestUrl;
            let options = this.createRequestOptions("application/json", verData.apiVersion);
            let res;
            res = yield this.rest.replace(url, extensionPackage, options);
            let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
            resolve(ret);
          } catch (err) {
            reject(err);
          }
        }));
      }
    };
    exports.GalleryCompatHttpClientBase = GalleryCompatHttpClientBase;
  }
});

// node_modules/azure-devops-node-api/GalleryApi.js
var require_GalleryApi = __commonJS({
  "node_modules/azure-devops-node-api/GalleryApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var compatBase = require_GalleryCompatHttpClientBase();
    var GalleryInterfaces = require_GalleryInterfaces();
    var GalleryApi = class extends compatBase.GalleryCompatHttpClientBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Gallery-api", options);
      }
      shareExtensionById(extensionId, accountName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId,
              accountName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      unshareExtensionById(extensionId, accountName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId,
              accountName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      shareExtension(publisherName, extensionName, accountName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              accountName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      unshareExtension(publisherName, extensionName, accountName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              accountName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAcquisitionOptions(itemId, installationTarget, testCommerce, isFreeOrTrialInstall) {
        return __awaiter(this, void 0, void 0, function* () {
          if (installationTarget == null) {
            throw new TypeError("installationTarget can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              itemId
            };
            let queryValues = {
              installationTarget,
              testCommerce,
              isFreeOrTrialInstall
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "9d0a0105-075e-4760-aa15-8bcf54d1bd7d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.AcquisitionOptions, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      requestAcquisition(acquisitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "3adb1f2d-e328-446e-be73-9f6d98071c45", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, acquisitionRequest, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAssetByName(customHeaders, publisherName, extensionName, version, assetType, accountToken, acceptDefault, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version,
              assetType
            };
            let queryValues = {
              accountToken,
              acceptDefault
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "7529171f-a002-4180-93ba-685f358a0482", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAsset(customHeaders, extensionId, version, assetType, accountToken, acceptDefault, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId,
              version,
              assetType
            };
            let queryValues = {
              accountToken,
              acceptDefault
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "5d545f3d-ef47-488b-8be3-f5ee1517856c", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAssetAuthenticated(customHeaders, publisherName, extensionName, version, assetType, accountToken, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version,
              assetType
            };
            let queryValues = {
              accountToken
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "506aff36-2622-4f70-8063-77cce6366d20", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      associateAzurePublisher(publisherName, azurePublisherId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (azurePublisherId == null) {
            throw new TypeError("azurePublisherId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              azurePublisherId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryAssociatedAzurePublisher(publisherName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCategories(languages) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              languages
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "e0a5a71e-3ac3-43a0-ae7d-0bb5c3046a2a", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCategoryDetails(categoryName, languages, product) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              categoryName
            };
            let queryValues = {
              languages,
              product
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "75d3c04d-84d2-4973-acd2-22627587dabc", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCategoryTree(product, categoryId, lcid, source, productVersion, skus, subSkus, productArchitecture) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              product,
              categoryId
            };
            let queryValues = {
              lcid,
              source,
              productVersion,
              skus,
              subSkus,
              productArchitecture
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "1102bb42-82b0-4955-8d8a-435d6b4cedd3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRootCategories(product, lcid, source, productVersion, skus, subSkus) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              product
            };
            let queryValues = {
              lcid,
              source,
              productVersion,
              skus,
              subSkus
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "31fba831-35b2-46f6-a641-d05de5a877d8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCertificate(publisherName, extensionName, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "e905ad6a-3f1f-4d08-9f6d-7d357ff8b7d0", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getContentVerificationLog(publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "c0f1c7c4-3557-4ffb-b774-1e48c4865e99", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createSupportRequest(customerSupportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "8eded385-026a-4c15-b810-b8eb402771f1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, customerSupportRequest, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createDraftForEditExtension(publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "02b33873-4e61-496e-83a2-59d1df46b7d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      performEditExtensionDraftOperation(draftPatch, publisherName, extensionName, draftId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              draftId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "02b33873-4e61-496e-83a2-59d1df46b7d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, draftPatch, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePayloadInDraftForEditExtension(customHeaders, contentStream, publisherName, extensionName, draftId, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              draftId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            customHeaders["X-Market-UploadFileName"] = "fileName";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "02b33873-4e61-496e-83a2-59d1df46b7d8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addAssetForEditExtensionDraft(customHeaders, contentStream, publisherName, extensionName, draftId, assetType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              draftId,
              assetType
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "f1db9c47-6619-4998-a7e5-d7f9f41a4617", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createDraftForNewExtension(customHeaders, contentStream, publisherName, product, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            customHeaders["X-Market-UploadFileProduct"] = "product";
            customHeaders["X-Market-UploadFileName"] = "fileName";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "b3ab127d-ebb9-4d22-b611-4e09593c8d79", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      performNewExtensionDraftOperation(draftPatch, publisherName, draftId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              draftId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "b3ab127d-ebb9-4d22-b611-4e09593c8d79", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, draftPatch, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePayloadInDraftForNewExtension(customHeaders, contentStream, publisherName, draftId, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              draftId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            customHeaders["X-Market-UploadFileName"] = "fileName";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "b3ab127d-ebb9-4d22-b611-4e09593c8d79", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addAssetForNewExtensionDraft(customHeaders, contentStream, publisherName, draftId, assetType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              draftId,
              assetType
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAssetFromEditExtensionDraft(publisherName, draftId, assetType, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (extensionName == null) {
            throw new TypeError("extensionName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              draftId,
              assetType
            };
            let queryValues = {
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAssetFromNewExtensionDraft(publisherName, draftId, assetType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              draftId,
              assetType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtensionEvents(publisherName, extensionName, count, afterDate, include, includeProperty) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              count,
              afterDate,
              include,
              includeProperty
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "3d13c499-2168-4d06-bef4-14aba185dcd5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionEvents, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      publishExtensionEvents(extensionEvents) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "0bf2bd3a-70e0-4d5d-8bf7-bd4a9c2ab6e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, extensionEvents, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryExtensions(customHeaders, extensionQuery, accountToken, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              accountToken
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "eb9d5ee1-6d43-456b-b80e-8a96fbc014b6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.create(url, extensionQuery, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createExtension(customHeaders, contentStream, extensionType, reCaptchaToken) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              extensionType,
              reCaptchaToken
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteExtensionById(extensionId, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId
            };
            let queryValues = {
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtensionById(extensionId, version, flags) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId
            };
            let queryValues = {
              version,
              flags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateExtensionById(extensionId, reCaptchaToken) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              extensionId
            };
            let queryValues = {
              reCaptchaToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createExtensionWithPublisher(customHeaders, contentStream, publisherName, extensionType, reCaptchaToken) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              extensionType,
              reCaptchaToken
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteExtension(publisherName, extensionName, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtension(customHeaders, publisherName, extensionName, version, flags, accountToken, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              version,
              flags,
              accountToken
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateExtension(customHeaders, contentStream, publisherName, extensionName, extensionType, reCaptchaToken, bypassScopeCheck) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              extensionType,
              reCaptchaToken,
              bypassScopeCheck
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateExtensionProperties(publisherName, extensionName, flags) {
        return __awaiter(this, void 0, void 0, function* () {
          if (flags == null) {
            throw new TypeError("flags can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              flags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      shareExtensionWithHost(publisherName, extensionName, hostType, hostName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              hostType,
              hostName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "328a3af8-d124-46e9-9483-01690cd415b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      unshareExtensionWithHost(publisherName, extensionName, hostType, hostName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              hostType,
              hostName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "328a3af8-d124-46e9-9483-01690cd415b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      extensionValidator(azureRestApiRequestModel) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "05e8a5e1-8c59-4c2c-8856-0ff087d1a844", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, azureRestApiRequestModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      sendNotifications(notificationData) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "eab39817-413c-4602-a49f-07ad00844980", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, notificationData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPackage(customHeaders, publisherName, extensionName, version, accountToken, acceptDefault, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            let queryValues = {
              accountToken,
              acceptDefault
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "7cb576f8-1cae-4c4b-b7b1-e4af5759e965", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAssetWithToken(customHeaders, publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault, accountTokenHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version,
              assetType,
              assetToken
            };
            let queryValues = {
              accountToken,
              acceptDefault
            };
            customHeaders = customHeaders || {};
            customHeaders["X-Market-AccountToken"] = "accountTokenHeader";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "364415a1-0077-4a41-a7a0-06edd4497492", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePublisherAsset(publisherName, assetType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              assetType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "21143299-34f9-4c62-8ca8-53da691192f9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPublisherAsset(publisherName, assetType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              assetType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "21143299-34f9-4c62-8ca8-53da691192f9", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePublisherAsset(customHeaders, contentStream, publisherName, assetType, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              assetType
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            customHeaders["X-Market-UploadFileName"] = "fileName";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "21143299-34f9-4c62-8ca8-53da691192f9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      fetchDomainToken(publisherName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "67a609ef-fa74-4b52-8664-78d76f7b3634", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      verifyDomainToken(publisherName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "67a609ef-fa74-4b52-8664-78d76f7b3634", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryPublishers(publisherQuery) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "2ad6ee0a-b53f-4034-9d1d-d009fda1212e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, publisherQuery, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPublisher(publisher) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, publisher, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePublisher(publisherName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPublisher(publisherName, flags) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              flags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePublisher(publisher, publisherName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, publisher, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePublisherMembers(roleAssignments, publisherName, limitToCallerIdentityDomain) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName
            };
            let queryValues = {
              limitToCallerIdentityDomain
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, roleAssignments, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherRoleAssignment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQuestions(publisherName, extensionName, count, page, afterDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              count,
              page,
              afterDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "c010d03d-812c-4ade-ae07-c1862475eda5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.QuestionsResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      reportQuestion(concern, pubName, extName, questionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              pubName,
              extName,
              questionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "784910cd-254a-494d-898b-0728549b2f10", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, concern, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Concern, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createQuestion(question, publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "6d1d9741-eca8-4701-a3a5-235afc82dfa4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, question, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteQuestion(publisherName, extensionName, questionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              questionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "6d1d9741-eca8-4701-a3a5-235afc82dfa4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateQuestion(question, publisherName, extensionName, questionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              questionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "6d1d9741-eca8-4701-a3a5-235afc82dfa4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, question, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createResponse(response, publisherName, extensionName, questionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              questionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "7f8ae5e0-46b0-438f-b2e8-13e8513517bd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, response, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteResponse(publisherName, extensionName, questionId, responseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              questionId,
              responseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "7f8ae5e0-46b0-438f-b2e8-13e8513517bd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateResponse(response, publisherName, extensionName, questionId, responseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              questionId,
              responseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "7f8ae5e0-46b0-438f-b2e8-13e8513517bd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, response, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtensionReports(publisherName, extensionName, days, count, afterDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              days,
              count,
              afterDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "79e0c74f-157f-437e-845f-74fbb4121d4c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReviews(publisherName, extensionName, count, filterOptions, beforeDate, afterDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              count,
              filterOptions,
              beforeDate,
              afterDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "5b3f819f-f247-42ad-8c00-dd9ab9ab246d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewsResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReviewsSummary(pubName, extName, beforeDate, afterDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              pubName,
              extName
            };
            let queryValues = {
              beforeDate,
              afterDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "b7b44e21-209e-48f0-ae78-04727fc37d77", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createReview(review, pubName, extName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              pubName,
              extName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, review, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Review, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteReview(pubName, extName, reviewId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              pubName,
              extName,
              reviewId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReview(reviewPatch, pubName, extName, reviewId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              pubName,
              extName,
              reviewId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, reviewPatch, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewPatch, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createCategory(category) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "476531a3-7024-4516-a76a-ed64d3008ad6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, category, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getGalleryUserSettings(userScope, key) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              userScope,
              key
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "9b75ece3-7960-401c-848b-148ac01ca350", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setGalleryUserSettings(entries, userScope) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              userScope
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "9b75ece3-7960-401c-848b-148ac01ca350", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, entries, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      generateKey(keyType, expireCurrentSeconds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              keyType
            };
            let queryValues = {
              expireCurrentSeconds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSigningKey(keyType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              keyType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateExtensionStatistics(extensionStatisticsUpdate, publisherName, extensionName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "a0ea3204-11e9-422d-a9ca-45851cc41400", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, extensionStatisticsUpdate, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtensionDailyStats(publisherName, extensionName, days, aggregate, afterDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName
            };
            let queryValues = {
              days,
              aggregate,
              afterDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "ae06047e-51c5-4fb4-ab65-7be488544416", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getExtensionDailyStatsAnonymous(publisherName, extensionName, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4fa7adb6-ca65-4075-a232-5f28323288ea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      incrementExtensionDailyStat(publisherName, extensionName, version, statType, targetPlatform) {
        return __awaiter(this, void 0, void 0, function* () {
          if (statType == null) {
            throw new TypeError("statType can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            let queryValues = {
              statType,
              targetPlatform
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "4fa7adb6-ca65-4075-a232-5f28323288ea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVerificationLog(publisherName, extensionName, version, targetPlatform) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              publisherName,
              extensionName,
              version
            };
            let queryValues = {
              targetPlatform
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "c5523abe-b843-437f-875b-5833064efe4d", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateVSCodeWebExtensionStatistics(itemName, version, statType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              itemName,
              version,
              statType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "gallery", "205c91a8-7841-4fd3-ae4f-5a745d5a8df5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    GalleryApi.RESOURCE_AREA_ID = "69d21c00-f135-441b-b5ce-3626378e0819";
    exports.GalleryApi = GalleryApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/PolicyInterfaces.js
var require_PolicyInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/PolicyInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PolicyEvaluationStatus;
    (function(PolicyEvaluationStatus2) {
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["Queued"] = 0] = "Queued";
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["Running"] = 1] = "Running";
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["Approved"] = 2] = "Approved";
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["Rejected"] = 3] = "Rejected";
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["NotApplicable"] = 4] = "NotApplicable";
      PolicyEvaluationStatus2[PolicyEvaluationStatus2["Broken"] = 5] = "Broken";
    })(PolicyEvaluationStatus = exports.PolicyEvaluationStatus || (exports.PolicyEvaluationStatus = {}));
    exports.TypeInfo = {
      PolicyConfiguration: {},
      PolicyEvaluationRecord: {},
      PolicyEvaluationStatus: {
        enumValues: {
          "queued": 0,
          "running": 1,
          "approved": 2,
          "rejected": 3,
          "notApplicable": 4,
          "broken": 5
        }
      }
    };
    exports.TypeInfo.PolicyConfiguration.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.PolicyEvaluationRecord.fields = {
      completedDate: {
        isDate: true
      },
      configuration: {
        typeInfo: exports.TypeInfo.PolicyConfiguration
      },
      startedDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.PolicyEvaluationStatus
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/GitInterfaces.js
var require_GitInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/GitInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PolicyInterfaces = require_PolicyInterfaces();
    var TfsCoreInterfaces = require_CoreInterfaces();
    var CommentThreadStatus;
    (function(CommentThreadStatus2) {
      CommentThreadStatus2[CommentThreadStatus2["Unknown"] = 0] = "Unknown";
      CommentThreadStatus2[CommentThreadStatus2["Active"] = 1] = "Active";
      CommentThreadStatus2[CommentThreadStatus2["Fixed"] = 2] = "Fixed";
      CommentThreadStatus2[CommentThreadStatus2["WontFix"] = 3] = "WontFix";
      CommentThreadStatus2[CommentThreadStatus2["Closed"] = 4] = "Closed";
      CommentThreadStatus2[CommentThreadStatus2["ByDesign"] = 5] = "ByDesign";
      CommentThreadStatus2[CommentThreadStatus2["Pending"] = 6] = "Pending";
    })(CommentThreadStatus = exports.CommentThreadStatus || (exports.CommentThreadStatus = {}));
    var CommentType;
    (function(CommentType2) {
      CommentType2[CommentType2["Unknown"] = 0] = "Unknown";
      CommentType2[CommentType2["Text"] = 1] = "Text";
      CommentType2[CommentType2["CodeChange"] = 2] = "CodeChange";
      CommentType2[CommentType2["System"] = 3] = "System";
    })(CommentType = exports.CommentType || (exports.CommentType = {}));
    var GitAsyncOperationStatus;
    (function(GitAsyncOperationStatus2) {
      GitAsyncOperationStatus2[GitAsyncOperationStatus2["Queued"] = 1] = "Queued";
      GitAsyncOperationStatus2[GitAsyncOperationStatus2["InProgress"] = 2] = "InProgress";
      GitAsyncOperationStatus2[GitAsyncOperationStatus2["Completed"] = 3] = "Completed";
      GitAsyncOperationStatus2[GitAsyncOperationStatus2["Failed"] = 4] = "Failed";
      GitAsyncOperationStatus2[GitAsyncOperationStatus2["Abandoned"] = 5] = "Abandoned";
    })(GitAsyncOperationStatus = exports.GitAsyncOperationStatus || (exports.GitAsyncOperationStatus = {}));
    var GitAsyncRefOperationFailureStatus;
    (function(GitAsyncRefOperationFailureStatus2) {
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["None"] = 0] = "None";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["InvalidRefName"] = 1] = "InvalidRefName";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["RefNameConflict"] = 2] = "RefNameConflict";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["CreateBranchPermissionRequired"] = 3] = "CreateBranchPermissionRequired";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["WritePermissionRequired"] = 4] = "WritePermissionRequired";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["TargetBranchDeleted"] = 5] = "TargetBranchDeleted";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["GitObjectTooLarge"] = 6] = "GitObjectTooLarge";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["OperationIndentityNotFound"] = 7] = "OperationIndentityNotFound";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["AsyncOperationNotFound"] = 8] = "AsyncOperationNotFound";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["Other"] = 9] = "Other";
      GitAsyncRefOperationFailureStatus2[GitAsyncRefOperationFailureStatus2["EmptyCommitterSignature"] = 10] = "EmptyCommitterSignature";
    })(GitAsyncRefOperationFailureStatus = exports.GitAsyncRefOperationFailureStatus || (exports.GitAsyncRefOperationFailureStatus = {}));
    var GitConflictType;
    (function(GitConflictType2) {
      GitConflictType2[GitConflictType2["None"] = 0] = "None";
      GitConflictType2[GitConflictType2["AddAdd"] = 1] = "AddAdd";
      GitConflictType2[GitConflictType2["AddRename"] = 2] = "AddRename";
      GitConflictType2[GitConflictType2["DeleteEdit"] = 3] = "DeleteEdit";
      GitConflictType2[GitConflictType2["DeleteRename"] = 4] = "DeleteRename";
      GitConflictType2[GitConflictType2["DirectoryFile"] = 5] = "DirectoryFile";
      GitConflictType2[GitConflictType2["DirectoryChild"] = 6] = "DirectoryChild";
      GitConflictType2[GitConflictType2["EditDelete"] = 7] = "EditDelete";
      GitConflictType2[GitConflictType2["EditEdit"] = 8] = "EditEdit";
      GitConflictType2[GitConflictType2["FileDirectory"] = 9] = "FileDirectory";
      GitConflictType2[GitConflictType2["Rename1to2"] = 10] = "Rename1to2";
      GitConflictType2[GitConflictType2["Rename2to1"] = 11] = "Rename2to1";
      GitConflictType2[GitConflictType2["RenameAdd"] = 12] = "RenameAdd";
      GitConflictType2[GitConflictType2["RenameDelete"] = 13] = "RenameDelete";
      GitConflictType2[GitConflictType2["RenameRename"] = 14] = "RenameRename";
    })(GitConflictType = exports.GitConflictType || (exports.GitConflictType = {}));
    var GitConflictUpdateStatus;
    (function(GitConflictUpdateStatus2) {
      GitConflictUpdateStatus2[GitConflictUpdateStatus2["Succeeded"] = 0] = "Succeeded";
      GitConflictUpdateStatus2[GitConflictUpdateStatus2["BadRequest"] = 1] = "BadRequest";
      GitConflictUpdateStatus2[GitConflictUpdateStatus2["InvalidResolution"] = 2] = "InvalidResolution";
      GitConflictUpdateStatus2[GitConflictUpdateStatus2["UnsupportedConflictType"] = 3] = "UnsupportedConflictType";
      GitConflictUpdateStatus2[GitConflictUpdateStatus2["NotFound"] = 4] = "NotFound";
    })(GitConflictUpdateStatus = exports.GitConflictUpdateStatus || (exports.GitConflictUpdateStatus = {}));
    var GitHistoryMode;
    (function(GitHistoryMode2) {
      GitHistoryMode2[GitHistoryMode2["SimplifiedHistory"] = 0] = "SimplifiedHistory";
      GitHistoryMode2[GitHistoryMode2["FirstParent"] = 1] = "FirstParent";
      GitHistoryMode2[GitHistoryMode2["FullHistory"] = 2] = "FullHistory";
      GitHistoryMode2[GitHistoryMode2["FullHistorySimplifyMerges"] = 3] = "FullHistorySimplifyMerges";
    })(GitHistoryMode = exports.GitHistoryMode || (exports.GitHistoryMode = {}));
    var GitObjectType;
    (function(GitObjectType2) {
      GitObjectType2[GitObjectType2["Bad"] = 0] = "Bad";
      GitObjectType2[GitObjectType2["Commit"] = 1] = "Commit";
      GitObjectType2[GitObjectType2["Tree"] = 2] = "Tree";
      GitObjectType2[GitObjectType2["Blob"] = 3] = "Blob";
      GitObjectType2[GitObjectType2["Tag"] = 4] = "Tag";
      GitObjectType2[GitObjectType2["Ext2"] = 5] = "Ext2";
      GitObjectType2[GitObjectType2["OfsDelta"] = 6] = "OfsDelta";
      GitObjectType2[GitObjectType2["RefDelta"] = 7] = "RefDelta";
    })(GitObjectType = exports.GitObjectType || (exports.GitObjectType = {}));
    var GitPathActions;
    (function(GitPathActions2) {
      GitPathActions2[GitPathActions2["None"] = 0] = "None";
      GitPathActions2[GitPathActions2["Edit"] = 1] = "Edit";
      GitPathActions2[GitPathActions2["Delete"] = 2] = "Delete";
      GitPathActions2[GitPathActions2["Add"] = 3] = "Add";
      GitPathActions2[GitPathActions2["Rename"] = 4] = "Rename";
    })(GitPathActions = exports.GitPathActions || (exports.GitPathActions = {}));
    var GitPullRequestMergeStrategy;
    (function(GitPullRequestMergeStrategy2) {
      GitPullRequestMergeStrategy2[GitPullRequestMergeStrategy2["NoFastForward"] = 1] = "NoFastForward";
      GitPullRequestMergeStrategy2[GitPullRequestMergeStrategy2["Squash"] = 2] = "Squash";
      GitPullRequestMergeStrategy2[GitPullRequestMergeStrategy2["Rebase"] = 3] = "Rebase";
      GitPullRequestMergeStrategy2[GitPullRequestMergeStrategy2["RebaseMerge"] = 4] = "RebaseMerge";
    })(GitPullRequestMergeStrategy = exports.GitPullRequestMergeStrategy || (exports.GitPullRequestMergeStrategy = {}));
    var GitPullRequestQueryType;
    (function(GitPullRequestQueryType2) {
      GitPullRequestQueryType2[GitPullRequestQueryType2["NotSet"] = 0] = "NotSet";
      GitPullRequestQueryType2[GitPullRequestQueryType2["LastMergeCommit"] = 1] = "LastMergeCommit";
      GitPullRequestQueryType2[GitPullRequestQueryType2["Commit"] = 2] = "Commit";
    })(GitPullRequestQueryType = exports.GitPullRequestQueryType || (exports.GitPullRequestQueryType = {}));
    var GitPullRequestReviewFileType;
    (function(GitPullRequestReviewFileType2) {
      GitPullRequestReviewFileType2[GitPullRequestReviewFileType2["ChangeEntry"] = 0] = "ChangeEntry";
      GitPullRequestReviewFileType2[GitPullRequestReviewFileType2["Attachment"] = 1] = "Attachment";
    })(GitPullRequestReviewFileType = exports.GitPullRequestReviewFileType || (exports.GitPullRequestReviewFileType = {}));
    var GitRefSearchType;
    (function(GitRefSearchType2) {
      GitRefSearchType2[GitRefSearchType2["Exact"] = 0] = "Exact";
      GitRefSearchType2[GitRefSearchType2["StartsWith"] = 1] = "StartsWith";
      GitRefSearchType2[GitRefSearchType2["Contains"] = 2] = "Contains";
    })(GitRefSearchType = exports.GitRefSearchType || (exports.GitRefSearchType = {}));
    var GitRefUpdateMode;
    (function(GitRefUpdateMode2) {
      GitRefUpdateMode2[GitRefUpdateMode2["BestEffort"] = 0] = "BestEffort";
      GitRefUpdateMode2[GitRefUpdateMode2["AllOrNone"] = 1] = "AllOrNone";
    })(GitRefUpdateMode = exports.GitRefUpdateMode || (exports.GitRefUpdateMode = {}));
    var GitRefUpdateStatus;
    (function(GitRefUpdateStatus2) {
      GitRefUpdateStatus2[GitRefUpdateStatus2["Succeeded"] = 0] = "Succeeded";
      GitRefUpdateStatus2[GitRefUpdateStatus2["ForcePushRequired"] = 1] = "ForcePushRequired";
      GitRefUpdateStatus2[GitRefUpdateStatus2["StaleOldObjectId"] = 2] = "StaleOldObjectId";
      GitRefUpdateStatus2[GitRefUpdateStatus2["InvalidRefName"] = 3] = "InvalidRefName";
      GitRefUpdateStatus2[GitRefUpdateStatus2["Unprocessed"] = 4] = "Unprocessed";
      GitRefUpdateStatus2[GitRefUpdateStatus2["UnresolvableToCommit"] = 5] = "UnresolvableToCommit";
      GitRefUpdateStatus2[GitRefUpdateStatus2["WritePermissionRequired"] = 6] = "WritePermissionRequired";
      GitRefUpdateStatus2[GitRefUpdateStatus2["ManageNotePermissionRequired"] = 7] = "ManageNotePermissionRequired";
      GitRefUpdateStatus2[GitRefUpdateStatus2["CreateBranchPermissionRequired"] = 8] = "CreateBranchPermissionRequired";
      GitRefUpdateStatus2[GitRefUpdateStatus2["CreateTagPermissionRequired"] = 9] = "CreateTagPermissionRequired";
      GitRefUpdateStatus2[GitRefUpdateStatus2["RejectedByPlugin"] = 10] = "RejectedByPlugin";
      GitRefUpdateStatus2[GitRefUpdateStatus2["Locked"] = 11] = "Locked";
      GitRefUpdateStatus2[GitRefUpdateStatus2["RefNameConflict"] = 12] = "RefNameConflict";
      GitRefUpdateStatus2[GitRefUpdateStatus2["RejectedByPolicy"] = 13] = "RejectedByPolicy";
      GitRefUpdateStatus2[GitRefUpdateStatus2["SucceededNonExistentRef"] = 14] = "SucceededNonExistentRef";
      GitRefUpdateStatus2[GitRefUpdateStatus2["SucceededCorruptRef"] = 15] = "SucceededCorruptRef";
    })(GitRefUpdateStatus = exports.GitRefUpdateStatus || (exports.GitRefUpdateStatus = {}));
    var GitResolutionError;
    (function(GitResolutionError2) {
      GitResolutionError2[GitResolutionError2["None"] = 0] = "None";
      GitResolutionError2[GitResolutionError2["MergeContentNotFound"] = 1] = "MergeContentNotFound";
      GitResolutionError2[GitResolutionError2["PathInUse"] = 2] = "PathInUse";
      GitResolutionError2[GitResolutionError2["InvalidPath"] = 3] = "InvalidPath";
      GitResolutionError2[GitResolutionError2["UnknownAction"] = 4] = "UnknownAction";
      GitResolutionError2[GitResolutionError2["UnknownMergeType"] = 5] = "UnknownMergeType";
      GitResolutionError2[GitResolutionError2["OtherError"] = 255] = "OtherError";
    })(GitResolutionError = exports.GitResolutionError || (exports.GitResolutionError = {}));
    var GitResolutionMergeType;
    (function(GitResolutionMergeType2) {
      GitResolutionMergeType2[GitResolutionMergeType2["Undecided"] = 0] = "Undecided";
      GitResolutionMergeType2[GitResolutionMergeType2["TakeSourceContent"] = 1] = "TakeSourceContent";
      GitResolutionMergeType2[GitResolutionMergeType2["TakeTargetContent"] = 2] = "TakeTargetContent";
      GitResolutionMergeType2[GitResolutionMergeType2["AutoMerged"] = 3] = "AutoMerged";
      GitResolutionMergeType2[GitResolutionMergeType2["UserMerged"] = 4] = "UserMerged";
    })(GitResolutionMergeType = exports.GitResolutionMergeType || (exports.GitResolutionMergeType = {}));
    var GitResolutionPathConflictAction;
    (function(GitResolutionPathConflictAction2) {
      GitResolutionPathConflictAction2[GitResolutionPathConflictAction2["Undecided"] = 0] = "Undecided";
      GitResolutionPathConflictAction2[GitResolutionPathConflictAction2["KeepSourceRenameTarget"] = 1] = "KeepSourceRenameTarget";
      GitResolutionPathConflictAction2[GitResolutionPathConflictAction2["KeepSourceDeleteTarget"] = 2] = "KeepSourceDeleteTarget";
      GitResolutionPathConflictAction2[GitResolutionPathConflictAction2["KeepTargetRenameSource"] = 3] = "KeepTargetRenameSource";
      GitResolutionPathConflictAction2[GitResolutionPathConflictAction2["KeepTargetDeleteSource"] = 4] = "KeepTargetDeleteSource";
    })(GitResolutionPathConflictAction = exports.GitResolutionPathConflictAction || (exports.GitResolutionPathConflictAction = {}));
    var GitResolutionRename1to2Action;
    (function(GitResolutionRename1to2Action2) {
      GitResolutionRename1to2Action2[GitResolutionRename1to2Action2["Undecided"] = 0] = "Undecided";
      GitResolutionRename1to2Action2[GitResolutionRename1to2Action2["KeepSourcePath"] = 1] = "KeepSourcePath";
      GitResolutionRename1to2Action2[GitResolutionRename1to2Action2["KeepTargetPath"] = 2] = "KeepTargetPath";
      GitResolutionRename1to2Action2[GitResolutionRename1to2Action2["KeepBothFiles"] = 3] = "KeepBothFiles";
    })(GitResolutionRename1to2Action = exports.GitResolutionRename1to2Action || (exports.GitResolutionRename1to2Action = {}));
    var GitResolutionStatus;
    (function(GitResolutionStatus2) {
      GitResolutionStatus2[GitResolutionStatus2["Unresolved"] = 0] = "Unresolved";
      GitResolutionStatus2[GitResolutionStatus2["PartiallyResolved"] = 1] = "PartiallyResolved";
      GitResolutionStatus2[GitResolutionStatus2["Resolved"] = 2] = "Resolved";
    })(GitResolutionStatus = exports.GitResolutionStatus || (exports.GitResolutionStatus = {}));
    var GitResolutionWhichAction;
    (function(GitResolutionWhichAction2) {
      GitResolutionWhichAction2[GitResolutionWhichAction2["Undecided"] = 0] = "Undecided";
      GitResolutionWhichAction2[GitResolutionWhichAction2["PickSourceAction"] = 1] = "PickSourceAction";
      GitResolutionWhichAction2[GitResolutionWhichAction2["PickTargetAction"] = 2] = "PickTargetAction";
    })(GitResolutionWhichAction = exports.GitResolutionWhichAction || (exports.GitResolutionWhichAction = {}));
    var GitStatusState;
    (function(GitStatusState2) {
      GitStatusState2[GitStatusState2["NotSet"] = 0] = "NotSet";
      GitStatusState2[GitStatusState2["Pending"] = 1] = "Pending";
      GitStatusState2[GitStatusState2["Succeeded"] = 2] = "Succeeded";
      GitStatusState2[GitStatusState2["Failed"] = 3] = "Failed";
      GitStatusState2[GitStatusState2["Error"] = 4] = "Error";
      GitStatusState2[GitStatusState2["NotApplicable"] = 5] = "NotApplicable";
    })(GitStatusState = exports.GitStatusState || (exports.GitStatusState = {}));
    var GitVersionOptions;
    (function(GitVersionOptions2) {
      GitVersionOptions2[GitVersionOptions2["None"] = 0] = "None";
      GitVersionOptions2[GitVersionOptions2["PreviousChange"] = 1] = "PreviousChange";
      GitVersionOptions2[GitVersionOptions2["FirstParent"] = 2] = "FirstParent";
    })(GitVersionOptions = exports.GitVersionOptions || (exports.GitVersionOptions = {}));
    var GitVersionType;
    (function(GitVersionType2) {
      GitVersionType2[GitVersionType2["Branch"] = 0] = "Branch";
      GitVersionType2[GitVersionType2["Tag"] = 1] = "Tag";
      GitVersionType2[GitVersionType2["Commit"] = 2] = "Commit";
    })(GitVersionType = exports.GitVersionType || (exports.GitVersionType = {}));
    var ItemContentType;
    (function(ItemContentType2) {
      ItemContentType2[ItemContentType2["RawText"] = 0] = "RawText";
      ItemContentType2[ItemContentType2["Base64Encoded"] = 1] = "Base64Encoded";
    })(ItemContentType = exports.ItemContentType || (exports.ItemContentType = {}));
    var IterationReason;
    (function(IterationReason2) {
      IterationReason2[IterationReason2["Push"] = 0] = "Push";
      IterationReason2[IterationReason2["ForcePush"] = 1] = "ForcePush";
      IterationReason2[IterationReason2["Create"] = 2] = "Create";
      IterationReason2[IterationReason2["Rebase"] = 4] = "Rebase";
      IterationReason2[IterationReason2["Unknown"] = 8] = "Unknown";
      IterationReason2[IterationReason2["Retarget"] = 16] = "Retarget";
    })(IterationReason = exports.IterationReason || (exports.IterationReason = {}));
    var LineDiffBlockChangeType;
    (function(LineDiffBlockChangeType2) {
      LineDiffBlockChangeType2[LineDiffBlockChangeType2["None"] = 0] = "None";
      LineDiffBlockChangeType2[LineDiffBlockChangeType2["Add"] = 1] = "Add";
      LineDiffBlockChangeType2[LineDiffBlockChangeType2["Delete"] = 2] = "Delete";
      LineDiffBlockChangeType2[LineDiffBlockChangeType2["Edit"] = 3] = "Edit";
    })(LineDiffBlockChangeType = exports.LineDiffBlockChangeType || (exports.LineDiffBlockChangeType = {}));
    var PullRequestAsyncStatus;
    (function(PullRequestAsyncStatus2) {
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["NotSet"] = 0] = "NotSet";
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["Queued"] = 1] = "Queued";
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["Conflicts"] = 2] = "Conflicts";
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["Succeeded"] = 3] = "Succeeded";
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["RejectedByPolicy"] = 4] = "RejectedByPolicy";
      PullRequestAsyncStatus2[PullRequestAsyncStatus2["Failure"] = 5] = "Failure";
    })(PullRequestAsyncStatus = exports.PullRequestAsyncStatus || (exports.PullRequestAsyncStatus = {}));
    var PullRequestMergeFailureType;
    (function(PullRequestMergeFailureType2) {
      PullRequestMergeFailureType2[PullRequestMergeFailureType2["None"] = 0] = "None";
      PullRequestMergeFailureType2[PullRequestMergeFailureType2["Unknown"] = 1] = "Unknown";
      PullRequestMergeFailureType2[PullRequestMergeFailureType2["CaseSensitive"] = 2] = "CaseSensitive";
      PullRequestMergeFailureType2[PullRequestMergeFailureType2["ObjectTooLarge"] = 3] = "ObjectTooLarge";
    })(PullRequestMergeFailureType = exports.PullRequestMergeFailureType || (exports.PullRequestMergeFailureType = {}));
    var PullRequestStatus;
    (function(PullRequestStatus2) {
      PullRequestStatus2[PullRequestStatus2["NotSet"] = 0] = "NotSet";
      PullRequestStatus2[PullRequestStatus2["Active"] = 1] = "Active";
      PullRequestStatus2[PullRequestStatus2["Abandoned"] = 2] = "Abandoned";
      PullRequestStatus2[PullRequestStatus2["Completed"] = 3] = "Completed";
      PullRequestStatus2[PullRequestStatus2["All"] = 4] = "All";
    })(PullRequestStatus = exports.PullRequestStatus || (exports.PullRequestStatus = {}));
    var RefFavoriteType;
    (function(RefFavoriteType2) {
      RefFavoriteType2[RefFavoriteType2["Invalid"] = 0] = "Invalid";
      RefFavoriteType2[RefFavoriteType2["Folder"] = 1] = "Folder";
      RefFavoriteType2[RefFavoriteType2["Ref"] = 2] = "Ref";
    })(RefFavoriteType = exports.RefFavoriteType || (exports.RefFavoriteType = {}));
    var SupportedIdeType;
    (function(SupportedIdeType2) {
      SupportedIdeType2[SupportedIdeType2["Unknown"] = 0] = "Unknown";
      SupportedIdeType2[SupportedIdeType2["AndroidStudio"] = 1] = "AndroidStudio";
      SupportedIdeType2[SupportedIdeType2["AppCode"] = 2] = "AppCode";
      SupportedIdeType2[SupportedIdeType2["CLion"] = 3] = "CLion";
      SupportedIdeType2[SupportedIdeType2["DataGrip"] = 4] = "DataGrip";
      SupportedIdeType2[SupportedIdeType2["Eclipse"] = 13] = "Eclipse";
      SupportedIdeType2[SupportedIdeType2["IntelliJ"] = 5] = "IntelliJ";
      SupportedIdeType2[SupportedIdeType2["MPS"] = 6] = "MPS";
      SupportedIdeType2[SupportedIdeType2["PhpStorm"] = 7] = "PhpStorm";
      SupportedIdeType2[SupportedIdeType2["PyCharm"] = 8] = "PyCharm";
      SupportedIdeType2[SupportedIdeType2["RubyMine"] = 9] = "RubyMine";
      SupportedIdeType2[SupportedIdeType2["Tower"] = 10] = "Tower";
      SupportedIdeType2[SupportedIdeType2["VisualStudio"] = 11] = "VisualStudio";
      SupportedIdeType2[SupportedIdeType2["VSCode"] = 14] = "VSCode";
      SupportedIdeType2[SupportedIdeType2["WebStorm"] = 12] = "WebStorm";
    })(SupportedIdeType = exports.SupportedIdeType || (exports.SupportedIdeType = {}));
    var TfvcVersionOption;
    (function(TfvcVersionOption2) {
      TfvcVersionOption2[TfvcVersionOption2["None"] = 0] = "None";
      TfvcVersionOption2[TfvcVersionOption2["Previous"] = 1] = "Previous";
      TfvcVersionOption2[TfvcVersionOption2["UseRename"] = 2] = "UseRename";
    })(TfvcVersionOption = exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));
    var TfvcVersionType;
    (function(TfvcVersionType2) {
      TfvcVersionType2[TfvcVersionType2["None"] = 0] = "None";
      TfvcVersionType2[TfvcVersionType2["Changeset"] = 1] = "Changeset";
      TfvcVersionType2[TfvcVersionType2["Shelveset"] = 2] = "Shelveset";
      TfvcVersionType2[TfvcVersionType2["Change"] = 3] = "Change";
      TfvcVersionType2[TfvcVersionType2["Date"] = 4] = "Date";
      TfvcVersionType2[TfvcVersionType2["Latest"] = 5] = "Latest";
      TfvcVersionType2[TfvcVersionType2["Tip"] = 6] = "Tip";
      TfvcVersionType2[TfvcVersionType2["MergeSource"] = 7] = "MergeSource";
    })(TfvcVersionType = exports.TfvcVersionType || (exports.TfvcVersionType = {}));
    var VersionControlChangeType;
    (function(VersionControlChangeType2) {
      VersionControlChangeType2[VersionControlChangeType2["None"] = 0] = "None";
      VersionControlChangeType2[VersionControlChangeType2["Add"] = 1] = "Add";
      VersionControlChangeType2[VersionControlChangeType2["Edit"] = 2] = "Edit";
      VersionControlChangeType2[VersionControlChangeType2["Encoding"] = 4] = "Encoding";
      VersionControlChangeType2[VersionControlChangeType2["Rename"] = 8] = "Rename";
      VersionControlChangeType2[VersionControlChangeType2["Delete"] = 16] = "Delete";
      VersionControlChangeType2[VersionControlChangeType2["Undelete"] = 32] = "Undelete";
      VersionControlChangeType2[VersionControlChangeType2["Branch"] = 64] = "Branch";
      VersionControlChangeType2[VersionControlChangeType2["Merge"] = 128] = "Merge";
      VersionControlChangeType2[VersionControlChangeType2["Lock"] = 256] = "Lock";
      VersionControlChangeType2[VersionControlChangeType2["Rollback"] = 512] = "Rollback";
      VersionControlChangeType2[VersionControlChangeType2["SourceRename"] = 1024] = "SourceRename";
      VersionControlChangeType2[VersionControlChangeType2["TargetRename"] = 2048] = "TargetRename";
      VersionControlChangeType2[VersionControlChangeType2["Property"] = 4096] = "Property";
      VersionControlChangeType2[VersionControlChangeType2["All"] = 8191] = "All";
    })(VersionControlChangeType = exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));
    var VersionControlRecursionType;
    (function(VersionControlRecursionType2) {
      VersionControlRecursionType2[VersionControlRecursionType2["None"] = 0] = "None";
      VersionControlRecursionType2[VersionControlRecursionType2["OneLevel"] = 1] = "OneLevel";
      VersionControlRecursionType2[VersionControlRecursionType2["OneLevelPlusNestedEmptyFolders"] = 4] = "OneLevelPlusNestedEmptyFolders";
      VersionControlRecursionType2[VersionControlRecursionType2["Full"] = 120] = "Full";
    })(VersionControlRecursionType = exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));
    exports.TypeInfo = {
      Attachment: {},
      Change: {},
      ChangeList: {},
      Comment: {},
      CommentThread: {},
      CommentThreadStatus: {
        enumValues: {
          "unknown": 0,
          "active": 1,
          "fixed": 2,
          "wontFix": 3,
          "closed": 4,
          "byDesign": 5,
          "pending": 6
        }
      },
      CommentType: {
        enumValues: {
          "unknown": 0,
          "text": 1,
          "codeChange": 2,
          "system": 3
        }
      },
      FileDiff: {},
      GitAnnotatedTag: {},
      GitAsyncOperationStatus: {
        enumValues: {
          "queued": 1,
          "inProgress": 2,
          "completed": 3,
          "failed": 4,
          "abandoned": 5
        }
      },
      GitAsyncRefOperation: {},
      GitAsyncRefOperationDetail: {},
      GitAsyncRefOperationFailureStatus: {
        enumValues: {
          "none": 0,
          "invalidRefName": 1,
          "refNameConflict": 2,
          "createBranchPermissionRequired": 3,
          "writePermissionRequired": 4,
          "targetBranchDeleted": 5,
          "gitObjectTooLarge": 6,
          "operationIndentityNotFound": 7,
          "asyncOperationNotFound": 8,
          "other": 9,
          "emptyCommitterSignature": 10
        }
      },
      GitAsyncRefOperationParameters: {},
      GitAsyncRefOperationSource: {},
      GitBaseVersionDescriptor: {},
      GitBranchStats: {},
      GitChange: {},
      GitCherryPick: {},
      GitCommit: {},
      GitCommitChanges: {},
      GitCommitDiffs: {},
      GitCommitRef: {},
      GitCommitToCreate: {},
      GitConflict: {},
      GitConflictAddAdd: {},
      GitConflictAddRename: {},
      GitConflictDeleteEdit: {},
      GitConflictDeleteRename: {},
      GitConflictDirectoryFile: {},
      GitConflictEditDelete: {},
      GitConflictEditEdit: {},
      GitConflictFileDirectory: {},
      GitConflictRename1to2: {},
      GitConflictRename2to1: {},
      GitConflictRenameAdd: {},
      GitConflictRenameDelete: {},
      GitConflictRenameRename: {},
      GitConflictType: {
        enumValues: {
          "none": 0,
          "addAdd": 1,
          "addRename": 2,
          "deleteEdit": 3,
          "deleteRename": 4,
          "directoryFile": 5,
          "directoryChild": 6,
          "editDelete": 7,
          "editEdit": 8,
          "fileDirectory": 9,
          "rename1to2": 10,
          "rename2to1": 11,
          "renameAdd": 12,
          "renameDelete": 13,
          "renameRename": 14
        }
      },
      GitConflictUpdateResult: {},
      GitConflictUpdateStatus: {
        enumValues: {
          "succeeded": 0,
          "badRequest": 1,
          "invalidResolution": 2,
          "unsupportedConflictType": 3,
          "notFound": 4
        }
      },
      GitDeletedRepository: {},
      GitForkRef: {},
      GitForkSyncRequest: {},
      GitForkTeamProjectReference: {},
      GitHistoryMode: {
        enumValues: {
          "simplifiedHistory": 0,
          "firstParent": 1,
          "fullHistory": 2,
          "fullHistorySimplifyMerges": 3
        }
      },
      GitImportFailedEvent: {},
      GitImportRequest: {},
      GitImportSucceededEvent: {},
      GitItem: {},
      GitItemDescriptor: {},
      GitItemRequestData: {},
      GitLastChangeTreeItems: {},
      GitMerge: {},
      GitObject: {},
      GitObjectType: {
        enumValues: {
          "bad": 0,
          "commit": 1,
          "tree": 2,
          "blob": 3,
          "tag": 4,
          "ext2": 5,
          "ofsDelta": 6,
          "refDelta": 7
        }
      },
      GitPathAction: {},
      GitPathActions: {
        enumValues: {
          "none": 0,
          "edit": 1,
          "delete": 2,
          "add": 3,
          "rename": 4
        }
      },
      GitPathToItemsCollection: {},
      GitPolicyConfigurationResponse: {},
      GitPullRequest: {},
      GitPullRequestChange: {},
      GitPullRequestCommentThread: {},
      GitPullRequestCompletionOptions: {},
      GitPullRequestIteration: {},
      GitPullRequestIterationChanges: {},
      GitPullRequestMergeStrategy: {
        enumValues: {
          "noFastForward": 1,
          "squash": 2,
          "rebase": 3,
          "rebaseMerge": 4
        }
      },
      GitPullRequestQuery: {},
      GitPullRequestQueryInput: {},
      GitPullRequestQueryType: {
        enumValues: {
          "notSet": 0,
          "lastMergeCommit": 1,
          "commit": 2
        }
      },
      GitPullRequestReviewFileType: {
        enumValues: {
          "changeEntry": 0,
          "attachment": 1
        }
      },
      GitPullRequestSearchCriteria: {},
      GitPullRequestStatus: {},
      GitPush: {},
      GitPushEventData: {},
      GitPushRef: {},
      GitPushSearchCriteria: {},
      GitQueryBranchStatsCriteria: {},
      GitQueryCommitsCriteria: {},
      GitQueryRefsCriteria: {},
      GitRef: {},
      GitRefFavorite: {},
      GitRefSearchType: {
        enumValues: {
          "exact": 0,
          "startsWith": 1,
          "contains": 2
        }
      },
      GitRefUpdateMode: {
        enumValues: {
          "bestEffort": 0,
          "allOrNone": 1
        }
      },
      GitRefUpdateResult: {},
      GitRefUpdateStatus: {
        enumValues: {
          "succeeded": 0,
          "forcePushRequired": 1,
          "staleOldObjectId": 2,
          "invalidRefName": 3,
          "unprocessed": 4,
          "unresolvableToCommit": 5,
          "writePermissionRequired": 6,
          "manageNotePermissionRequired": 7,
          "createBranchPermissionRequired": 8,
          "createTagPermissionRequired": 9,
          "rejectedByPlugin": 10,
          "locked": 11,
          "refNameConflict": 12,
          "rejectedByPolicy": 13,
          "succeededNonExistentRef": 14,
          "succeededCorruptRef": 15
        }
      },
      GitRepository: {},
      GitRepositoryCreateOptions: {},
      GitRepositoryRef: {},
      GitResolutionError: {
        enumValues: {
          "none": 0,
          "mergeContentNotFound": 1,
          "pathInUse": 2,
          "invalidPath": 3,
          "unknownAction": 4,
          "unknownMergeType": 5,
          "otherError": 255
        }
      },
      GitResolutionMergeContent: {},
      GitResolutionMergeType: {
        enumValues: {
          "undecided": 0,
          "takeSourceContent": 1,
          "takeTargetContent": 2,
          "autoMerged": 3,
          "userMerged": 4
        }
      },
      GitResolutionPathConflict: {},
      GitResolutionPathConflictAction: {
        enumValues: {
          "undecided": 0,
          "keepSourceRenameTarget": 1,
          "keepSourceDeleteTarget": 2,
          "keepTargetRenameSource": 3,
          "keepTargetDeleteSource": 4
        }
      },
      GitResolutionPickOneAction: {},
      GitResolutionRename1to2: {},
      GitResolutionRename1to2Action: {
        enumValues: {
          "undecided": 0,
          "keepSourcePath": 1,
          "keepTargetPath": 2,
          "keepBothFiles": 3
        }
      },
      GitResolutionStatus: {
        enumValues: {
          "unresolved": 0,
          "partiallyResolved": 1,
          "resolved": 2
        }
      },
      GitResolutionWhichAction: {
        enumValues: {
          "undecided": 0,
          "pickSourceAction": 1,
          "pickTargetAction": 2
        }
      },
      GitRevert: {},
      GitStatus: {},
      GitStatusState: {
        enumValues: {
          "notSet": 0,
          "pending": 1,
          "succeeded": 2,
          "failed": 3,
          "error": 4,
          "notApplicable": 5
        }
      },
      GitTargetVersionDescriptor: {},
      GitTreeDiff: {},
      GitTreeDiffEntry: {},
      GitTreeDiffResponse: {},
      GitTreeEntryRef: {},
      GitTreeRef: {},
      GitUserDate: {},
      GitVersionDescriptor: {},
      GitVersionOptions: {
        enumValues: {
          "none": 0,
          "previousChange": 1,
          "firstParent": 2
        }
      },
      GitVersionType: {
        enumValues: {
          "branch": 0,
          "tag": 1,
          "commit": 2
        }
      },
      HistoryEntry: {},
      IncludedGitCommit: {},
      ItemContent: {},
      ItemContentType: {
        enumValues: {
          "rawText": 0,
          "base64Encoded": 1
        }
      },
      ItemDetailsOptions: {},
      IterationReason: {
        enumValues: {
          "push": 0,
          "forcePush": 1,
          "create": 2,
          "rebase": 4,
          "unknown": 8,
          "retarget": 16
        }
      },
      LineDiffBlock: {},
      LineDiffBlockChangeType: {
        enumValues: {
          "none": 0,
          "add": 1,
          "delete": 2,
          "edit": 3
        }
      },
      PullRequestAsyncStatus: {
        enumValues: {
          "notSet": 0,
          "queued": 1,
          "conflicts": 2,
          "succeeded": 3,
          "rejectedByPolicy": 4,
          "failure": 5
        }
      },
      PullRequestMergeFailureType: {
        enumValues: {
          "none": 0,
          "unknown": 1,
          "caseSensitive": 2,
          "objectTooLarge": 3
        }
      },
      PullRequestStatus: {
        enumValues: {
          "notSet": 0,
          "active": 1,
          "abandoned": 2,
          "completed": 3,
          "all": 4
        }
      },
      RefFavoriteType: {
        enumValues: {
          "invalid": 0,
          "folder": 1,
          "ref": 2
        }
      },
      SupportedIde: {},
      SupportedIdeType: {
        enumValues: {
          "unknown": 0,
          "androidStudio": 1,
          "appCode": 2,
          "cLion": 3,
          "dataGrip": 4,
          "eclipse": 13,
          "intelliJ": 5,
          "mps": 6,
          "phpStorm": 7,
          "pyCharm": 8,
          "rubyMine": 9,
          "tower": 10,
          "visualStudio": 11,
          "vsCode": 14,
          "webStorm": 12
        }
      },
      TfvcBranch: {},
      TfvcBranchRef: {},
      TfvcChange: {},
      TfvcChangeset: {},
      TfvcChangesetRef: {},
      TfvcCheckinEventData: {},
      TfvcHistoryEntry: {},
      TfvcItem: {},
      TfvcItemDescriptor: {},
      TfvcItemPreviousHash: {},
      TfvcItemRequestData: {},
      TfvcLabel: {},
      TfvcLabelRef: {},
      TfvcShelveset: {},
      TfvcShelvesetRef: {},
      TfvcVersionDescriptor: {},
      TfvcVersionOption: {
        enumValues: {
          "none": 0,
          "previous": 1,
          "useRename": 2
        }
      },
      TfvcVersionType: {
        enumValues: {
          "none": 0,
          "changeset": 1,
          "shelveset": 2,
          "change": 3,
          "date": 4,
          "latest": 5,
          "tip": 6,
          "mergeSource": 7
        }
      },
      UpdateRefsRequest: {},
      VersionControlChangeType: {
        enumValues: {
          "none": 0,
          "add": 1,
          "edit": 2,
          "encoding": 4,
          "rename": 8,
          "delete": 16,
          "undelete": 32,
          "branch": 64,
          "merge": 128,
          "lock": 256,
          "rollback": 512,
          "sourceRename": 1024,
          "targetRename": 2048,
          "property": 4096,
          "all": 8191
        }
      },
      VersionControlProjectInfo: {},
      VersionControlRecursionType: {
        enumValues: {
          "none": 0,
          "oneLevel": 1,
          "oneLevelPlusNestedEmptyFolders": 4,
          "full": 120
        }
      }
    };
    exports.TypeInfo.Attachment.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.Change.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.ChangeList.fields = {
      changeCounts: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.VersionControlChangeType
      },
      creationDate: {
        isDate: true
      },
      sortDate: {
        isDate: true
      }
    };
    exports.TypeInfo.Comment.fields = {
      commentType: {
        enumType: exports.TypeInfo.CommentType
      },
      lastContentUpdatedDate: {
        isDate: true
      },
      lastUpdatedDate: {
        isDate: true
      },
      publishedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.CommentThread.fields = {
      comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.Comment
      },
      lastUpdatedDate: {
        isDate: true
      },
      publishedDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.CommentThreadStatus
      }
    };
    exports.TypeInfo.FileDiff.fields = {
      lineDiffBlocks: {
        isArray: true,
        typeInfo: exports.TypeInfo.LineDiffBlock
      }
    };
    exports.TypeInfo.GitAnnotatedTag.fields = {
      taggedBy: {
        typeInfo: exports.TypeInfo.GitUserDate
      },
      taggedObject: {
        typeInfo: exports.TypeInfo.GitObject
      }
    };
    exports.TypeInfo.GitAsyncRefOperation.fields = {
      detailedStatus: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail
      },
      parameters: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters
      },
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitAsyncRefOperationDetail.fields = {
      status: {
        enumType: exports.TypeInfo.GitAsyncRefOperationFailureStatus
      }
    };
    exports.TypeInfo.GitAsyncRefOperationParameters.fields = {
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      },
      source: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationSource
      }
    };
    exports.TypeInfo.GitAsyncRefOperationSource.fields = {
      commitList: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
      }
    };
    exports.TypeInfo.GitBaseVersionDescriptor.fields = {
      baseVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      baseVersionType: {
        enumType: exports.TypeInfo.GitVersionType
      },
      versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      versionType: {
        enumType: exports.TypeInfo.GitVersionType
      }
    };
    exports.TypeInfo.GitBranchStats.fields = {
      commit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      }
    };
    exports.TypeInfo.GitChange.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.GitCherryPick.fields = {
      detailedStatus: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail
      },
      parameters: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters
      },
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitCommit.fields = {
      author: {
        typeInfo: exports.TypeInfo.GitUserDate
      },
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
      },
      committer: {
        typeInfo: exports.TypeInfo.GitUserDate
      },
      push: {
        typeInfo: exports.TypeInfo.GitPushRef
      },
      statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
      }
    };
    exports.TypeInfo.GitCommitChanges.fields = {
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
      }
    };
    exports.TypeInfo.GitCommitDiffs.fields = {
      changeCounts: {
        isDictionary: true,
        dictionaryKeyEnumType: exports.TypeInfo.VersionControlChangeType
      },
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
      }
    };
    exports.TypeInfo.GitCommitRef.fields = {
      author: {
        typeInfo: exports.TypeInfo.GitUserDate
      },
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
      },
      committer: {
        typeInfo: exports.TypeInfo.GitUserDate
      },
      push: {
        typeInfo: exports.TypeInfo.GitPushRef
      },
      statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
      }
    };
    exports.TypeInfo.GitCommitToCreate.fields = {
      baseRef: {
        typeInfo: exports.TypeInfo.GitRef
      },
      pathActions: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPathAction
      }
    };
    exports.TypeInfo.GitConflict.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictAddAdd.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionMergeContent
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictAddRename.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPathConflict
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictDeleteEdit.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPickOneAction
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictDeleteRename.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPickOneAction
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictDirectoryFile.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPathConflict
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      },
      sourceTree: {
        typeInfo: exports.TypeInfo.GitTreeRef
      }
    };
    exports.TypeInfo.GitConflictEditDelete.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPickOneAction
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictEditEdit.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionMergeContent
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictFileDirectory.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPathConflict
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      },
      targetTree: {
        typeInfo: exports.TypeInfo.GitTreeRef
      }
    };
    exports.TypeInfo.GitConflictRename1to2.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionRename1to2
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictRename2to1.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPathConflict
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictRenameAdd.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPathConflict
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictRenameDelete.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionPickOneAction
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictRenameRename.fields = {
      conflictType: {
        enumType: exports.TypeInfo.GitConflictType
      },
      mergeBaseCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      resolution: {
        typeInfo: exports.TypeInfo.GitResolutionMergeContent
      },
      resolutionError: {
        enumType: exports.TypeInfo.GitResolutionError
      },
      resolutionStatus: {
        enumType: exports.TypeInfo.GitResolutionStatus
      },
      resolvedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitConflictUpdateResult.fields = {
      updatedConflict: {
        typeInfo: exports.TypeInfo.GitConflict
      },
      updateStatus: {
        enumType: exports.TypeInfo.GitConflictUpdateStatus
      }
    };
    exports.TypeInfo.GitDeletedRepository.fields = {
      createdDate: {
        isDate: true
      },
      deletedDate: {
        isDate: true
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GitForkRef.fields = {
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      },
      statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
      }
    };
    exports.TypeInfo.GitForkSyncRequest.fields = {
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitForkTeamProjectReference.fields = {
      lastUpdateTime: {
        isDate: true
      },
      visibility: {
        enumType: TfsCoreInterfaces.TypeInfo.ProjectVisibility
      }
    };
    exports.TypeInfo.GitImportFailedEvent.fields = {
      targetRepository: {
        typeInfo: exports.TypeInfo.GitRepository
      }
    };
    exports.TypeInfo.GitImportRequest.fields = {
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      },
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitImportSucceededEvent.fields = {
      targetRepository: {
        typeInfo: exports.TypeInfo.GitRepository
      }
    };
    exports.TypeInfo.GitItem.fields = {
      gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
      },
      latestProcessedChange: {
        typeInfo: exports.TypeInfo.GitCommitRef
      }
    };
    exports.TypeInfo.GitItemDescriptor.fields = {
      recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
      },
      versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      versionType: {
        enumType: exports.TypeInfo.GitVersionType
      }
    };
    exports.TypeInfo.GitItemRequestData.fields = {
      itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitItemDescriptor
      }
    };
    exports.TypeInfo.GitLastChangeTreeItems.fields = {
      commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      lastExploredTime: {
        isDate: true
      }
    };
    exports.TypeInfo.GitMerge.fields = {
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitObject.fields = {
      objectType: {
        enumType: exports.TypeInfo.GitObjectType
      }
    };
    exports.TypeInfo.GitPathAction.fields = {
      action: {
        enumType: exports.TypeInfo.GitPathActions
      }
    };
    exports.TypeInfo.GitPathToItemsCollection.fields = {
      items: {
        isDictionary: true,
        dictionaryValueFieldInfo: {
          isArray: true,
          typeInfo: exports.TypeInfo.GitItem
        }
      }
    };
    exports.TypeInfo.GitPolicyConfigurationResponse.fields = {
      policyConfigurations: {
        isArray: true,
        typeInfo: PolicyInterfaces.TypeInfo.PolicyConfiguration
      }
    };
    exports.TypeInfo.GitPullRequest.fields = {
      closedDate: {
        isDate: true
      },
      commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      completionOptions: {
        typeInfo: exports.TypeInfo.GitPullRequestCompletionOptions
      },
      completionQueueTime: {
        isDate: true
      },
      creationDate: {
        isDate: true
      },
      forkSource: {
        typeInfo: exports.TypeInfo.GitForkRef
      },
      lastMergeCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      lastMergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      lastMergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      mergeFailureType: {
        enumType: exports.TypeInfo.PullRequestMergeFailureType
      },
      mergeStatus: {
        enumType: exports.TypeInfo.PullRequestAsyncStatus
      },
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      },
      status: {
        enumType: exports.TypeInfo.PullRequestStatus
      }
    };
    exports.TypeInfo.GitPullRequestChange.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.GitPullRequestCommentThread.fields = {
      comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.Comment
      },
      lastUpdatedDate: {
        isDate: true
      },
      publishedDate: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.CommentThreadStatus
      }
    };
    exports.TypeInfo.GitPullRequestCompletionOptions.fields = {
      mergeStrategy: {
        enumType: exports.TypeInfo.GitPullRequestMergeStrategy
      }
    };
    exports.TypeInfo.GitPullRequestIteration.fields = {
      changeList: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestChange
      },
      commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      commonRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      createdDate: {
        isDate: true
      },
      push: {
        typeInfo: exports.TypeInfo.GitPushRef
      },
      reason: {
        enumType: exports.TypeInfo.IterationReason
      },
      sourceRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      targetRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitPullRequestIterationChanges.fields = {
      changeEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestChange
      }
    };
    exports.TypeInfo.GitPullRequestQuery.fields = {
      queries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestQueryInput
      }
    };
    exports.TypeInfo.GitPullRequestQueryInput.fields = {
      type: {
        enumType: exports.TypeInfo.GitPullRequestQueryType
      }
    };
    exports.TypeInfo.GitPullRequestSearchCriteria.fields = {
      status: {
        enumType: exports.TypeInfo.PullRequestStatus
      }
    };
    exports.TypeInfo.GitPullRequestStatus.fields = {
      creationDate: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.GitStatusState
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitPush.fields = {
      commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
      },
      date: {
        isDate: true
      },
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      }
    };
    exports.TypeInfo.GitPushEventData.fields = {
      commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommit
      },
      repository: {
        typeInfo: exports.TypeInfo.GitRepository
      }
    };
    exports.TypeInfo.GitPushRef.fields = {
      date: {
        isDate: true
      }
    };
    exports.TypeInfo.GitPushSearchCriteria.fields = {
      fromDate: {
        isDate: true
      },
      toDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitQueryBranchStatsCriteria.fields = {
      baseCommit: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
      },
      targetCommits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitVersionDescriptor
      }
    };
    exports.TypeInfo.GitQueryCommitsCriteria.fields = {
      compareVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
      },
      historyMode: {
        enumType: exports.TypeInfo.GitHistoryMode
      },
      itemVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
      }
    };
    exports.TypeInfo.GitQueryRefsCriteria.fields = {
      searchType: {
        enumType: exports.TypeInfo.GitRefSearchType
      }
    };
    exports.TypeInfo.GitRef.fields = {
      statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
      }
    };
    exports.TypeInfo.GitRefFavorite.fields = {
      type: {
        enumType: exports.TypeInfo.RefFavoriteType
      }
    };
    exports.TypeInfo.GitRefUpdateResult.fields = {
      updateStatus: {
        enumType: exports.TypeInfo.GitRefUpdateStatus
      }
    };
    exports.TypeInfo.GitRepository.fields = {
      parentRepository: {
        typeInfo: exports.TypeInfo.GitRepositoryRef
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GitRepositoryCreateOptions.fields = {
      parentRepository: {
        typeInfo: exports.TypeInfo.GitRepositoryRef
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GitRepositoryRef.fields = {
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GitResolutionMergeContent.fields = {
      mergeType: {
        enumType: exports.TypeInfo.GitResolutionMergeType
      }
    };
    exports.TypeInfo.GitResolutionPathConflict.fields = {
      action: {
        enumType: exports.TypeInfo.GitResolutionPathConflictAction
      }
    };
    exports.TypeInfo.GitResolutionPickOneAction.fields = {
      action: {
        enumType: exports.TypeInfo.GitResolutionWhichAction
      }
    };
    exports.TypeInfo.GitResolutionRename1to2.fields = {
      action: {
        enumType: exports.TypeInfo.GitResolutionRename1to2Action
      },
      mergeType: {
        enumType: exports.TypeInfo.GitResolutionMergeType
      }
    };
    exports.TypeInfo.GitRevert.fields = {
      detailedStatus: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail
      },
      parameters: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters
      },
      status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
      }
    };
    exports.TypeInfo.GitStatus.fields = {
      creationDate: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.GitStatusState
      },
      updatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GitTargetVersionDescriptor.fields = {
      targetVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      targetVersionType: {
        enumType: exports.TypeInfo.GitVersionType
      },
      versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      versionType: {
        enumType: exports.TypeInfo.GitVersionType
      }
    };
    exports.TypeInfo.GitTreeDiff.fields = {
      diffEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitTreeDiffEntry
      }
    };
    exports.TypeInfo.GitTreeDiffEntry.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      objectType: {
        enumType: exports.TypeInfo.GitObjectType
      }
    };
    exports.TypeInfo.GitTreeDiffResponse.fields = {
      treeDiff: {
        typeInfo: exports.TypeInfo.GitTreeDiff
      }
    };
    exports.TypeInfo.GitTreeEntryRef.fields = {
      gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
      }
    };
    exports.TypeInfo.GitTreeRef.fields = {
      treeEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitTreeEntryRef
      }
    };
    exports.TypeInfo.GitUserDate.fields = {
      date: {
        isDate: true
      }
    };
    exports.TypeInfo.GitVersionDescriptor.fields = {
      versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
      },
      versionType: {
        enumType: exports.TypeInfo.GitVersionType
      }
    };
    exports.TypeInfo.HistoryEntry.fields = {
      itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      }
    };
    exports.TypeInfo.IncludedGitCommit.fields = {
      commitTime: {
        isDate: true
      }
    };
    exports.TypeInfo.ItemContent.fields = {
      contentType: {
        enumType: exports.TypeInfo.ItemContentType
      }
    };
    exports.TypeInfo.ItemDetailsOptions.fields = {
      recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
      }
    };
    exports.TypeInfo.LineDiffBlock.fields = {
      changeType: {
        enumType: exports.TypeInfo.LineDiffBlockChangeType
      }
    };
    exports.TypeInfo.SupportedIde.fields = {
      ideType: {
        enumType: exports.TypeInfo.SupportedIdeType
      }
    };
    exports.TypeInfo.TfvcBranch.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranch
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcBranchRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcChange.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.TfvcChangeset.fields = {
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcChangesetRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcCheckinEventData.fields = {
      changeset: {
        typeInfo: exports.TypeInfo.TfvcChangeset
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.TfvcHistoryEntry.fields = {
      itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      }
    };
    exports.TypeInfo.TfvcItem.fields = {
      changeDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcItemDescriptor.fields = {
      recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
      },
      versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
      },
      versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
      }
    };
    exports.TypeInfo.TfvcItemPreviousHash.fields = {
      changeDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcItemRequestData.fields = {
      itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItemDescriptor
      }
    };
    exports.TypeInfo.TfvcLabel.fields = {
      items: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItem
      },
      modifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcLabelRef.fields = {
      modifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcShelveset.fields = {
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcShelvesetRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcVersionDescriptor.fields = {
      versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
      },
      versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
      }
    };
    exports.TypeInfo.UpdateRefsRequest.fields = {
      updateMode: {
        enumType: exports.TypeInfo.GitRefUpdateMode
      }
    };
    exports.TypeInfo.VersionControlProjectInfo.fields = {
      defaultSourceControlType: {
        enumType: TfsCoreInterfaces.TypeInfo.SourceControlTypes
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
  }
});

// node_modules/azure-devops-node-api/GitApi.js
var require_GitApi = __commonJS({
  "node_modules/azure-devops-node-api/GitApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var GitInterfaces = require_GitInterfaces();
    var GitApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Git-api", options);
      }
      createAnnotatedTag(tagObject, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5e8a8081-3851-4626-b677-9891cc04102e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, tagObject, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAnnotatedTag(project, repositoryId, objectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              objectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5e8a8081-3851-4626-b677-9891cc04102e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBlob(repositoryId, sha1, project, download, fileName, resolveLfs) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              sha1
            };
            let queryValues = {
              download,
              fileName,
              resolveLfs
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBlobContent(repositoryId, sha1, project, download, fileName, resolveLfs) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              sha1
            };
            let queryValues = {
              download,
              fileName,
              resolveLfs
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBlobsZip(blobIds, repositoryId, project, filename) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              filename
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBlobZip(repositoryId, sha1, project, download, fileName, resolveLfs) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              sha1
            };
            let queryValues = {
              download,
              fileName,
              resolveLfs
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBranch(repositoryId, name, project, baseVersionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          if (name == null) {
            throw new TypeError("name can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              name,
              baseVersionDescriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBranches(repositoryId, project, baseVersionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              baseVersionDescriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBranchStatsBatch(searchCriteria, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, searchCriteria, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChanges(commitId, repositoryId, project, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              commitId,
              repositoryId
            };
            let queryValues = {
              top,
              skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5bf884f5-3e07-42e9-afb8-1b872267bf16", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitChanges, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCherryPickConflict(repositoryId, cherryPickId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              cherryPickId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1fe5aab2-d4c0-4b2f-a030-f3831e7aca26", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCherryPickConflicts(repositoryId, cherryPickId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              cherryPickId
            };
            let queryValues = {
              continuationToken,
              "$top": top,
              excludeResolved,
              onlyResolved,
              includeObsolete
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1fe5aab2-d4c0-4b2f-a030-f3831e7aca26", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateCherryPickConflict(conflict, repositoryId, cherryPickId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              cherryPickId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1fe5aab2-d4c0-4b2f-a030-f3831e7aca26", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflict, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateCherryPickConflicts(conflictUpdates, repositoryId, cherryPickId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              cherryPickId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1fe5aab2-d4c0-4b2f-a030-f3831e7aca26", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflictUpdates, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCherryPickRelationships(repositoryNameOrId, commitId, project, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId,
              commitId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "8af142a4-27c2-4168-9e82-46b8629aaa0d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createCherryPick(cherryPickToCreate, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, cherryPickToCreate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCherryPick(project, cherryPickId, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              cherryPickId,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCherryPickForRefName(project, repositoryId, refName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (refName == null) {
            throw new TypeError("refName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              refName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommitDiffs(repositoryId, project, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              diffCommonCommit,
              "$top": top,
              "$skip": skip
            };
            if (baseVersionDescriptor) {
              queryValues.baseVersionType = baseVersionDescriptor.versionType;
              queryValues.baseVersion = baseVersionDescriptor.version;
              queryValues.baseVersionOptions = baseVersionDescriptor.versionOptions;
            }
            if (targetVersionDescriptor) {
              queryValues.targetVersionType = targetVersionDescriptor.versionType;
              queryValues.targetVersion = targetVersionDescriptor.version;
              queryValues.targetVersionOptions = targetVersionDescriptor.versionOptions;
            }
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "615588d5-c0c7-4b88-88f8-e625306446e8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitDiffs, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommit(commitId, repositoryId, project, changeCount) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              commitId,
              repositoryId
            };
            let queryValues = {
              changeCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommit, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommits(repositoryId, searchCriteria, project, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          if (searchCriteria == null) {
            throw new TypeError("searchCriteria can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              searchCriteria,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPushCommits(repositoryId, pushId, project, top, skip, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          if (pushId == null) {
            throw new TypeError("pushId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              pushId,
              top,
              skip,
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommitsBatch(searchCriteria, repositoryId, project, skip, top, includeStatuses) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              "$skip": skip,
              "$top": top,
              includeStatuses
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "6400dfb2-0bcb-462b-b992-5a57f8f1416c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, searchCriteria, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeletedRepositories(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "2b6869c4-cb25-42b5-b7a3-0d3e6be0a11a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFileDiffs(fileDiffsCriteria, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "c4c5a7e6-e9f3-4730-a92b-84baacff694b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, fileDiffsCriteria, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.FileDiff, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getForks(repositoryNameOrId, collectionId, project, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId,
              collectionId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "158c0340-bf6f-489c-9625-d572a1480d57", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepositoryRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createForkSyncRequest(syncParams, repositoryNameOrId, project, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1703f858-b9d1-46af-ab62-483e9e1055b5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, syncParams, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getForkSyncRequest(repositoryNameOrId, forkSyncOperationId, project, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId,
              forkSyncOperationId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1703f858-b9d1-46af-ab62-483e9e1055b5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getForkSyncRequests(repositoryNameOrId, project, includeAbandoned, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId
            };
            let queryValues = {
              includeAbandoned,
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "1703f858-b9d1-46af-ab62-483e9e1055b5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createImportRequest(importRequest, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, importRequest, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getImportRequest(project, repositoryId, importRequestId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              importRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryImportRequests(project, repositoryId, includeAbandoned) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              includeAbandoned
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateImportRequest(importRequestToUpdate, project, repositoryId, importRequestId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              importRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, importRequestToUpdate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItem(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              path,
              scopePath,
              recursionLevel,
              includeContentMetadata,
              latestProcessedChange,
              download,
              versionDescriptor,
              includeContent,
              resolveLfs,
              sanitize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemContent(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              path,
              scopePath,
              recursionLevel,
              includeContentMetadata,
              latestProcessedChange,
              download,
              versionDescriptor,
              includeContent,
              resolveLfs,
              sanitize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItems(repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              scopePath,
              recursionLevel,
              includeContentMetadata,
              latestProcessedChange,
              download,
              includeLinks,
              versionDescriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemText(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              path,
              scopePath,
              recursionLevel,
              includeContentMetadata,
              latestProcessedChange,
              download,
              versionDescriptor,
              includeContent,
              resolveLfs,
              sanitize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemZip(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              path,
              scopePath,
              recursionLevel,
              includeContentMetadata,
              latestProcessedChange,
              download,
              versionDescriptor,
              includeContent,
              resolveLfs,
              sanitize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemsBatch(requestData, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "630fd2e4-fb88-4f85-ad21-13f3fd1fbca9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, requestData, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getMergeBases(repositoryNameOrId, commitId, otherCommitId, project, otherCollectionId, otherRepositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (otherCommitId == null) {
            throw new TypeError("otherCommitId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId,
              commitId
            };
            let queryValues = {
              otherCommitId,
              otherCollectionId,
              otherRepositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "7cf2abb6-c964-4f7e-9872-f78c66e72e9c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createMergeRequest(mergeParameters, project, repositoryNameOrId, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "985f7ae9-844f-4906-9897-7ef41516c0e2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, mergeParameters, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getMergeRequest(project, repositoryNameOrId, mergeOperationId, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryNameOrId,
              mergeOperationId
            };
            let queryValues = {
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "985f7ae9-844f-4906-9897-7ef41516c0e2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAttachment(customHeaders, contentStream, fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fileName,
              repositoryId,
              pullRequestId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAttachment(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fileName,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentContent(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fileName,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachments(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentZip(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fileName,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createLike(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5f2e2851-1389-425b-a00b-fb2adb3ef31b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteLike(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5f2e2851-1389-425b-a00b-fb2adb3ef31b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLikes(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "5f2e2851-1389-425b-a00b-fb2adb3ef31b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIterationCommits(repositoryId, pullRequestId, iterationId, project, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            let queryValues = {
              top,
              skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "e7ea0883-095f-4926-b5fb-f24691c26fb9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestCommits(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "52823034-34a8-4576-922c-8d8b77e9e4c4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestConflict(repositoryId, pullRequestId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestConflicts(repositoryId, pullRequestId, project, skip, top, includeObsolete, excludeResolved, onlyResolved) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              "$skip": skip,
              "$top": top,
              includeObsolete,
              excludeResolved,
              onlyResolved
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestConflict(conflict, repositoryId, pullRequestId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflict, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestConflicts(conflictUpdates, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflictUpdates, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIterationChanges(repositoryId, pullRequestId, iterationId, project, top, skip, compareTo) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            let queryValues = {
              "$top": top,
              "$skip": skip,
              "$compareTo": compareTo
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4216bdcf-b6b1-4d59-8b82-c34cc183fc8b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIterationChanges, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIteration(repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d43911ee-6958-46b0-a42b-8445b8a0d004", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIterations(repositoryId, pullRequestId, project, includeCommits) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              includeCommits
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "d43911ee-6958-46b0-a42b-8445b8a0d004", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequestIterationStatus(status, repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, status, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId,
              statusId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId,
              statusId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestIterationStatuses(repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestIterationStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              iterationId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, patchDocument, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequestLabel(label, repositoryId, pullRequestId, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "f22387e3-984e-4c52-9c6d-fbb8f14c812d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, label, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePullRequestLabels(repositoryId, pullRequestId, labelIdOrName, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              labelIdOrName
            };
            let queryValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "f22387e3-984e-4c52-9c6d-fbb8f14c812d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestLabel(repositoryId, pullRequestId, labelIdOrName, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              labelIdOrName
            };
            let queryValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "f22387e3-984e-4c52-9c6d-fbb8f14c812d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestLabels(repositoryId, pullRequestId, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "f22387e3-984e-4c52-9c6d-fbb8f14c812d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestProperties(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "48a52185-5b9e-4736-9dc1-bb1e2feac80b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestProperties(customHeaders, patchDocument, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "48a52185-5b9e-4736-9dc1-bb1e2feac80b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, patchDocument, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestQuery(queries, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b3a6eebe-9cf0-49ea-b6cb-1a4c5f5007b0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, queries, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              reviewerId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, reviewer, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequestReviewers(reviewers, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, reviewers, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createUnmaterializedPullRequestReviewer(reviewer, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, reviewer, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              reviewerId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              reviewerId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestReviewers(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              reviewerId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, reviewer, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestReviewers(patchVotes, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, patchVotes, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestById(pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "01a46dea-7d46-4d40-bc84-319e7c260d99", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestsByProject(project, searchCriteria, maxCommentLength, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          if (searchCriteria == null) {
            throw new TypeError("searchCriteria can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              searchCriteria,
              maxCommentLength,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "a5d28130-9cd2-40fa-9f08-902e7daa9efb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequest(gitPullRequestToCreate, repositoryId, project, supportsIterations) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              supportsIterations
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, gitPullRequestToCreate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequest(repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              maxCommentLength,
              "$skip": skip,
              "$top": top,
              includeCommits,
              includeWorkItemRefs
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequests(repositoryId, searchCriteria, project, maxCommentLength, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          if (searchCriteria == null) {
            throw new TypeError("searchCriteria can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              searchCriteria,
              maxCommentLength,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequest(gitPullRequestToUpdate, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, gitPullRequestToUpdate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      sharePullRequest(userMessage, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "696f3a82-47c9-487f-9117-b9d00972ca84", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, userMessage, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPullRequestStatus(status, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, status, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePullRequestStatus(repositoryId, pullRequestId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              statusId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestStatus(repositoryId, pullRequestId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              statusId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestStatuses(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePullRequestStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, patchDocument, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createComment(comment, repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, comment, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteComment(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getComment(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getComments(repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateComment(comment, repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, comment, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createThread(commentThread, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, commentThread, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestThread(repositoryId, pullRequestId, threadId, project, iteration, baseIteration) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId
            };
            let queryValues = {
              "$iteration": iteration,
              "$baseIteration": baseIteration
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getThreads(repositoryId, pullRequestId, project, iteration, baseIteration) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            let queryValues = {
              "$iteration": iteration,
              "$baseIteration": baseIteration
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateThread(commentThread, repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId,
              threadId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, commentThread, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPullRequestWorkItemRefs(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pullRequestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "0a637fcc-5370-4ce8-b0e8-98091f5f9482", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPush(push, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, push, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPush(repositoryId, pushId, project, includeCommits, includeRefUpdates) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              pushId
            };
            let queryValues = {
              includeCommits,
              includeRefUpdates
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPushes(repositoryId, project, skip, top, searchCriteria) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              "$skip": skip,
              "$top": top,
              searchCriteria
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRepositoryFromRecycleBin(project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "a663da97-81db-4eb3-8b83-287670f63073", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRecycleBinRepositories(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "a663da97-81db-4eb3-8b83-287670f63073", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      restoreRepositoryFromRecycleBin(repositoryDetails, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "a663da97-81db-4eb3-8b83-287670f63073", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, repositoryDetails, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRefs(repositoryId, project, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              filter,
              includeLinks,
              includeStatuses,
              includeMyBranches,
              latestStatusesOnly,
              peelTags,
              filterContains
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRef(newRefInfo, repositoryId, filter, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (filter == null) {
            throw new TypeError("filter can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              filter,
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, newRefInfo, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRefs(refUpdates, repositoryId, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              projectId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, refUpdates, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefUpdateResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createFavorite(favorite, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, favorite, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRefFavorite(project, favoriteId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              favoriteId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRefFavorite(project, favoriteId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              favoriteId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRefFavorites(project, repositoryId, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              repositoryId,
              identityId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createRepository(gitRepositoryToCreate, project, sourceRef) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              sourceRef
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, gitRepositoryToCreate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRepository(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRepositories(project, includeLinks, includeAllUrls, includeHidden) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              includeLinks,
              includeAllUrls,
              includeHidden
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRepository(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRepositoryWithParent(repositoryId, includeParent, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (includeParent == null) {
            throw new TypeError("includeParent can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              includeParent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRepository(newRepositoryInfo, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, newRepositoryInfo, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevertConflict(repositoryId, revertId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              revertId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "10d7ae6d-1050-446d-852a-bd5d99f834bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevertConflicts(repositoryId, revertId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              revertId
            };
            let queryValues = {
              continuationToken,
              "$top": top,
              excludeResolved,
              onlyResolved,
              includeObsolete
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "10d7ae6d-1050-446d-852a-bd5d99f834bf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRevertConflict(conflict, repositoryId, revertId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              revertId,
              conflictId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "10d7ae6d-1050-446d-852a-bd5d99f834bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflict, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRevertConflicts(conflictUpdates, repositoryId, revertId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              revertId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "10d7ae6d-1050-446d-852a-bd5d99f834bf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, conflictUpdates, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createRevert(revertToCreate, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, revertToCreate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevert(project, revertId, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              revertId,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevertForRefName(project, repositoryId, refName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (refName == null) {
            throw new TypeError("refName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              refName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createCommitStatus(gitCommitStatusToCreate, commitId, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              commitId,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, gitCommitStatusToCreate, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStatuses(commitId, repositoryId, project, top, skip, latestOnly) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              commitId,
              repositoryId
            };
            let queryValues = {
              top,
              skip,
              latestOnly
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSuggestions(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "9393b4fb-4445-4919-972b-9ad16f442d83", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTree(repositoryId, sha1, project, projectId, recursive, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              sha1
            };
            let queryValues = {
              projectId,
              recursive,
              fileName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitTreeRef, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTreeZip(repositoryId, sha1, project, projectId, recursive, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId,
              sha1
            };
            let queryValues = {
              projectId,
              recursive,
              fileName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    GitApi.RESOURCE_AREA_ID = "4e080c62-fa21-4fbc-8fef-2a10a2b38049";
    exports.GitApi = GitApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/common/VSSInterfaces.js
var require_VSSInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/common/VSSInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConnectOptions;
    (function(ConnectOptions2) {
      ConnectOptions2[ConnectOptions2["None"] = 0] = "None";
      ConnectOptions2[ConnectOptions2["IncludeServices"] = 1] = "IncludeServices";
      ConnectOptions2[ConnectOptions2["IncludeLastUserAccess"] = 2] = "IncludeLastUserAccess";
      ConnectOptions2[ConnectOptions2["IncludeInheritedDefinitionsOnly"] = 4] = "IncludeInheritedDefinitionsOnly";
      ConnectOptions2[ConnectOptions2["IncludeNonInheritedDefinitionsOnly"] = 8] = "IncludeNonInheritedDefinitionsOnly";
    })(ConnectOptions = exports.ConnectOptions || (exports.ConnectOptions = {}));
    var DeploymentFlags;
    (function(DeploymentFlags2) {
      DeploymentFlags2[DeploymentFlags2["None"] = 0] = "None";
      DeploymentFlags2[DeploymentFlags2["Hosted"] = 1] = "Hosted";
      DeploymentFlags2[DeploymentFlags2["OnPremises"] = 2] = "OnPremises";
    })(DeploymentFlags = exports.DeploymentFlags || (exports.DeploymentFlags = {}));
    var JWTAlgorithm;
    (function(JWTAlgorithm2) {
      JWTAlgorithm2[JWTAlgorithm2["None"] = 0] = "None";
      JWTAlgorithm2[JWTAlgorithm2["HS256"] = 1] = "HS256";
      JWTAlgorithm2[JWTAlgorithm2["RS256"] = 2] = "RS256";
    })(JWTAlgorithm = exports.JWTAlgorithm || (exports.JWTAlgorithm = {}));
    var Operation;
    (function(Operation2) {
      Operation2[Operation2["Add"] = 0] = "Add";
      Operation2[Operation2["Remove"] = 1] = "Remove";
      Operation2[Operation2["Replace"] = 2] = "Replace";
      Operation2[Operation2["Move"] = 3] = "Move";
      Operation2[Operation2["Copy"] = 4] = "Copy";
      Operation2[Operation2["Test"] = 5] = "Test";
    })(Operation = exports.Operation || (exports.Operation = {}));
    exports.TypeInfo = {
      ConnectOptions: {
        enumValues: {
          "none": 0,
          "includeServices": 1,
          "includeLastUserAccess": 2,
          "includeInheritedDefinitionsOnly": 4,
          "includeNonInheritedDefinitionsOnly": 8
        }
      },
      DeploymentFlags: {
        enumValues: {
          "none": 0,
          "hosted": 1,
          "onPremises": 2
        }
      },
      JsonPatchOperation: {},
      JWTAlgorithm: {
        enumValues: {
          "none": 0,
          "hS256": 1,
          "rS256": 2
        }
      },
      Operation: {
        enumValues: {
          "add": 0,
          "remove": 1,
          "replace": 2,
          "move": 3,
          "copy": 4,
          "test": 5
        }
      },
      SignedUrl: {},
      TraceFilter: {},
      VssNotificationEvent: {}
    };
    exports.TypeInfo.JsonPatchOperation.fields = {
      op: {
        enumType: exports.TypeInfo.Operation
      }
    };
    exports.TypeInfo.SignedUrl.fields = {
      signatureExpires: {
        isDate: true
      }
    };
    exports.TypeInfo.TraceFilter.fields = {
      timeCreated: {
        isDate: true
      }
    };
    exports.TypeInfo.VssNotificationEvent.fields = {
      sourceEventCreatedTime: {
        isDate: true
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/LocationsInterfaces.js
var require_LocationsInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/LocationsInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VSSInterfaces = require_VSSInterfaces();
    var InheritLevel;
    (function(InheritLevel2) {
      InheritLevel2[InheritLevel2["None"] = 0] = "None";
      InheritLevel2[InheritLevel2["Deployment"] = 1] = "Deployment";
      InheritLevel2[InheritLevel2["Account"] = 2] = "Account";
      InheritLevel2[InheritLevel2["Collection"] = 4] = "Collection";
      InheritLevel2[InheritLevel2["All"] = 7] = "All";
    })(InheritLevel = exports.InheritLevel || (exports.InheritLevel = {}));
    var RelativeToSetting;
    (function(RelativeToSetting2) {
      RelativeToSetting2[RelativeToSetting2["Context"] = 0] = "Context";
      RelativeToSetting2[RelativeToSetting2["WebApplication"] = 2] = "WebApplication";
      RelativeToSetting2[RelativeToSetting2["FullyQualified"] = 3] = "FullyQualified";
    })(RelativeToSetting = exports.RelativeToSetting || (exports.RelativeToSetting = {}));
    var ServiceStatus;
    (function(ServiceStatus2) {
      ServiceStatus2[ServiceStatus2["Assigned"] = 0] = "Assigned";
      ServiceStatus2[ServiceStatus2["Active"] = 1] = "Active";
      ServiceStatus2[ServiceStatus2["Moving"] = 2] = "Moving";
    })(ServiceStatus = exports.ServiceStatus || (exports.ServiceStatus = {}));
    exports.TypeInfo = {
      ConnectionData: {},
      InheritLevel: {
        enumValues: {
          "none": 0,
          "deployment": 1,
          "account": 2,
          "collection": 4,
          "all": 7
        }
      },
      LocationServiceData: {},
      RelativeToSetting: {
        enumValues: {
          "context": 0,
          "webApplication": 2,
          "fullyQualified": 3
        }
      },
      ServiceDefinition: {},
      ServiceStatus: {
        enumValues: {
          "assigned": 0,
          "active": 1,
          "moving": 2
        }
      }
    };
    exports.TypeInfo.ConnectionData.fields = {
      deploymentType: {
        enumType: VSSInterfaces.TypeInfo.DeploymentFlags
      },
      lastUserAccess: {
        isDate: true
      },
      locationServiceData: {
        typeInfo: exports.TypeInfo.LocationServiceData
      }
    };
    exports.TypeInfo.LocationServiceData.fields = {
      serviceDefinitions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ServiceDefinition
      }
    };
    exports.TypeInfo.ServiceDefinition.fields = {
      inheritLevel: {
        enumType: exports.TypeInfo.InheritLevel
      },
      relativeToSetting: {
        enumType: exports.TypeInfo.RelativeToSetting
      },
      status: {
        enumType: exports.TypeInfo.ServiceStatus
      }
    };
  }
});

// node_modules/azure-devops-node-api/LocationsApi.js
var require_LocationsApi = __commonJS({
  "node_modules/azure-devops-node-api/LocationsApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var LocationsInterfaces = require_LocationsInterfaces();
    var LocationsApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Locations-api", options);
      }
      getConnectionData(connectOptions, lastChangeId, lastChangeId64) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              connectOptions,
              lastChangeId,
              lastChangeId64
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "00d9565f-ed9c-4a06-9a50-00e7896ccab4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ConnectionData, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceArea(areaId, enterpriseName, organizationName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              areaId
            };
            let queryValues = {
              enterpriseName,
              organizationName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "e81700f7-3be2-46de-8624-2eb35882fcaa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceAreaByHost(areaId, hostId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (hostId == null) {
            throw new TypeError("hostId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              areaId
            };
            let queryValues = {
              hostId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "e81700f7-3be2-46de-8624-2eb35882fcaa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceAreas(enterpriseName, organizationName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              enterpriseName,
              organizationName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "e81700f7-3be2-46de-8624-2eb35882fcaa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceAreasByHost(hostId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (hostId == null) {
            throw new TypeError("hostId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              hostId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "e81700f7-3be2-46de-8624-2eb35882fcaa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteServiceDefinition(serviceType, identifier) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              serviceType,
              identifier
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "d810a47d-f4f4-4a62-a03f-fa1860585c4c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getServiceDefinition(serviceType, identifier, allowFaultIn, previewFaultIn) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              serviceType,
              identifier
            };
            let queryValues = {
              allowFaultIn,
              previewFaultIn
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "d810a47d-f4f4-4a62-a03f-fa1860585c4c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getServiceDefinitions(serviceType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              serviceType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "d810a47d-f4f4-4a62-a03f-fa1860585c4c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateServiceDefinitions(serviceDefinitions) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Location", "d810a47d-f4f4-4a62-a03f-fa1860585c4c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, serviceDefinitions, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.LocationsApi = LocationsApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/NotificationInterfaces.js
var require_NotificationInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/NotificationInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DefaultGroupDeliveryPreference;
    (function(DefaultGroupDeliveryPreference2) {
      DefaultGroupDeliveryPreference2[DefaultGroupDeliveryPreference2["NoDelivery"] = -1] = "NoDelivery";
      DefaultGroupDeliveryPreference2[DefaultGroupDeliveryPreference2["EachMember"] = 2] = "EachMember";
    })(DefaultGroupDeliveryPreference = exports.DefaultGroupDeliveryPreference || (exports.DefaultGroupDeliveryPreference = {}));
    var EvaluationOperationStatus;
    (function(EvaluationOperationStatus2) {
      EvaluationOperationStatus2[EvaluationOperationStatus2["NotSet"] = 0] = "NotSet";
      EvaluationOperationStatus2[EvaluationOperationStatus2["Queued"] = 1] = "Queued";
      EvaluationOperationStatus2[EvaluationOperationStatus2["InProgress"] = 2] = "InProgress";
      EvaluationOperationStatus2[EvaluationOperationStatus2["Cancelled"] = 3] = "Cancelled";
      EvaluationOperationStatus2[EvaluationOperationStatus2["Succeeded"] = 4] = "Succeeded";
      EvaluationOperationStatus2[EvaluationOperationStatus2["Failed"] = 5] = "Failed";
      EvaluationOperationStatus2[EvaluationOperationStatus2["TimedOut"] = 6] = "TimedOut";
      EvaluationOperationStatus2[EvaluationOperationStatus2["NotFound"] = 7] = "NotFound";
    })(EvaluationOperationStatus = exports.EvaluationOperationStatus || (exports.EvaluationOperationStatus = {}));
    var EventPublisherQueryFlags;
    (function(EventPublisherQueryFlags2) {
      EventPublisherQueryFlags2[EventPublisherQueryFlags2["None"] = 0] = "None";
      EventPublisherQueryFlags2[EventPublisherQueryFlags2["IncludeRemoteServices"] = 2] = "IncludeRemoteServices";
    })(EventPublisherQueryFlags = exports.EventPublisherQueryFlags || (exports.EventPublisherQueryFlags = {}));
    var EventTypeQueryFlags;
    (function(EventTypeQueryFlags2) {
      EventTypeQueryFlags2[EventTypeQueryFlags2["None"] = 0] = "None";
      EventTypeQueryFlags2[EventTypeQueryFlags2["IncludeFields"] = 1] = "IncludeFields";
    })(EventTypeQueryFlags = exports.EventTypeQueryFlags || (exports.EventTypeQueryFlags = {}));
    var NotificationOperation;
    (function(NotificationOperation2) {
      NotificationOperation2[NotificationOperation2["None"] = 0] = "None";
      NotificationOperation2[NotificationOperation2["SuspendUnprocessed"] = 1] = "SuspendUnprocessed";
    })(NotificationOperation = exports.NotificationOperation || (exports.NotificationOperation = {}));
    var NotificationReasonType;
    (function(NotificationReasonType2) {
      NotificationReasonType2[NotificationReasonType2["Unknown"] = 0] = "Unknown";
      NotificationReasonType2[NotificationReasonType2["Follows"] = 1] = "Follows";
      NotificationReasonType2[NotificationReasonType2["Personal"] = 2] = "Personal";
      NotificationReasonType2[NotificationReasonType2["PersonalAlias"] = 3] = "PersonalAlias";
      NotificationReasonType2[NotificationReasonType2["DirectMember"] = 4] = "DirectMember";
      NotificationReasonType2[NotificationReasonType2["IndirectMember"] = 5] = "IndirectMember";
      NotificationReasonType2[NotificationReasonType2["GroupAlias"] = 6] = "GroupAlias";
      NotificationReasonType2[NotificationReasonType2["SubscriptionAlias"] = 7] = "SubscriptionAlias";
      NotificationReasonType2[NotificationReasonType2["SingleRole"] = 8] = "SingleRole";
      NotificationReasonType2[NotificationReasonType2["DirectMemberGroupRole"] = 9] = "DirectMemberGroupRole";
      NotificationReasonType2[NotificationReasonType2["InDirectMemberGroupRole"] = 10] = "InDirectMemberGroupRole";
      NotificationReasonType2[NotificationReasonType2["AliasMemberGroupRole"] = 11] = "AliasMemberGroupRole";
    })(NotificationReasonType = exports.NotificationReasonType || (exports.NotificationReasonType = {}));
    var NotificationStatisticType;
    (function(NotificationStatisticType2) {
      NotificationStatisticType2[NotificationStatisticType2["NotificationBySubscription"] = 0] = "NotificationBySubscription";
      NotificationStatisticType2[NotificationStatisticType2["EventsByEventType"] = 1] = "EventsByEventType";
      NotificationStatisticType2[NotificationStatisticType2["NotificationByEventType"] = 2] = "NotificationByEventType";
      NotificationStatisticType2[NotificationStatisticType2["EventsByEventTypePerUser"] = 3] = "EventsByEventTypePerUser";
      NotificationStatisticType2[NotificationStatisticType2["NotificationByEventTypePerUser"] = 4] = "NotificationByEventTypePerUser";
      NotificationStatisticType2[NotificationStatisticType2["Events"] = 5] = "Events";
      NotificationStatisticType2[NotificationStatisticType2["Notifications"] = 6] = "Notifications";
      NotificationStatisticType2[NotificationStatisticType2["NotificationFailureBySubscription"] = 7] = "NotificationFailureBySubscription";
      NotificationStatisticType2[NotificationStatisticType2["UnprocessedRangeStart"] = 100] = "UnprocessedRangeStart";
      NotificationStatisticType2[NotificationStatisticType2["UnprocessedEventsByPublisher"] = 101] = "UnprocessedEventsByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["UnprocessedEventDelayByPublisher"] = 102] = "UnprocessedEventDelayByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["UnprocessedNotificationsByChannelByPublisher"] = 103] = "UnprocessedNotificationsByChannelByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["UnprocessedNotificationDelayByChannelByPublisher"] = 104] = "UnprocessedNotificationDelayByChannelByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["DelayRangeStart"] = 200] = "DelayRangeStart";
      NotificationStatisticType2[NotificationStatisticType2["TotalPipelineTime"] = 201] = "TotalPipelineTime";
      NotificationStatisticType2[NotificationStatisticType2["NotificationPipelineTime"] = 202] = "NotificationPipelineTime";
      NotificationStatisticType2[NotificationStatisticType2["EventPipelineTime"] = 203] = "EventPipelineTime";
      NotificationStatisticType2[NotificationStatisticType2["HourlyRangeStart"] = 1e3] = "HourlyRangeStart";
      NotificationStatisticType2[NotificationStatisticType2["HourlyNotificationBySubscription"] = 1001] = "HourlyNotificationBySubscription";
      NotificationStatisticType2[NotificationStatisticType2["HourlyEventsByEventTypePerUser"] = 1002] = "HourlyEventsByEventTypePerUser";
      NotificationStatisticType2[NotificationStatisticType2["HourlyEvents"] = 1003] = "HourlyEvents";
      NotificationStatisticType2[NotificationStatisticType2["HourlyNotifications"] = 1004] = "HourlyNotifications";
      NotificationStatisticType2[NotificationStatisticType2["HourlyUnprocessedEventsByPublisher"] = 1101] = "HourlyUnprocessedEventsByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["HourlyUnprocessedEventDelayByPublisher"] = 1102] = "HourlyUnprocessedEventDelayByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["HourlyUnprocessedNotificationsByChannelByPublisher"] = 1103] = "HourlyUnprocessedNotificationsByChannelByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["HourlyUnprocessedNotificationDelayByChannelByPublisher"] = 1104] = "HourlyUnprocessedNotificationDelayByChannelByPublisher";
      NotificationStatisticType2[NotificationStatisticType2["HourlyTotalPipelineTime"] = 1201] = "HourlyTotalPipelineTime";
      NotificationStatisticType2[NotificationStatisticType2["HourlyNotificationPipelineTime"] = 1202] = "HourlyNotificationPipelineTime";
      NotificationStatisticType2[NotificationStatisticType2["HourlyEventPipelineTime"] = 1203] = "HourlyEventPipelineTime";
    })(NotificationStatisticType = exports.NotificationStatisticType || (exports.NotificationStatisticType = {}));
    var NotificationSubscriberDeliveryPreference;
    (function(NotificationSubscriberDeliveryPreference2) {
      NotificationSubscriberDeliveryPreference2[NotificationSubscriberDeliveryPreference2["NoDelivery"] = -1] = "NoDelivery";
      NotificationSubscriberDeliveryPreference2[NotificationSubscriberDeliveryPreference2["PreferredEmailAddress"] = 1] = "PreferredEmailAddress";
      NotificationSubscriberDeliveryPreference2[NotificationSubscriberDeliveryPreference2["EachMember"] = 2] = "EachMember";
      NotificationSubscriberDeliveryPreference2[NotificationSubscriberDeliveryPreference2["UseDefault"] = 3] = "UseDefault";
    })(NotificationSubscriberDeliveryPreference = exports.NotificationSubscriberDeliveryPreference || (exports.NotificationSubscriberDeliveryPreference = {}));
    var SubscriberFlags;
    (function(SubscriberFlags2) {
      SubscriberFlags2[SubscriberFlags2["None"] = 0] = "None";
      SubscriberFlags2[SubscriberFlags2["DeliveryPreferencesEditable"] = 2] = "DeliveryPreferencesEditable";
      SubscriberFlags2[SubscriberFlags2["SupportsPreferredEmailAddressDelivery"] = 4] = "SupportsPreferredEmailAddressDelivery";
      SubscriberFlags2[SubscriberFlags2["SupportsEachMemberDelivery"] = 8] = "SupportsEachMemberDelivery";
      SubscriberFlags2[SubscriberFlags2["SupportsNoDelivery"] = 16] = "SupportsNoDelivery";
      SubscriberFlags2[SubscriberFlags2["IsUser"] = 32] = "IsUser";
      SubscriberFlags2[SubscriberFlags2["IsGroup"] = 64] = "IsGroup";
      SubscriberFlags2[SubscriberFlags2["IsTeam"] = 128] = "IsTeam";
    })(SubscriberFlags = exports.SubscriberFlags || (exports.SubscriberFlags = {}));
    var SubscriptionFieldType;
    (function(SubscriptionFieldType2) {
      SubscriptionFieldType2[SubscriptionFieldType2["String"] = 1] = "String";
      SubscriptionFieldType2[SubscriptionFieldType2["Integer"] = 2] = "Integer";
      SubscriptionFieldType2[SubscriptionFieldType2["DateTime"] = 3] = "DateTime";
      SubscriptionFieldType2[SubscriptionFieldType2["PlainText"] = 5] = "PlainText";
      SubscriptionFieldType2[SubscriptionFieldType2["Html"] = 7] = "Html";
      SubscriptionFieldType2[SubscriptionFieldType2["TreePath"] = 8] = "TreePath";
      SubscriptionFieldType2[SubscriptionFieldType2["History"] = 9] = "History";
      SubscriptionFieldType2[SubscriptionFieldType2["Double"] = 10] = "Double";
      SubscriptionFieldType2[SubscriptionFieldType2["Guid"] = 11] = "Guid";
      SubscriptionFieldType2[SubscriptionFieldType2["Boolean"] = 12] = "Boolean";
      SubscriptionFieldType2[SubscriptionFieldType2["Identity"] = 13] = "Identity";
      SubscriptionFieldType2[SubscriptionFieldType2["PicklistInteger"] = 14] = "PicklistInteger";
      SubscriptionFieldType2[SubscriptionFieldType2["PicklistString"] = 15] = "PicklistString";
      SubscriptionFieldType2[SubscriptionFieldType2["PicklistDouble"] = 16] = "PicklistDouble";
      SubscriptionFieldType2[SubscriptionFieldType2["TeamProject"] = 17] = "TeamProject";
    })(SubscriptionFieldType = exports.SubscriptionFieldType || (exports.SubscriptionFieldType = {}));
    var SubscriptionFlags;
    (function(SubscriptionFlags2) {
      SubscriptionFlags2[SubscriptionFlags2["None"] = 0] = "None";
      SubscriptionFlags2[SubscriptionFlags2["GroupSubscription"] = 1] = "GroupSubscription";
      SubscriptionFlags2[SubscriptionFlags2["ContributedSubscription"] = 2] = "ContributedSubscription";
      SubscriptionFlags2[SubscriptionFlags2["CanOptOut"] = 4] = "CanOptOut";
      SubscriptionFlags2[SubscriptionFlags2["TeamSubscription"] = 8] = "TeamSubscription";
      SubscriptionFlags2[SubscriptionFlags2["OneActorMatches"] = 16] = "OneActorMatches";
    })(SubscriptionFlags = exports.SubscriptionFlags || (exports.SubscriptionFlags = {}));
    var SubscriptionPermissions;
    (function(SubscriptionPermissions2) {
      SubscriptionPermissions2[SubscriptionPermissions2["None"] = 0] = "None";
      SubscriptionPermissions2[SubscriptionPermissions2["View"] = 1] = "View";
      SubscriptionPermissions2[SubscriptionPermissions2["Edit"] = 2] = "Edit";
      SubscriptionPermissions2[SubscriptionPermissions2["Delete"] = 4] = "Delete";
    })(SubscriptionPermissions = exports.SubscriptionPermissions || (exports.SubscriptionPermissions = {}));
    var SubscriptionQueryFlags;
    (function(SubscriptionQueryFlags2) {
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["None"] = 0] = "None";
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["IncludeInvalidSubscriptions"] = 2] = "IncludeInvalidSubscriptions";
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["IncludeDeletedSubscriptions"] = 4] = "IncludeDeletedSubscriptions";
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["IncludeFilterDetails"] = 8] = "IncludeFilterDetails";
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["AlwaysReturnBasicInformation"] = 16] = "AlwaysReturnBasicInformation";
      SubscriptionQueryFlags2[SubscriptionQueryFlags2["IncludeSystemSubscriptions"] = 32] = "IncludeSystemSubscriptions";
    })(SubscriptionQueryFlags = exports.SubscriptionQueryFlags || (exports.SubscriptionQueryFlags = {}));
    var SubscriptionStatus;
    (function(SubscriptionStatus2) {
      SubscriptionStatus2[SubscriptionStatus2["JailedByNotificationsVolume"] = -200] = "JailedByNotificationsVolume";
      SubscriptionStatus2[SubscriptionStatus2["PendingDeletion"] = -100] = "PendingDeletion";
      SubscriptionStatus2[SubscriptionStatus2["DisabledArgumentException"] = -12] = "DisabledArgumentException";
      SubscriptionStatus2[SubscriptionStatus2["DisabledProjectInvalid"] = -11] = "DisabledProjectInvalid";
      SubscriptionStatus2[SubscriptionStatus2["DisabledMissingPermissions"] = -10] = "DisabledMissingPermissions";
      SubscriptionStatus2[SubscriptionStatus2["DisabledFromProbation"] = -9] = "DisabledFromProbation";
      SubscriptionStatus2[SubscriptionStatus2["DisabledInactiveIdentity"] = -8] = "DisabledInactiveIdentity";
      SubscriptionStatus2[SubscriptionStatus2["DisabledMessageQueueNotSupported"] = -7] = "DisabledMessageQueueNotSupported";
      SubscriptionStatus2[SubscriptionStatus2["DisabledMissingIdentity"] = -6] = "DisabledMissingIdentity";
      SubscriptionStatus2[SubscriptionStatus2["DisabledInvalidRoleExpression"] = -5] = "DisabledInvalidRoleExpression";
      SubscriptionStatus2[SubscriptionStatus2["DisabledInvalidPathClause"] = -4] = "DisabledInvalidPathClause";
      SubscriptionStatus2[SubscriptionStatus2["DisabledAsDuplicateOfDefault"] = -3] = "DisabledAsDuplicateOfDefault";
      SubscriptionStatus2[SubscriptionStatus2["DisabledByAdmin"] = -2] = "DisabledByAdmin";
      SubscriptionStatus2[SubscriptionStatus2["Disabled"] = -1] = "Disabled";
      SubscriptionStatus2[SubscriptionStatus2["Enabled"] = 0] = "Enabled";
      SubscriptionStatus2[SubscriptionStatus2["EnabledOnProbation"] = 1] = "EnabledOnProbation";
    })(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
    var SubscriptionTemplateQueryFlags;
    (function(SubscriptionTemplateQueryFlags2) {
      SubscriptionTemplateQueryFlags2[SubscriptionTemplateQueryFlags2["None"] = 0] = "None";
      SubscriptionTemplateQueryFlags2[SubscriptionTemplateQueryFlags2["IncludeUser"] = 1] = "IncludeUser";
      SubscriptionTemplateQueryFlags2[SubscriptionTemplateQueryFlags2["IncludeGroup"] = 2] = "IncludeGroup";
      SubscriptionTemplateQueryFlags2[SubscriptionTemplateQueryFlags2["IncludeUserAndGroup"] = 4] = "IncludeUserAndGroup";
      SubscriptionTemplateQueryFlags2[SubscriptionTemplateQueryFlags2["IncludeEventTypeInformation"] = 22] = "IncludeEventTypeInformation";
    })(SubscriptionTemplateQueryFlags = exports.SubscriptionTemplateQueryFlags || (exports.SubscriptionTemplateQueryFlags = {}));
    var SubscriptionTemplateType;
    (function(SubscriptionTemplateType2) {
      SubscriptionTemplateType2[SubscriptionTemplateType2["User"] = 0] = "User";
      SubscriptionTemplateType2[SubscriptionTemplateType2["Team"] = 1] = "Team";
      SubscriptionTemplateType2[SubscriptionTemplateType2["Both"] = 2] = "Both";
      SubscriptionTemplateType2[SubscriptionTemplateType2["None"] = 3] = "None";
    })(SubscriptionTemplateType = exports.SubscriptionTemplateType || (exports.SubscriptionTemplateType = {}));
    exports.TypeInfo = {
      ActorNotificationReason: {},
      BatchNotificationOperation: {},
      DefaultGroupDeliveryPreference: {
        enumValues: {
          "noDelivery": -1,
          "eachMember": 2
        }
      },
      EvaluationOperationStatus: {
        enumValues: {
          "notSet": 0,
          "queued": 1,
          "inProgress": 2,
          "cancelled": 3,
          "succeeded": 4,
          "failed": 5,
          "timedOut": 6,
          "notFound": 7
        }
      },
      EventBacklogStatus: {},
      EventProcessingLog: {},
      EventPublisherQueryFlags: {
        enumValues: {
          "none": 0,
          "includeRemoteServices": 2
        }
      },
      EventTypeQueryFlags: {
        enumValues: {
          "none": 0,
          "includeFields": 1
        }
      },
      INotificationDiagnosticLog: {},
      NotificationAdminSettings: {},
      NotificationAdminSettingsUpdateParameters: {},
      NotificationBacklogStatus: {},
      NotificationDeliveryLog: {},
      NotificationDiagnosticLog: {},
      NotificationEventBacklogStatus: {},
      NotificationEventField: {},
      NotificationEventFieldType: {},
      NotificationEventType: {},
      NotificationJobDiagnosticLog: {},
      NotificationOperation: {
        enumValues: {
          "none": 0,
          "suspendUnprocessed": 1
        }
      },
      NotificationReason: {},
      NotificationReasonType: {
        enumValues: {
          "unknown": 0,
          "follows": 1,
          "personal": 2,
          "personalAlias": 3,
          "directMember": 4,
          "indirectMember": 5,
          "groupAlias": 6,
          "subscriptionAlias": 7,
          "singleRole": 8,
          "directMemberGroupRole": 9,
          "inDirectMemberGroupRole": 10,
          "aliasMemberGroupRole": 11
        }
      },
      NotificationStatistic: {},
      NotificationStatisticsQuery: {},
      NotificationStatisticsQueryConditions: {},
      NotificationStatisticType: {
        enumValues: {
          "notificationBySubscription": 0,
          "eventsByEventType": 1,
          "notificationByEventType": 2,
          "eventsByEventTypePerUser": 3,
          "notificationByEventTypePerUser": 4,
          "events": 5,
          "notifications": 6,
          "notificationFailureBySubscription": 7,
          "unprocessedRangeStart": 100,
          "unprocessedEventsByPublisher": 101,
          "unprocessedEventDelayByPublisher": 102,
          "unprocessedNotificationsByChannelByPublisher": 103,
          "unprocessedNotificationDelayByChannelByPublisher": 104,
          "delayRangeStart": 200,
          "totalPipelineTime": 201,
          "notificationPipelineTime": 202,
          "eventPipelineTime": 203,
          "hourlyRangeStart": 1e3,
          "hourlyNotificationBySubscription": 1001,
          "hourlyEventsByEventTypePerUser": 1002,
          "hourlyEvents": 1003,
          "hourlyNotifications": 1004,
          "hourlyUnprocessedEventsByPublisher": 1101,
          "hourlyUnprocessedEventDelayByPublisher": 1102,
          "hourlyUnprocessedNotificationsByChannelByPublisher": 1103,
          "hourlyUnprocessedNotificationDelayByChannelByPublisher": 1104,
          "hourlyTotalPipelineTime": 1201,
          "hourlyNotificationPipelineTime": 1202,
          "hourlyEventPipelineTime": 1203
        }
      },
      NotificationSubscriber: {},
      NotificationSubscriberDeliveryPreference: {
        enumValues: {
          "noDelivery": -1,
          "preferredEmailAddress": 1,
          "eachMember": 2,
          "useDefault": 3
        }
      },
      NotificationSubscriberUpdateParameters: {},
      NotificationSubscription: {},
      NotificationSubscriptionTemplate: {},
      NotificationSubscriptionUpdateParameters: {},
      SubscriberFlags: {
        enumValues: {
          "none": 0,
          "deliveryPreferencesEditable": 2,
          "supportsPreferredEmailAddressDelivery": 4,
          "supportsEachMemberDelivery": 8,
          "supportsNoDelivery": 16,
          "isUser": 32,
          "isGroup": 64,
          "isTeam": 128
        }
      },
      SubscriptionDiagnostics: {},
      SubscriptionEvaluationRequest: {},
      SubscriptionEvaluationResult: {},
      SubscriptionFieldType: {
        enumValues: {
          "string": 1,
          "integer": 2,
          "dateTime": 3,
          "plainText": 5,
          "html": 7,
          "treePath": 8,
          "history": 9,
          "double": 10,
          "guid": 11,
          "boolean": 12,
          "identity": 13,
          "picklistInteger": 14,
          "picklistString": 15,
          "picklistDouble": 16,
          "teamProject": 17
        }
      },
      SubscriptionFlags: {
        enumValues: {
          "none": 0,
          "groupSubscription": 1,
          "contributedSubscription": 2,
          "canOptOut": 4,
          "teamSubscription": 8,
          "oneActorMatches": 16
        }
      },
      SubscriptionPermissions: {
        enumValues: {
          "none": 0,
          "view": 1,
          "edit": 2,
          "delete": 4
        }
      },
      SubscriptionQuery: {},
      SubscriptionQueryCondition: {},
      SubscriptionQueryFlags: {
        enumValues: {
          "none": 0,
          "includeInvalidSubscriptions": 2,
          "includeDeletedSubscriptions": 4,
          "includeFilterDetails": 8,
          "alwaysReturnBasicInformation": 16,
          "includeSystemSubscriptions": 32
        }
      },
      SubscriptionStatus: {
        enumValues: {
          "jailedByNotificationsVolume": -200,
          "pendingDeletion": -100,
          "disabledArgumentException": -12,
          "disabledProjectInvalid": -11,
          "disabledMissingPermissions": -10,
          "disabledFromProbation": -9,
          "disabledInactiveIdentity": -8,
          "disabledMessageQueueNotSupported": -7,
          "disabledMissingIdentity": -6,
          "disabledInvalidRoleExpression": -5,
          "disabledInvalidPathClause": -4,
          "disabledAsDuplicateOfDefault": -3,
          "disabledByAdmin": -2,
          "disabled": -1,
          "enabled": 0,
          "enabledOnProbation": 1
        }
      },
      SubscriptionTemplateQueryFlags: {
        enumValues: {
          "none": 0,
          "includeUser": 1,
          "includeGroup": 2,
          "includeUserAndGroup": 4,
          "includeEventTypeInformation": 22
        }
      },
      SubscriptionTemplateType: {
        enumValues: {
          "user": 0,
          "team": 1,
          "both": 2,
          "none": 3
        }
      },
      SubscriptionTraceDiagnosticLog: {},
      SubscriptionTraceEventProcessingLog: {},
      SubscriptionTraceNotificationDeliveryLog: {},
      SubscriptionTracing: {}
    };
    exports.TypeInfo.ActorNotificationReason.fields = {
      notificationReasonType: {
        enumType: exports.TypeInfo.NotificationReasonType
      }
    };
    exports.TypeInfo.BatchNotificationOperation.fields = {
      notificationOperation: {
        enumType: exports.TypeInfo.NotificationOperation
      }
    };
    exports.TypeInfo.EventBacklogStatus.fields = {
      captureTime: {
        isDate: true
      },
      lastEventBatchStartTime: {
        isDate: true
      },
      lastEventProcessedTime: {
        isDate: true
      },
      lastJobBatchStartTime: {
        isDate: true
      },
      lastJobProcessedTime: {
        isDate: true
      },
      oldestPendingEventTime: {
        isDate: true
      }
    };
    exports.TypeInfo.EventProcessingLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.INotificationDiagnosticLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationAdminSettings.fields = {
      defaultGroupDeliveryPreference: {
        enumType: exports.TypeInfo.DefaultGroupDeliveryPreference
      }
    };
    exports.TypeInfo.NotificationAdminSettingsUpdateParameters.fields = {
      defaultGroupDeliveryPreference: {
        enumType: exports.TypeInfo.DefaultGroupDeliveryPreference
      }
    };
    exports.TypeInfo.NotificationBacklogStatus.fields = {
      captureTime: {
        isDate: true
      },
      lastJobBatchStartTime: {
        isDate: true
      },
      lastJobProcessedTime: {
        isDate: true
      },
      lastNotificationBatchStartTime: {
        isDate: true
      },
      lastNotificationProcessedTime: {
        isDate: true
      },
      oldestPendingNotificationTime: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationDeliveryLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationDiagnosticLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationEventBacklogStatus.fields = {
      eventBacklogStatus: {
        isArray: true,
        typeInfo: exports.TypeInfo.EventBacklogStatus
      },
      notificationBacklogStatus: {
        isArray: true,
        typeInfo: exports.TypeInfo.NotificationBacklogStatus
      }
    };
    exports.TypeInfo.NotificationEventField.fields = {
      fieldType: {
        typeInfo: exports.TypeInfo.NotificationEventFieldType
      }
    };
    exports.TypeInfo.NotificationEventFieldType.fields = {
      subscriptionFieldType: {
        enumType: exports.TypeInfo.SubscriptionFieldType
      }
    };
    exports.TypeInfo.NotificationEventType.fields = {
      fields: {
        isDictionary: true,
        dictionaryValueTypeInfo: exports.TypeInfo.NotificationEventField
      }
    };
    exports.TypeInfo.NotificationJobDiagnosticLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.NotificationReason.fields = {
      notificationReasonType: {
        enumType: exports.TypeInfo.NotificationReasonType
      }
    };
    exports.TypeInfo.NotificationStatistic.fields = {
      date: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.NotificationStatisticType
      }
    };
    exports.TypeInfo.NotificationStatisticsQuery.fields = {
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.NotificationStatisticsQueryConditions
      }
    };
    exports.TypeInfo.NotificationStatisticsQueryConditions.fields = {
      endDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.NotificationStatisticType
      }
    };
    exports.TypeInfo.NotificationSubscriber.fields = {
      deliveryPreference: {
        enumType: exports.TypeInfo.NotificationSubscriberDeliveryPreference
      },
      flags: {
        enumType: exports.TypeInfo.SubscriberFlags
      }
    };
    exports.TypeInfo.NotificationSubscriberUpdateParameters.fields = {
      deliveryPreference: {
        enumType: exports.TypeInfo.NotificationSubscriberDeliveryPreference
      }
    };
    exports.TypeInfo.NotificationSubscription.fields = {
      diagnostics: {
        typeInfo: exports.TypeInfo.SubscriptionDiagnostics
      },
      flags: {
        enumType: exports.TypeInfo.SubscriptionFlags
      },
      modifiedDate: {
        isDate: true
      },
      permissions: {
        enumType: exports.TypeInfo.SubscriptionPermissions
      },
      status: {
        enumType: exports.TypeInfo.SubscriptionStatus
      }
    };
    exports.TypeInfo.NotificationSubscriptionTemplate.fields = {
      notificationEventInformation: {
        typeInfo: exports.TypeInfo.NotificationEventType
      },
      type: {
        enumType: exports.TypeInfo.SubscriptionTemplateType
      }
    };
    exports.TypeInfo.NotificationSubscriptionUpdateParameters.fields = {
      status: {
        enumType: exports.TypeInfo.SubscriptionStatus
      }
    };
    exports.TypeInfo.SubscriptionDiagnostics.fields = {
      deliveryResults: {
        typeInfo: exports.TypeInfo.SubscriptionTracing
      },
      deliveryTracing: {
        typeInfo: exports.TypeInfo.SubscriptionTracing
      },
      evaluationTracing: {
        typeInfo: exports.TypeInfo.SubscriptionTracing
      }
    };
    exports.TypeInfo.SubscriptionEvaluationRequest.fields = {
      minEventsCreatedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.SubscriptionEvaluationResult.fields = {
      evaluationJobStatus: {
        enumType: exports.TypeInfo.EvaluationOperationStatus
      }
    };
    exports.TypeInfo.SubscriptionQuery.fields = {
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.SubscriptionQueryCondition
      },
      queryFlags: {
        enumType: exports.TypeInfo.SubscriptionQueryFlags
      }
    };
    exports.TypeInfo.SubscriptionQueryCondition.fields = {
      flags: {
        enumType: exports.TypeInfo.SubscriptionFlags
      }
    };
    exports.TypeInfo.SubscriptionTraceDiagnosticLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.SubscriptionTraceEventProcessingLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.SubscriptionTraceNotificationDeliveryLog.fields = {
      endTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.SubscriptionTracing.fields = {
      endDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      }
    };
  }
});

// node_modules/azure-devops-node-api/NotificationApi.js
var require_NotificationApi = __commonJS({
  "node_modules/azure-devops-node-api/NotificationApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var NotificationInterfaces = require_NotificationInterfaces();
    var VSSInterfaces = require_VSSInterfaces();
    var NotificationApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Notification-api", options);
      }
      performBatchNotificationOperations(operation) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "8f3c6ab2-5bae-4537-b16e-f84e0955599e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, operation, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listLogs(source, entryId, startTime, endTime) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              source,
              entryId
            };
            let queryValues = {
              startTime,
              endTime
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "991842f3-eb16-4aea-ac81-81353ef2b75c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.INotificationDiagnosticLog, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSubscriptionDiagnostics(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "20f1929d-4be7-4c2e-a74e-d47640ff3418", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSubscriptionDiagnostics(updateParameters, subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "20f1929d-4be7-4c2e-a74e-d47640ff3418", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, updateParameters, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      publishEvent(notificationEvent) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "14c57b7a-c0e6-4555-9f51-e067188fdd8e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, notificationEvent, options);
              let ret = this.formatResponse(res.result, VSSInterfaces.TypeInfo.VssNotificationEvent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      transformEvent(transformRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "9463a800-1b44-450e-9083-f948ea174b45", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, transformRequest, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryEventTypes(inputValuesQuery, eventType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              eventType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "b5bbdd21-c178-4398-b6db-0166d910028a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, inputValuesQuery, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventField, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEventType(eventType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              eventType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listEventTypes(publisherId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              publisherId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getNotificationReasons(notificationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              notificationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "19824fa9-1c76-40e6-9cce-cf0b9ca1cb60", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listNotificationReasons(notificationIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              notificationIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "19824fa9-1c76-40e6-9cce-cf0b9ca1cb60", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "cbe076d8-2803-45ff-8d8d-44653686ea2a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSettings(updateParameters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "cbe076d8-2803-45ff-8d8d-44653686ea2a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSubscriber(subscriberId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriberId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "4d5caff1-25ba-430b-b808-7a1f352cc197", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSubscriber(updateParameters, subscriberId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriberId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "4d5caff1-25ba-430b-b808-7a1f352cc197", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      querySubscriptions(subscriptionQuery) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "6864db85-08c0-4006-8e8e-cc1bebe31675", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, subscriptionQuery, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createSubscription(createParameters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "70f911d6-abac-488c-85b3-a206bf57e165", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, createParameters, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteSubscription(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "70f911d6-abac-488c-85b3-a206bf57e165", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSubscription(subscriptionId, queryFlags) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId
            };
            let queryValues = {
              queryFlags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "70f911d6-abac-488c-85b3-a206bf57e165", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listSubscriptions(targetId, ids, queryFlags) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              targetId,
              ids: ids && ids.join(","),
              queryFlags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "70f911d6-abac-488c-85b3-a206bf57e165", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSubscription(updateParameters, subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "70f911d6-abac-488c-85b3-a206bf57e165", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSubscriptionTemplates() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "fa5d24ba-7484-4f3d-888d-4ec6b1974082", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriptionTemplate, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSubscriptionUserSettings(userSettings, subscriptionId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              subscriptionId,
              userId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "notification", "ed5a3dff-aeb5-41b1-b4f7-89e66e58b62e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, userSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.NotificationApi = NotificationApi;
  }
});

// node_modules/azure-devops-node-api/PolicyApi.js
var require_PolicyApi = __commonJS({
  "node_modules/azure-devops-node-api/PolicyApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var PolicyInterfaces = require_PolicyInterfaces();
    var PolicyApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Policy-api", options);
      }
      createPolicyConfiguration(configuration, project, configurationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "dad91cbe-d183-45f8-9c6e-9c1164472121", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, configuration, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePolicyConfiguration(project, configurationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "dad91cbe-d183-45f8-9c6e-9c1164472121", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyConfiguration(project, configurationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "dad91cbe-d183-45f8-9c6e-9c1164472121", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyConfigurations(project, scope, policyType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              scope,
              policyType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "dad91cbe-d183-45f8-9c6e-9c1164472121", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePolicyConfiguration(configuration, project, configurationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "dad91cbe-d183-45f8-9c6e-9c1164472121", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, configuration, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyEvaluation(project, evaluationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              evaluationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "46aecb7a-5d2c-4647-897b-0209505a9fe4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      requeuePolicyEvaluation(project, evaluationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              evaluationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "46aecb7a-5d2c-4647-897b-0209505a9fe4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyEvaluations(project, artifactId, includeNotApplicable, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactId == null) {
            throw new TypeError("artifactId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              artifactId,
              includeNotApplicable,
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "c23ddff5-229c-4d04-a80b-0fdce9f360c8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyConfigurationRevision(project, configurationId, revisionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId,
              revisionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "fe1e68a2-60d3-43cb-855b-85e41ae97c95", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyConfigurationRevisions(project, configurationId, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              configurationId
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "fe1e68a2-60d3-43cb-855b-85e41ae97c95", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyType(project, typeId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              typeId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "44096322-2d3d-466a-bb30-d1b7de69f61f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPolicyTypes(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "policy", "44096322-2d3d-466a-bb30-d1b7de69f61f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    PolicyApi.RESOURCE_AREA_ID = "fb13a388-40dd-4a04-b530-013a739c72ef";
    exports.PolicyApi = PolicyApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/ProfileInterfaces.js
var require_ProfileInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/ProfileInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AvatarSize;
    (function(AvatarSize2) {
      AvatarSize2[AvatarSize2["Small"] = 0] = "Small";
      AvatarSize2[AvatarSize2["Medium"] = 1] = "Medium";
      AvatarSize2[AvatarSize2["Large"] = 2] = "Large";
    })(AvatarSize = exports.AvatarSize || (exports.AvatarSize = {}));
    exports.TypeInfo = {
      AttributeDescriptor: {
        fields: null
      },
      AttributesContainer: {
        fields: null
      },
      Avatar: {
        fields: null
      },
      AvatarSize: {
        enumValues: {
          "small": 0,
          "medium": 1,
          "large": 2
        }
      },
      CoreProfileAttribute: {
        fields: null
      },
      Country: {
        fields: null
      },
      CreateProfileContext: {
        fields: null
      },
      GeoRegion: {
        fields: null
      },
      Profile: {
        fields: null
      },
      ProfileAttribute: {
        fields: null
      },
      ProfileAttributeBase: {
        fields: null
      },
      ProfileRegion: {
        fields: null
      },
      ProfileRegions: {
        fields: null
      }
    };
    exports.TypeInfo.AttributeDescriptor.fields = {};
    exports.TypeInfo.AttributesContainer.fields = {
      attributes: {}
    };
    exports.TypeInfo.Avatar.fields = {
      size: {
        enumType: exports.TypeInfo.AvatarSize
      },
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.CoreProfileAttribute.fields = {
      descriptor: {
        typeInfo: exports.TypeInfo.AttributeDescriptor
      },
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.Country.fields = {};
    exports.TypeInfo.CreateProfileContext.fields = {};
    exports.TypeInfo.GeoRegion.fields = {};
    exports.TypeInfo.Profile.fields = {
      applicationContainer: {
        typeInfo: exports.TypeInfo.AttributesContainer
      },
      coreAttributes: {},
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.ProfileAttribute.fields = {
      descriptor: {
        typeInfo: exports.TypeInfo.AttributeDescriptor
      },
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.ProfileAttributeBase.fields = {
      descriptor: {
        typeInfo: exports.TypeInfo.AttributeDescriptor
      },
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.ProfileRegion.fields = {};
    exports.TypeInfo.ProfileRegions.fields = {
      regions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ProfileRegion
      }
    };
  }
});

// node_modules/azure-devops-node-api/ProfileApi.js
var require_ProfileApi = __commonJS({
  "node_modules/azure-devops-node-api/ProfileApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var ProfileInterfaces = require_ProfileInterfaces();
    var ProfileApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Profile-api", options);
      }
      deleteProfileAttribute(id, descriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              descriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "Profile", "1392b6ac-d511-492e-af5b-2263e5545a5d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProfileAttribute(id, descriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              descriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "Profile", "1392b6ac-d511-492e-af5b-2263e5545a5d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProfileAttributes(id, partition, modifiedSince, modifiedAfterRevision, withCoreAttributes, coreAttributes) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              partition,
              modifiedSince,
              modifiedAfterRevision,
              withCoreAttributes,
              coreAttributes
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "Profile", "1392b6ac-d511-492e-af5b-2263e5545a5d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setProfileAttribute(container, id, descriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              descriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "Profile", "1392b6ac-d511-492e-af5b-2263e5545a5d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, container, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setProfileAttributes(attributesCollection, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "Profile", "1392b6ac-d511-492e-af5b-2263e5545a5d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, attributesCollection, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAvatar(id, size, format) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              size,
              format
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "67436615-b382-462a-b659-5367a492fb3c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAvatarPreview(container, id, size, format, displayName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              size,
              format,
              displayName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "67436615-b382-462a-b659-5367a492fb3c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, container, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      resetAvatar(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "67436615-b382-462a-b659-5367a492fb3c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setAvatar(container, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "67436615-b382-462a-b659-5367a492fb3c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, container, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getGeoRegion(ipaddress) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              ipaddress
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "3bcda9c0-3078-48a5-a1e0-83bd05931ad0", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createProfile(createProfileContext, autoCreate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              autoCreate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.3", "Profile", "f83735dc-483f-4238-a291-d45f6080a9af", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, createProfileContext, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProfile(id, details, withAttributes, partition, coreAttributes, forceRefresh) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              details,
              withAttributes,
              partition,
              coreAttributes,
              forceRefresh
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.3", "Profile", "f83735dc-483f-4238-a291-d45f6080a9af", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateProfile(profile, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.3", "Profile", "f83735dc-483f-4238-a291-d45f6080a9af", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, profile, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRegions() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "92d8d1c9-26b8-4774-a929-d640a73da524", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSupportedLcids() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "d5bd1aa6-c269-4bcd-ad32-75fa17475584", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getUserDefaults(includeAvatar) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              includeAvatar
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "b583a356-1da7-4237-9f4c-1deb2edbc7e8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      refreshUserDefaults(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "Profile", "b583a356-1da7-4237-9f4c-1deb2edbc7e8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, options);
              let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.ProfileApi = ProfileApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/ProjectAnalysisInterfaces.js
var require_ProjectAnalysisInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/ProjectAnalysisInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AggregationType;
    (function(AggregationType2) {
      AggregationType2[AggregationType2["Hourly"] = 0] = "Hourly";
      AggregationType2[AggregationType2["Daily"] = 1] = "Daily";
    })(AggregationType = exports.AggregationType || (exports.AggregationType = {}));
    var ResultPhase;
    (function(ResultPhase2) {
      ResultPhase2[ResultPhase2["Preliminary"] = 0] = "Preliminary";
      ResultPhase2[ResultPhase2["Full"] = 1] = "Full";
    })(ResultPhase = exports.ResultPhase || (exports.ResultPhase = {}));
    exports.TypeInfo = {
      AggregationType: {
        enumValues: {
          "hourly": 0,
          "daily": 1
        }
      },
      CodeChangeTrendItem: {},
      ProjectActivityMetrics: {},
      ProjectLanguageAnalytics: {},
      RepositoryActivityMetrics: {},
      RepositoryLanguageAnalytics: {},
      ResultPhase: {
        enumValues: {
          "preliminary": 0,
          "full": 1
        }
      }
    };
    exports.TypeInfo.CodeChangeTrendItem.fields = {
      time: {
        isDate: true
      }
    };
    exports.TypeInfo.ProjectActivityMetrics.fields = {
      codeChangesTrend: {
        isArray: true,
        typeInfo: exports.TypeInfo.CodeChangeTrendItem
      }
    };
    exports.TypeInfo.ProjectLanguageAnalytics.fields = {
      repositoryLanguageAnalytics: {
        isArray: true,
        typeInfo: exports.TypeInfo.RepositoryLanguageAnalytics
      },
      resultPhase: {
        enumType: exports.TypeInfo.ResultPhase
      }
    };
    exports.TypeInfo.RepositoryActivityMetrics.fields = {
      codeChangesTrend: {
        isArray: true,
        typeInfo: exports.TypeInfo.CodeChangeTrendItem
      }
    };
    exports.TypeInfo.RepositoryLanguageAnalytics.fields = {
      resultPhase: {
        enumType: exports.TypeInfo.ResultPhase
      },
      updatedTime: {
        isDate: true
      }
    };
  }
});

// node_modules/azure-devops-node-api/ProjectAnalysisApi.js
var require_ProjectAnalysisApi = __commonJS({
  "node_modules/azure-devops-node-api/ProjectAnalysisApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var ProjectAnalysisInterfaces = require_ProjectAnalysisInterfaces();
    var ProjectAnalysisApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-ProjectAnalysis-api", options);
      }
      getProjectLanguageAnalytics(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "projectanalysis", "5b02a779-1867-433f-90b7-d23ed5e33e57", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectLanguageAnalytics, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProjectActivityMetrics(project, fromDate, aggregationType) {
        return __awaiter(this, void 0, void 0, function* () {
          if (fromDate == null) {
            throw new TypeError("fromDate can not be null or undefined");
          }
          if (aggregationType == null) {
            throw new TypeError("aggregationType can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fromDate,
              aggregationType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "projectanalysis", "e40ae584-9ea6-4f06-a7c7-6284651b466b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectActivityMetrics, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getGitRepositoriesActivityMetrics(project, fromDate, aggregationType, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          if (fromDate == null) {
            throw new TypeError("fromDate can not be null or undefined");
          }
          if (aggregationType == null) {
            throw new TypeError("aggregationType can not be null or undefined");
          }
          if (skip == null) {
            throw new TypeError("skip can not be null or undefined");
          }
          if (top == null) {
            throw new TypeError("top can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fromDate,
              aggregationType,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "projectanalysis", "df7fbbca-630a-40e3-8aa3-7a3faf66947e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRepositoryActivityMetrics(project, repositoryId, fromDate, aggregationType) {
        return __awaiter(this, void 0, void 0, function* () {
          if (fromDate == null) {
            throw new TypeError("fromDate can not be null or undefined");
          }
          if (aggregationType == null) {
            throw new TypeError("aggregationType can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              repositoryId
            };
            let queryValues = {
              fromDate,
              aggregationType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "projectanalysis", "df7fbbca-630a-40e3-8aa3-7a3faf66947e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    ProjectAnalysisApi.RESOURCE_AREA_ID = "7658fa33-b1bf-4580-990f-fac5896773d3";
    exports.ProjectAnalysisApi = ProjectAnalysisApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/common/FormInputInterfaces.js
var require_FormInputInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/common/FormInputInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InputDataType;
    (function(InputDataType2) {
      InputDataType2[InputDataType2["None"] = 0] = "None";
      InputDataType2[InputDataType2["String"] = 10] = "String";
      InputDataType2[InputDataType2["Number"] = 20] = "Number";
      InputDataType2[InputDataType2["Boolean"] = 30] = "Boolean";
      InputDataType2[InputDataType2["Guid"] = 40] = "Guid";
      InputDataType2[InputDataType2["Uri"] = 50] = "Uri";
    })(InputDataType = exports.InputDataType || (exports.InputDataType = {}));
    var InputFilterOperator;
    (function(InputFilterOperator2) {
      InputFilterOperator2[InputFilterOperator2["Equals"] = 0] = "Equals";
      InputFilterOperator2[InputFilterOperator2["NotEquals"] = 1] = "NotEquals";
    })(InputFilterOperator = exports.InputFilterOperator || (exports.InputFilterOperator = {}));
    var InputMode;
    (function(InputMode2) {
      InputMode2[InputMode2["None"] = 0] = "None";
      InputMode2[InputMode2["TextBox"] = 10] = "TextBox";
      InputMode2[InputMode2["PasswordBox"] = 20] = "PasswordBox";
      InputMode2[InputMode2["Combo"] = 30] = "Combo";
      InputMode2[InputMode2["RadioButtons"] = 40] = "RadioButtons";
      InputMode2[InputMode2["CheckBox"] = 50] = "CheckBox";
      InputMode2[InputMode2["TextArea"] = 60] = "TextArea";
    })(InputMode = exports.InputMode || (exports.InputMode = {}));
    exports.TypeInfo = {
      InputDataType: {
        enumValues: {
          "none": 0,
          "string": 10,
          "number": 20,
          "boolean": 30,
          "guid": 40,
          "uri": 50
        }
      },
      InputDescriptor: {
        fields: null
      },
      InputFilter: {
        fields: null
      },
      InputFilterCondition: {
        fields: null
      },
      InputFilterOperator: {
        enumValues: {
          "equals": 0,
          "notEquals": 1
        }
      },
      InputMode: {
        enumValues: {
          "none": 0,
          "textBox": 10,
          "passwordBox": 20,
          "combo": 30,
          "radioButtons": 40,
          "checkBox": 50,
          "textArea": 60
        }
      },
      InputValidation: {
        fields: null
      },
      InputValue: {
        fields: null
      },
      InputValues: {
        fields: null
      },
      InputValuesError: {
        fields: null
      },
      InputValuesQuery: {
        fields: null
      }
    };
    exports.TypeInfo.InputDescriptor.fields = {
      inputMode: {
        enumType: exports.TypeInfo.InputMode
      },
      validation: {
        typeInfo: exports.TypeInfo.InputValidation
      },
      values: {
        typeInfo: exports.TypeInfo.InputValues
      }
    };
    exports.TypeInfo.InputFilter.fields = {
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.InputFilterCondition
      }
    };
    exports.TypeInfo.InputFilterCondition.fields = {
      operator: {
        enumType: exports.TypeInfo.InputFilterOperator
      }
    };
    exports.TypeInfo.InputValidation.fields = {
      dataType: {
        enumType: exports.TypeInfo.InputDataType
      }
    };
    exports.TypeInfo.InputValue.fields = {};
    exports.TypeInfo.InputValues.fields = {
      error: {
        typeInfo: exports.TypeInfo.InputValuesError
      },
      possibleValues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InputValue
      }
    };
    exports.TypeInfo.InputValuesError.fields = {};
    exports.TypeInfo.InputValuesQuery.fields = {
      inputValues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InputValues
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/ReleaseInterfaces.js
var require_ReleaseInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/ReleaseInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FormInputInterfaces = require_FormInputInterfaces();
    var AgentArtifactType;
    (function(AgentArtifactType2) {
      AgentArtifactType2[AgentArtifactType2["XamlBuild"] = 0] = "XamlBuild";
      AgentArtifactType2[AgentArtifactType2["Build"] = 1] = "Build";
      AgentArtifactType2[AgentArtifactType2["Jenkins"] = 2] = "Jenkins";
      AgentArtifactType2[AgentArtifactType2["FileShare"] = 3] = "FileShare";
      AgentArtifactType2[AgentArtifactType2["Nuget"] = 4] = "Nuget";
      AgentArtifactType2[AgentArtifactType2["TfsOnPrem"] = 5] = "TfsOnPrem";
      AgentArtifactType2[AgentArtifactType2["GitHub"] = 6] = "GitHub";
      AgentArtifactType2[AgentArtifactType2["TFGit"] = 7] = "TFGit";
      AgentArtifactType2[AgentArtifactType2["ExternalTfsBuild"] = 8] = "ExternalTfsBuild";
      AgentArtifactType2[AgentArtifactType2["Custom"] = 9] = "Custom";
      AgentArtifactType2[AgentArtifactType2["Tfvc"] = 10] = "Tfvc";
    })(AgentArtifactType = exports.AgentArtifactType || (exports.AgentArtifactType = {}));
    var ApprovalExecutionOrder;
    (function(ApprovalExecutionOrder2) {
      ApprovalExecutionOrder2[ApprovalExecutionOrder2["BeforeGates"] = 1] = "BeforeGates";
      ApprovalExecutionOrder2[ApprovalExecutionOrder2["AfterSuccessfulGates"] = 2] = "AfterSuccessfulGates";
      ApprovalExecutionOrder2[ApprovalExecutionOrder2["AfterGatesAlways"] = 4] = "AfterGatesAlways";
    })(ApprovalExecutionOrder = exports.ApprovalExecutionOrder || (exports.ApprovalExecutionOrder = {}));
    var ApprovalFilters;
    (function(ApprovalFilters2) {
      ApprovalFilters2[ApprovalFilters2["None"] = 0] = "None";
      ApprovalFilters2[ApprovalFilters2["ManualApprovals"] = 1] = "ManualApprovals";
      ApprovalFilters2[ApprovalFilters2["AutomatedApprovals"] = 2] = "AutomatedApprovals";
      ApprovalFilters2[ApprovalFilters2["ApprovalSnapshots"] = 4] = "ApprovalSnapshots";
      ApprovalFilters2[ApprovalFilters2["All"] = 7] = "All";
    })(ApprovalFilters = exports.ApprovalFilters || (exports.ApprovalFilters = {}));
    var ApprovalStatus;
    (function(ApprovalStatus2) {
      ApprovalStatus2[ApprovalStatus2["Undefined"] = 0] = "Undefined";
      ApprovalStatus2[ApprovalStatus2["Pending"] = 1] = "Pending";
      ApprovalStatus2[ApprovalStatus2["Approved"] = 2] = "Approved";
      ApprovalStatus2[ApprovalStatus2["Rejected"] = 4] = "Rejected";
      ApprovalStatus2[ApprovalStatus2["Reassigned"] = 6] = "Reassigned";
      ApprovalStatus2[ApprovalStatus2["Canceled"] = 7] = "Canceled";
      ApprovalStatus2[ApprovalStatus2["Skipped"] = 8] = "Skipped";
    })(ApprovalStatus = exports.ApprovalStatus || (exports.ApprovalStatus = {}));
    var ApprovalType;
    (function(ApprovalType2) {
      ApprovalType2[ApprovalType2["Undefined"] = 0] = "Undefined";
      ApprovalType2[ApprovalType2["PreDeploy"] = 1] = "PreDeploy";
      ApprovalType2[ApprovalType2["PostDeploy"] = 2] = "PostDeploy";
      ApprovalType2[ApprovalType2["All"] = 3] = "All";
    })(ApprovalType = exports.ApprovalType || (exports.ApprovalType = {}));
    var AuditAction;
    (function(AuditAction2) {
      AuditAction2[AuditAction2["Add"] = 1] = "Add";
      AuditAction2[AuditAction2["Update"] = 2] = "Update";
      AuditAction2[AuditAction2["Delete"] = 3] = "Delete";
      AuditAction2[AuditAction2["Undelete"] = 4] = "Undelete";
    })(AuditAction = exports.AuditAction || (exports.AuditAction = {}));
    var AuthorizationHeaderFor;
    (function(AuthorizationHeaderFor2) {
      AuthorizationHeaderFor2[AuthorizationHeaderFor2["RevalidateApproverIdentity"] = 0] = "RevalidateApproverIdentity";
      AuthorizationHeaderFor2[AuthorizationHeaderFor2["OnBehalfOf"] = 1] = "OnBehalfOf";
    })(AuthorizationHeaderFor = exports.AuthorizationHeaderFor || (exports.AuthorizationHeaderFor = {}));
    var ConditionType;
    (function(ConditionType2) {
      ConditionType2[ConditionType2["Undefined"] = 0] = "Undefined";
      ConditionType2[ConditionType2["Event"] = 1] = "Event";
      ConditionType2[ConditionType2["EnvironmentState"] = 2] = "EnvironmentState";
      ConditionType2[ConditionType2["Artifact"] = 4] = "Artifact";
    })(ConditionType = exports.ConditionType || (exports.ConditionType = {}));
    var DeploymentAuthorizationOwner;
    (function(DeploymentAuthorizationOwner2) {
      DeploymentAuthorizationOwner2[DeploymentAuthorizationOwner2["Automatic"] = 0] = "Automatic";
      DeploymentAuthorizationOwner2[DeploymentAuthorizationOwner2["DeploymentSubmitter"] = 1] = "DeploymentSubmitter";
      DeploymentAuthorizationOwner2[DeploymentAuthorizationOwner2["FirstPreDeploymentApprover"] = 2] = "FirstPreDeploymentApprover";
    })(DeploymentAuthorizationOwner = exports.DeploymentAuthorizationOwner || (exports.DeploymentAuthorizationOwner = {}));
    var DeploymentExpands;
    (function(DeploymentExpands2) {
      DeploymentExpands2[DeploymentExpands2["All"] = 0] = "All";
      DeploymentExpands2[DeploymentExpands2["DeploymentOnly"] = 1] = "DeploymentOnly";
      DeploymentExpands2[DeploymentExpands2["Approvals"] = 2] = "Approvals";
      DeploymentExpands2[DeploymentExpands2["Artifacts"] = 4] = "Artifacts";
    })(DeploymentExpands = exports.DeploymentExpands || (exports.DeploymentExpands = {}));
    var DeploymentOperationStatus;
    (function(DeploymentOperationStatus2) {
      DeploymentOperationStatus2[DeploymentOperationStatus2["Undefined"] = 0] = "Undefined";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Queued"] = 1] = "Queued";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Scheduled"] = 2] = "Scheduled";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Pending"] = 4] = "Pending";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Approved"] = 8] = "Approved";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Rejected"] = 16] = "Rejected";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Deferred"] = 32] = "Deferred";
      DeploymentOperationStatus2[DeploymentOperationStatus2["QueuedForAgent"] = 64] = "QueuedForAgent";
      DeploymentOperationStatus2[DeploymentOperationStatus2["PhaseInProgress"] = 128] = "PhaseInProgress";
      DeploymentOperationStatus2[DeploymentOperationStatus2["PhaseSucceeded"] = 256] = "PhaseSucceeded";
      DeploymentOperationStatus2[DeploymentOperationStatus2["PhasePartiallySucceeded"] = 512] = "PhasePartiallySucceeded";
      DeploymentOperationStatus2[DeploymentOperationStatus2["PhaseFailed"] = 1024] = "PhaseFailed";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Canceled"] = 2048] = "Canceled";
      DeploymentOperationStatus2[DeploymentOperationStatus2["PhaseCanceled"] = 4096] = "PhaseCanceled";
      DeploymentOperationStatus2[DeploymentOperationStatus2["ManualInterventionPending"] = 8192] = "ManualInterventionPending";
      DeploymentOperationStatus2[DeploymentOperationStatus2["QueuedForPipeline"] = 16384] = "QueuedForPipeline";
      DeploymentOperationStatus2[DeploymentOperationStatus2["Cancelling"] = 32768] = "Cancelling";
      DeploymentOperationStatus2[DeploymentOperationStatus2["EvaluatingGates"] = 65536] = "EvaluatingGates";
      DeploymentOperationStatus2[DeploymentOperationStatus2["GateFailed"] = 131072] = "GateFailed";
      DeploymentOperationStatus2[DeploymentOperationStatus2["All"] = 258047] = "All";
    })(DeploymentOperationStatus = exports.DeploymentOperationStatus || (exports.DeploymentOperationStatus = {}));
    var DeploymentReason;
    (function(DeploymentReason2) {
      DeploymentReason2[DeploymentReason2["None"] = 0] = "None";
      DeploymentReason2[DeploymentReason2["Manual"] = 1] = "Manual";
      DeploymentReason2[DeploymentReason2["Automated"] = 2] = "Automated";
      DeploymentReason2[DeploymentReason2["Scheduled"] = 4] = "Scheduled";
      DeploymentReason2[DeploymentReason2["RedeployTrigger"] = 8] = "RedeployTrigger";
    })(DeploymentReason = exports.DeploymentReason || (exports.DeploymentReason = {}));
    var DeploymentsQueryType;
    (function(DeploymentsQueryType2) {
      DeploymentsQueryType2[DeploymentsQueryType2["Regular"] = 1] = "Regular";
      DeploymentsQueryType2[DeploymentsQueryType2["FailingSince"] = 2] = "FailingSince";
    })(DeploymentsQueryType = exports.DeploymentsQueryType || (exports.DeploymentsQueryType = {}));
    var DeploymentStatus;
    (function(DeploymentStatus2) {
      DeploymentStatus2[DeploymentStatus2["Undefined"] = 0] = "Undefined";
      DeploymentStatus2[DeploymentStatus2["NotDeployed"] = 1] = "NotDeployed";
      DeploymentStatus2[DeploymentStatus2["InProgress"] = 2] = "InProgress";
      DeploymentStatus2[DeploymentStatus2["Succeeded"] = 4] = "Succeeded";
      DeploymentStatus2[DeploymentStatus2["PartiallySucceeded"] = 8] = "PartiallySucceeded";
      DeploymentStatus2[DeploymentStatus2["Failed"] = 16] = "Failed";
      DeploymentStatus2[DeploymentStatus2["All"] = 31] = "All";
    })(DeploymentStatus = exports.DeploymentStatus || (exports.DeploymentStatus = {}));
    var DeployPhaseStatus;
    (function(DeployPhaseStatus2) {
      DeployPhaseStatus2[DeployPhaseStatus2["Undefined"] = 0] = "Undefined";
      DeployPhaseStatus2[DeployPhaseStatus2["NotStarted"] = 1] = "NotStarted";
      DeployPhaseStatus2[DeployPhaseStatus2["InProgress"] = 2] = "InProgress";
      DeployPhaseStatus2[DeployPhaseStatus2["PartiallySucceeded"] = 4] = "PartiallySucceeded";
      DeployPhaseStatus2[DeployPhaseStatus2["Succeeded"] = 8] = "Succeeded";
      DeployPhaseStatus2[DeployPhaseStatus2["Failed"] = 16] = "Failed";
      DeployPhaseStatus2[DeployPhaseStatus2["Canceled"] = 32] = "Canceled";
      DeployPhaseStatus2[DeployPhaseStatus2["Skipped"] = 64] = "Skipped";
      DeployPhaseStatus2[DeployPhaseStatus2["Cancelling"] = 128] = "Cancelling";
    })(DeployPhaseStatus = exports.DeployPhaseStatus || (exports.DeployPhaseStatus = {}));
    var DeployPhaseTypes;
    (function(DeployPhaseTypes2) {
      DeployPhaseTypes2[DeployPhaseTypes2["Undefined"] = 0] = "Undefined";
      DeployPhaseTypes2[DeployPhaseTypes2["AgentBasedDeployment"] = 1] = "AgentBasedDeployment";
      DeployPhaseTypes2[DeployPhaseTypes2["RunOnServer"] = 2] = "RunOnServer";
      DeployPhaseTypes2[DeployPhaseTypes2["MachineGroupBasedDeployment"] = 4] = "MachineGroupBasedDeployment";
      DeployPhaseTypes2[DeployPhaseTypes2["DeploymentGates"] = 8] = "DeploymentGates";
    })(DeployPhaseTypes = exports.DeployPhaseTypes || (exports.DeployPhaseTypes = {}));
    var EnvironmentStatus;
    (function(EnvironmentStatus2) {
      EnvironmentStatus2[EnvironmentStatus2["Undefined"] = 0] = "Undefined";
      EnvironmentStatus2[EnvironmentStatus2["NotStarted"] = 1] = "NotStarted";
      EnvironmentStatus2[EnvironmentStatus2["InProgress"] = 2] = "InProgress";
      EnvironmentStatus2[EnvironmentStatus2["Succeeded"] = 4] = "Succeeded";
      EnvironmentStatus2[EnvironmentStatus2["Canceled"] = 8] = "Canceled";
      EnvironmentStatus2[EnvironmentStatus2["Rejected"] = 16] = "Rejected";
      EnvironmentStatus2[EnvironmentStatus2["Queued"] = 32] = "Queued";
      EnvironmentStatus2[EnvironmentStatus2["Scheduled"] = 64] = "Scheduled";
      EnvironmentStatus2[EnvironmentStatus2["PartiallySucceeded"] = 128] = "PartiallySucceeded";
    })(EnvironmentStatus = exports.EnvironmentStatus || (exports.EnvironmentStatus = {}));
    var EnvironmentTriggerType;
    (function(EnvironmentTriggerType2) {
      EnvironmentTriggerType2[EnvironmentTriggerType2["Undefined"] = 0] = "Undefined";
      EnvironmentTriggerType2[EnvironmentTriggerType2["DeploymentGroupRedeploy"] = 1] = "DeploymentGroupRedeploy";
      EnvironmentTriggerType2[EnvironmentTriggerType2["RollbackRedeploy"] = 2] = "RollbackRedeploy";
    })(EnvironmentTriggerType = exports.EnvironmentTriggerType || (exports.EnvironmentTriggerType = {}));
    var FolderPathQueryOrder;
    (function(FolderPathQueryOrder2) {
      FolderPathQueryOrder2[FolderPathQueryOrder2["None"] = 0] = "None";
      FolderPathQueryOrder2[FolderPathQueryOrder2["Ascending"] = 1] = "Ascending";
      FolderPathQueryOrder2[FolderPathQueryOrder2["Descending"] = 2] = "Descending";
    })(FolderPathQueryOrder = exports.FolderPathQueryOrder || (exports.FolderPathQueryOrder = {}));
    var GateStatus;
    (function(GateStatus2) {
      GateStatus2[GateStatus2["None"] = 0] = "None";
      GateStatus2[GateStatus2["Pending"] = 1] = "Pending";
      GateStatus2[GateStatus2["InProgress"] = 2] = "InProgress";
      GateStatus2[GateStatus2["Succeeded"] = 4] = "Succeeded";
      GateStatus2[GateStatus2["Failed"] = 8] = "Failed";
      GateStatus2[GateStatus2["Canceled"] = 16] = "Canceled";
    })(GateStatus = exports.GateStatus || (exports.GateStatus = {}));
    var IssueSource;
    (function(IssueSource2) {
      IssueSource2[IssueSource2["None"] = 0] = "None";
      IssueSource2[IssueSource2["User"] = 1] = "User";
      IssueSource2[IssueSource2["System"] = 2] = "System";
    })(IssueSource = exports.IssueSource || (exports.IssueSource = {}));
    var MailSectionType;
    (function(MailSectionType2) {
      MailSectionType2[MailSectionType2["Details"] = 0] = "Details";
      MailSectionType2[MailSectionType2["Environments"] = 1] = "Environments";
      MailSectionType2[MailSectionType2["Issues"] = 2] = "Issues";
      MailSectionType2[MailSectionType2["TestResults"] = 3] = "TestResults";
      MailSectionType2[MailSectionType2["WorkItems"] = 4] = "WorkItems";
      MailSectionType2[MailSectionType2["ReleaseInfo"] = 5] = "ReleaseInfo";
    })(MailSectionType = exports.MailSectionType || (exports.MailSectionType = {}));
    var ManualInterventionStatus;
    (function(ManualInterventionStatus2) {
      ManualInterventionStatus2[ManualInterventionStatus2["Unknown"] = 0] = "Unknown";
      ManualInterventionStatus2[ManualInterventionStatus2["Pending"] = 1] = "Pending";
      ManualInterventionStatus2[ManualInterventionStatus2["Rejected"] = 2] = "Rejected";
      ManualInterventionStatus2[ManualInterventionStatus2["Approved"] = 4] = "Approved";
      ManualInterventionStatus2[ManualInterventionStatus2["Canceled"] = 8] = "Canceled";
    })(ManualInterventionStatus = exports.ManualInterventionStatus || (exports.ManualInterventionStatus = {}));
    var ParallelExecutionTypes;
    (function(ParallelExecutionTypes2) {
      ParallelExecutionTypes2[ParallelExecutionTypes2["None"] = 0] = "None";
      ParallelExecutionTypes2[ParallelExecutionTypes2["MultiConfiguration"] = 1] = "MultiConfiguration";
      ParallelExecutionTypes2[ParallelExecutionTypes2["MultiMachine"] = 2] = "MultiMachine";
    })(ParallelExecutionTypes = exports.ParallelExecutionTypes || (exports.ParallelExecutionTypes = {}));
    var PipelineProcessTypes;
    (function(PipelineProcessTypes2) {
      PipelineProcessTypes2[PipelineProcessTypes2["Designer"] = 1] = "Designer";
      PipelineProcessTypes2[PipelineProcessTypes2["Yaml"] = 2] = "Yaml";
    })(PipelineProcessTypes = exports.PipelineProcessTypes || (exports.PipelineProcessTypes = {}));
    var PropertySelectorType;
    (function(PropertySelectorType2) {
      PropertySelectorType2[PropertySelectorType2["Inclusion"] = 0] = "Inclusion";
      PropertySelectorType2[PropertySelectorType2["Exclusion"] = 1] = "Exclusion";
    })(PropertySelectorType = exports.PropertySelectorType || (exports.PropertySelectorType = {}));
    var PullRequestSystemType;
    (function(PullRequestSystemType2) {
      PullRequestSystemType2[PullRequestSystemType2["None"] = 0] = "None";
      PullRequestSystemType2[PullRequestSystemType2["TfsGit"] = 1] = "TfsGit";
      PullRequestSystemType2[PullRequestSystemType2["GitHub"] = 2] = "GitHub";
    })(PullRequestSystemType = exports.PullRequestSystemType || (exports.PullRequestSystemType = {}));
    var ReleaseDefinitionExpands;
    (function(ReleaseDefinitionExpands2) {
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["None"] = 0] = "None";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["Environments"] = 2] = "Environments";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["Artifacts"] = 4] = "Artifacts";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["Triggers"] = 8] = "Triggers";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["Variables"] = 16] = "Variables";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["Tags"] = 32] = "Tags";
      ReleaseDefinitionExpands2[ReleaseDefinitionExpands2["LastRelease"] = 64] = "LastRelease";
    })(ReleaseDefinitionExpands = exports.ReleaseDefinitionExpands || (exports.ReleaseDefinitionExpands = {}));
    var ReleaseDefinitionQueryOrder;
    (function(ReleaseDefinitionQueryOrder2) {
      ReleaseDefinitionQueryOrder2[ReleaseDefinitionQueryOrder2["IdAscending"] = 0] = "IdAscending";
      ReleaseDefinitionQueryOrder2[ReleaseDefinitionQueryOrder2["IdDescending"] = 1] = "IdDescending";
      ReleaseDefinitionQueryOrder2[ReleaseDefinitionQueryOrder2["NameAscending"] = 2] = "NameAscending";
      ReleaseDefinitionQueryOrder2[ReleaseDefinitionQueryOrder2["NameDescending"] = 3] = "NameDescending";
    })(ReleaseDefinitionQueryOrder = exports.ReleaseDefinitionQueryOrder || (exports.ReleaseDefinitionQueryOrder = {}));
    var ReleaseDefinitionSource;
    (function(ReleaseDefinitionSource2) {
      ReleaseDefinitionSource2[ReleaseDefinitionSource2["Undefined"] = 0] = "Undefined";
      ReleaseDefinitionSource2[ReleaseDefinitionSource2["RestApi"] = 1] = "RestApi";
      ReleaseDefinitionSource2[ReleaseDefinitionSource2["UserInterface"] = 2] = "UserInterface";
      ReleaseDefinitionSource2[ReleaseDefinitionSource2["Ibiza"] = 4] = "Ibiza";
      ReleaseDefinitionSource2[ReleaseDefinitionSource2["PortalExtensionApi"] = 8] = "PortalExtensionApi";
    })(ReleaseDefinitionSource = exports.ReleaseDefinitionSource || (exports.ReleaseDefinitionSource = {}));
    var ReleaseEnvironmentExpands;
    (function(ReleaseEnvironmentExpands2) {
      ReleaseEnvironmentExpands2[ReleaseEnvironmentExpands2["None"] = 0] = "None";
      ReleaseEnvironmentExpands2[ReleaseEnvironmentExpands2["Tasks"] = 1] = "Tasks";
    })(ReleaseEnvironmentExpands = exports.ReleaseEnvironmentExpands || (exports.ReleaseEnvironmentExpands = {}));
    var ReleaseExpands;
    (function(ReleaseExpands2) {
      ReleaseExpands2[ReleaseExpands2["None"] = 0] = "None";
      ReleaseExpands2[ReleaseExpands2["Environments"] = 2] = "Environments";
      ReleaseExpands2[ReleaseExpands2["Artifacts"] = 4] = "Artifacts";
      ReleaseExpands2[ReleaseExpands2["Approvals"] = 8] = "Approvals";
      ReleaseExpands2[ReleaseExpands2["ManualInterventions"] = 16] = "ManualInterventions";
      ReleaseExpands2[ReleaseExpands2["Variables"] = 32] = "Variables";
      ReleaseExpands2[ReleaseExpands2["Tags"] = 64] = "Tags";
    })(ReleaseExpands = exports.ReleaseExpands || (exports.ReleaseExpands = {}));
    var ReleaseQueryOrder;
    (function(ReleaseQueryOrder2) {
      ReleaseQueryOrder2[ReleaseQueryOrder2["Descending"] = 0] = "Descending";
      ReleaseQueryOrder2[ReleaseQueryOrder2["Ascending"] = 1] = "Ascending";
    })(ReleaseQueryOrder = exports.ReleaseQueryOrder || (exports.ReleaseQueryOrder = {}));
    var ReleaseReason;
    (function(ReleaseReason2) {
      ReleaseReason2[ReleaseReason2["None"] = 0] = "None";
      ReleaseReason2[ReleaseReason2["Manual"] = 1] = "Manual";
      ReleaseReason2[ReleaseReason2["ContinuousIntegration"] = 2] = "ContinuousIntegration";
      ReleaseReason2[ReleaseReason2["Schedule"] = 3] = "Schedule";
      ReleaseReason2[ReleaseReason2["PullRequest"] = 4] = "PullRequest";
    })(ReleaseReason = exports.ReleaseReason || (exports.ReleaseReason = {}));
    var ReleaseStatus;
    (function(ReleaseStatus2) {
      ReleaseStatus2[ReleaseStatus2["Undefined"] = 0] = "Undefined";
      ReleaseStatus2[ReleaseStatus2["Draft"] = 1] = "Draft";
      ReleaseStatus2[ReleaseStatus2["Active"] = 2] = "Active";
      ReleaseStatus2[ReleaseStatus2["Abandoned"] = 4] = "Abandoned";
    })(ReleaseStatus = exports.ReleaseStatus || (exports.ReleaseStatus = {}));
    var ReleaseTriggerType;
    (function(ReleaseTriggerType2) {
      ReleaseTriggerType2[ReleaseTriggerType2["Undefined"] = 0] = "Undefined";
      ReleaseTriggerType2[ReleaseTriggerType2["ArtifactSource"] = 1] = "ArtifactSource";
      ReleaseTriggerType2[ReleaseTriggerType2["Schedule"] = 2] = "Schedule";
      ReleaseTriggerType2[ReleaseTriggerType2["SourceRepo"] = 3] = "SourceRepo";
      ReleaseTriggerType2[ReleaseTriggerType2["ContainerImage"] = 4] = "ContainerImage";
      ReleaseTriggerType2[ReleaseTriggerType2["Package"] = 5] = "Package";
      ReleaseTriggerType2[ReleaseTriggerType2["PullRequest"] = 6] = "PullRequest";
    })(ReleaseTriggerType = exports.ReleaseTriggerType || (exports.ReleaseTriggerType = {}));
    var ScheduleDays;
    (function(ScheduleDays2) {
      ScheduleDays2[ScheduleDays2["None"] = 0] = "None";
      ScheduleDays2[ScheduleDays2["Monday"] = 1] = "Monday";
      ScheduleDays2[ScheduleDays2["Tuesday"] = 2] = "Tuesday";
      ScheduleDays2[ScheduleDays2["Wednesday"] = 4] = "Wednesday";
      ScheduleDays2[ScheduleDays2["Thursday"] = 8] = "Thursday";
      ScheduleDays2[ScheduleDays2["Friday"] = 16] = "Friday";
      ScheduleDays2[ScheduleDays2["Saturday"] = 32] = "Saturday";
      ScheduleDays2[ScheduleDays2["Sunday"] = 64] = "Sunday";
      ScheduleDays2[ScheduleDays2["All"] = 127] = "All";
    })(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));
    var SenderType;
    (function(SenderType2) {
      SenderType2[SenderType2["ServiceAccount"] = 1] = "ServiceAccount";
      SenderType2[SenderType2["RequestingUser"] = 2] = "RequestingUser";
    })(SenderType = exports.SenderType || (exports.SenderType = {}));
    var SingleReleaseExpands;
    (function(SingleReleaseExpands2) {
      SingleReleaseExpands2[SingleReleaseExpands2["None"] = 0] = "None";
      SingleReleaseExpands2[SingleReleaseExpands2["Tasks"] = 1] = "Tasks";
    })(SingleReleaseExpands = exports.SingleReleaseExpands || (exports.SingleReleaseExpands = {}));
    var TaskStatus;
    (function(TaskStatus2) {
      TaskStatus2[TaskStatus2["Unknown"] = 0] = "Unknown";
      TaskStatus2[TaskStatus2["Pending"] = 1] = "Pending";
      TaskStatus2[TaskStatus2["InProgress"] = 2] = "InProgress";
      TaskStatus2[TaskStatus2["Success"] = 3] = "Success";
      TaskStatus2[TaskStatus2["Failure"] = 4] = "Failure";
      TaskStatus2[TaskStatus2["Canceled"] = 5] = "Canceled";
      TaskStatus2[TaskStatus2["Skipped"] = 6] = "Skipped";
      TaskStatus2[TaskStatus2["Succeeded"] = 7] = "Succeeded";
      TaskStatus2[TaskStatus2["Failed"] = 8] = "Failed";
      TaskStatus2[TaskStatus2["PartiallySucceeded"] = 9] = "PartiallySucceeded";
    })(TaskStatus = exports.TaskStatus || (exports.TaskStatus = {}));
    var VariableGroupActionFilter;
    (function(VariableGroupActionFilter2) {
      VariableGroupActionFilter2[VariableGroupActionFilter2["None"] = 0] = "None";
      VariableGroupActionFilter2[VariableGroupActionFilter2["Manage"] = 2] = "Manage";
      VariableGroupActionFilter2[VariableGroupActionFilter2["Use"] = 16] = "Use";
    })(VariableGroupActionFilter = exports.VariableGroupActionFilter || (exports.VariableGroupActionFilter = {}));
    var YamlFileSourceTypes;
    (function(YamlFileSourceTypes2) {
      YamlFileSourceTypes2[YamlFileSourceTypes2["None"] = 0] = "None";
      YamlFileSourceTypes2[YamlFileSourceTypes2["TFSGit"] = 1] = "TFSGit";
    })(YamlFileSourceTypes = exports.YamlFileSourceTypes || (exports.YamlFileSourceTypes = {}));
    exports.TypeInfo = {
      AgentArtifactDefinition: {},
      AgentArtifactType: {
        enumValues: {
          "xamlBuild": 0,
          "build": 1,
          "jenkins": 2,
          "fileShare": 3,
          "nuget": 4,
          "tfsOnPrem": 5,
          "gitHub": 6,
          "tfGit": 7,
          "externalTfsBuild": 8,
          "custom": 9,
          "tfvc": 10
        }
      },
      AgentBasedDeployPhase: {},
      AgentDeploymentInput: {},
      ApprovalExecutionOrder: {
        enumValues: {
          "beforeGates": 1,
          "afterSuccessfulGates": 2,
          "afterGatesAlways": 4
        }
      },
      ApprovalFilters: {
        enumValues: {
          "none": 0,
          "manualApprovals": 1,
          "automatedApprovals": 2,
          "approvalSnapshots": 4,
          "all": 7
        }
      },
      ApprovalOptions: {},
      ApprovalStatus: {
        enumValues: {
          "undefined": 0,
          "pending": 1,
          "approved": 2,
          "rejected": 4,
          "reassigned": 6,
          "canceled": 7,
          "skipped": 8
        }
      },
      ApprovalType: {
        enumValues: {
          "undefined": 0,
          "preDeploy": 1,
          "postDeploy": 2,
          "all": 3
        }
      },
      ArtifactContributionDefinition: {},
      ArtifactMetadata: {},
      ArtifactSourceTrigger: {},
      ArtifactTypeDefinition: {},
      ArtifactVersion: {},
      ArtifactVersionQueryResult: {},
      AuditAction: {
        enumValues: {
          "add": 1,
          "update": 2,
          "delete": 3,
          "undelete": 4
        }
      },
      AuthorizationHeaderFor: {
        enumValues: {
          "revalidateApproverIdentity": 0,
          "onBehalfOf": 1
        }
      },
      AutoTriggerIssue: {},
      AzureKeyVaultVariableGroupProviderData: {},
      AzureKeyVaultVariableValue: {},
      BuildVersion: {},
      Change: {},
      CodeRepositoryReference: {},
      Condition: {},
      ConditionType: {
        enumValues: {
          "undefined": 0,
          "event": 1,
          "environmentState": 2,
          "artifact": 4
        }
      },
      ContainerImageTrigger: {},
      ContinuousDeploymentTriggerIssue: {},
      Deployment: {},
      DeploymentApprovalCompletedEvent: {},
      DeploymentApprovalPendingEvent: {},
      DeploymentAttempt: {},
      DeploymentAuthorizationInfo: {},
      DeploymentAuthorizationOwner: {
        enumValues: {
          "automatic": 0,
          "deploymentSubmitter": 1,
          "firstPreDeploymentApprover": 2
        }
      },
      DeploymentCompletedEvent: {},
      DeploymentExpands: {
        enumValues: {
          "all": 0,
          "deploymentOnly": 1,
          "approvals": 2,
          "artifacts": 4
        }
      },
      DeploymentJob: {},
      DeploymentManualInterventionPendingEvent: {},
      DeploymentOperationStatus: {
        enumValues: {
          "undefined": 0,
          "queued": 1,
          "scheduled": 2,
          "pending": 4,
          "approved": 8,
          "rejected": 16,
          "deferred": 32,
          "queuedForAgent": 64,
          "phaseInProgress": 128,
          "phaseSucceeded": 256,
          "phasePartiallySucceeded": 512,
          "phaseFailed": 1024,
          "canceled": 2048,
          "phaseCanceled": 4096,
          "manualInterventionPending": 8192,
          "queuedForPipeline": 16384,
          "cancelling": 32768,
          "evaluatingGates": 65536,
          "gateFailed": 131072,
          "all": 258047
        }
      },
      DeploymentQueryParameters: {},
      DeploymentReason: {
        enumValues: {
          "none": 0,
          "manual": 1,
          "automated": 2,
          "scheduled": 4,
          "redeployTrigger": 8
        }
      },
      DeploymentsQueryType: {
        enumValues: {
          "regular": 1,
          "failingSince": 2
        }
      },
      DeploymentStartedEvent: {},
      DeploymentStatus: {
        enumValues: {
          "undefined": 0,
          "notDeployed": 1,
          "inProgress": 2,
          "succeeded": 4,
          "partiallySucceeded": 8,
          "failed": 16,
          "all": 31
        }
      },
      DeployPhase: {},
      DeployPhaseStatus: {
        enumValues: {
          "undefined": 0,
          "notStarted": 1,
          "inProgress": 2,
          "partiallySucceeded": 4,
          "succeeded": 8,
          "failed": 16,
          "canceled": 32,
          "skipped": 64,
          "cancelling": 128
        }
      },
      DeployPhaseTypes: {
        enumValues: {
          "undefined": 0,
          "agentBasedDeployment": 1,
          "runOnServer": 2,
          "machineGroupBasedDeployment": 4,
          "deploymentGates": 8
        }
      },
      EnvironmentStatus: {
        enumValues: {
          "undefined": 0,
          "notStarted": 1,
          "inProgress": 2,
          "succeeded": 4,
          "canceled": 8,
          "rejected": 16,
          "queued": 32,
          "scheduled": 64,
          "partiallySucceeded": 128
        }
      },
      EnvironmentTrigger: {},
      EnvironmentTriggerType: {
        enumValues: {
          "undefined": 0,
          "deploymentGroupRedeploy": 1,
          "rollbackRedeploy": 2
        }
      },
      ExecutionInput: {},
      Folder: {},
      FolderPathQueryOrder: {
        enumValues: {
          "none": 0,
          "ascending": 1,
          "descending": 2
        }
      },
      GatesDeployPhase: {},
      GateStatus: {
        enumValues: {
          "none": 0,
          "pending": 1,
          "inProgress": 2,
          "succeeded": 4,
          "failed": 8,
          "canceled": 16
        }
      },
      IgnoredGate: {},
      IssueSource: {
        enumValues: {
          "none": 0,
          "user": 1,
          "system": 2
        }
      },
      MachineGroupBasedDeployPhase: {},
      MailMessage: {},
      MailSectionType: {
        enumValues: {
          "details": 0,
          "environments": 1,
          "issues": 2,
          "testResults": 3,
          "workItems": 4,
          "releaseInfo": 5
        }
      },
      ManualIntervention: {},
      ManualInterventionStatus: {
        enumValues: {
          "unknown": 0,
          "pending": 1,
          "rejected": 2,
          "approved": 4,
          "canceled": 8
        }
      },
      ManualInterventionUpdateMetadata: {},
      MultiConfigInput: {},
      MultiMachineInput: {},
      PackageTrigger: {},
      ParallelExecutionInputBase: {},
      ParallelExecutionTypes: {
        enumValues: {
          "none": 0,
          "multiConfiguration": 1,
          "multiMachine": 2
        }
      },
      PipelineProcess: {},
      PipelineProcessTypes: {
        enumValues: {
          "designer": 1,
          "yaml": 2
        }
      },
      PropertySelector: {},
      PropertySelectorType: {
        enumValues: {
          "inclusion": 0,
          "exclusion": 1
        }
      },
      PullRequestConfiguration: {},
      PullRequestSystemType: {
        enumValues: {
          "none": 0,
          "tfsGit": 1,
          "gitHub": 2
        }
      },
      PullRequestTrigger: {},
      Release: {},
      ReleaseAbandonedEvent: {},
      ReleaseApproval: {},
      ReleaseApprovalHistory: {},
      ReleaseApprovalPendingEvent: {},
      ReleaseCondition: {},
      ReleaseCreatedEvent: {},
      ReleaseDefinition: {},
      ReleaseDefinitionApprovals: {},
      ReleaseDefinitionEnvironment: {},
      ReleaseDefinitionEnvironmentTemplate: {},
      ReleaseDefinitionExpands: {
        enumValues: {
          "none": 0,
          "environments": 2,
          "artifacts": 4,
          "triggers": 8,
          "variables": 16,
          "tags": 32,
          "lastRelease": 64
        }
      },
      ReleaseDefinitionQueryOrder: {
        enumValues: {
          "idAscending": 0,
          "idDescending": 1,
          "nameAscending": 2,
          "nameDescending": 3
        }
      },
      ReleaseDefinitionRevision: {},
      ReleaseDefinitionSource: {
        enumValues: {
          "undefined": 0,
          "restApi": 1,
          "userInterface": 2,
          "ibiza": 4,
          "portalExtensionApi": 8
        }
      },
      ReleaseDefinitionSummary: {},
      ReleaseDeployPhase: {},
      ReleaseEnvironment: {},
      ReleaseEnvironmentCompletedEvent: {},
      ReleaseEnvironmentExpands: {
        enumValues: {
          "none": 0,
          "tasks": 1
        }
      },
      ReleaseEnvironmentStatusUpdatedEvent: {},
      ReleaseEnvironmentUpdateMetadata: {},
      ReleaseExpands: {
        enumValues: {
          "none": 0,
          "environments": 2,
          "artifacts": 4,
          "approvals": 8,
          "manualInterventions": 16,
          "variables": 32,
          "tags": 64
        }
      },
      ReleaseGates: {},
      ReleaseGatesPhase: {},
      ReleaseNotCreatedEvent: {},
      ReleaseQueryOrder: {
        enumValues: {
          "descending": 0,
          "ascending": 1
        }
      },
      ReleaseReason: {
        enumValues: {
          "none": 0,
          "manual": 1,
          "continuousIntegration": 2,
          "schedule": 3,
          "pullRequest": 4
        }
      },
      ReleaseReference: {},
      ReleaseRevision: {},
      ReleaseSchedule: {},
      ReleaseStartMetadata: {},
      ReleaseStatus: {
        enumValues: {
          "undefined": 0,
          "draft": 1,
          "active": 2,
          "abandoned": 4
        }
      },
      ReleaseTask: {},
      ReleaseTaskAttachment: {},
      ReleaseTasksUpdatedEvent: {},
      ReleaseTriggerBase: {},
      ReleaseTriggerType: {
        enumValues: {
          "undefined": 0,
          "artifactSource": 1,
          "schedule": 2,
          "sourceRepo": 3,
          "containerImage": 4,
          "package": 5,
          "pullRequest": 6
        }
      },
      ReleaseUpdatedEvent: {},
      ReleaseUpdateMetadata: {},
      RunOnServerDeployPhase: {},
      ScheduleDays: {
        enumValues: {
          "none": 0,
          "monday": 1,
          "tuesday": 2,
          "wednesday": 4,
          "thursday": 8,
          "friday": 16,
          "saturday": 32,
          "sunday": 64,
          "all": 127
        }
      },
      ScheduledReleaseTrigger: {},
      SenderType: {
        enumValues: {
          "serviceAccount": 1,
          "requestingUser": 2
        }
      },
      ServerDeploymentInput: {},
      SingleReleaseExpands: {
        enumValues: {
          "none": 0,
          "tasks": 1
        }
      },
      SourcePullRequestVersion: {},
      SourceRepoTrigger: {},
      SummaryMailSection: {},
      TaskStatus: {
        enumValues: {
          "unknown": 0,
          "pending": 1,
          "inProgress": 2,
          "success": 3,
          "failure": 4,
          "canceled": 5,
          "skipped": 6,
          "succeeded": 7,
          "failed": 8,
          "partiallySucceeded": 9
        }
      },
      VariableGroup: {},
      VariableGroupActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      YamlFileSource: {},
      YamlFileSourceTypes: {
        enumValues: {
          "none": 0,
          "tfsGit": 1
        }
      },
      YamlPipelineProcess: {}
    };
    exports.TypeInfo.AgentArtifactDefinition.fields = {
      artifactType: {
        enumType: exports.TypeInfo.AgentArtifactType
      }
    };
    exports.TypeInfo.AgentBasedDeployPhase.fields = {
      deploymentInput: {
        typeInfo: exports.TypeInfo.AgentDeploymentInput
      },
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      }
    };
    exports.TypeInfo.AgentDeploymentInput.fields = {
      parallelExecution: {
        typeInfo: exports.TypeInfo.ExecutionInput
      }
    };
    exports.TypeInfo.ApprovalOptions.fields = {
      executionOrder: {
        enumType: exports.TypeInfo.ApprovalExecutionOrder
      }
    };
    exports.TypeInfo.ArtifactContributionDefinition.fields = {
      inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
      }
    };
    exports.TypeInfo.ArtifactMetadata.fields = {
      instanceReference: {
        typeInfo: exports.TypeInfo.BuildVersion
      }
    };
    exports.TypeInfo.ArtifactSourceTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.ArtifactTypeDefinition.fields = {
      inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
      }
    };
    exports.TypeInfo.ArtifactVersion.fields = {
      defaultVersion: {
        typeInfo: exports.TypeInfo.BuildVersion
      },
      versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildVersion
      }
    };
    exports.TypeInfo.ArtifactVersionQueryResult.fields = {
      artifactVersions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactVersion
      }
    };
    exports.TypeInfo.AutoTriggerIssue.fields = {
      issueSource: {
        enumType: exports.TypeInfo.IssueSource
      },
      releaseTriggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.AzureKeyVaultVariableGroupProviderData.fields = {
      lastRefreshedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.AzureKeyVaultVariableValue.fields = {
      expires: {
        isDate: true
      }
    };
    exports.TypeInfo.BuildVersion.fields = {
      sourcePullRequestVersion: {
        typeInfo: exports.TypeInfo.SourcePullRequestVersion
      }
    };
    exports.TypeInfo.Change.fields = {
      timestamp: {
        isDate: true
      }
    };
    exports.TypeInfo.CodeRepositoryReference.fields = {
      systemType: {
        enumType: exports.TypeInfo.PullRequestSystemType
      }
    };
    exports.TypeInfo.Condition.fields = {
      conditionType: {
        enumType: exports.TypeInfo.ConditionType
      }
    };
    exports.TypeInfo.ContainerImageTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.ContinuousDeploymentTriggerIssue.fields = {
      issueSource: {
        enumType: exports.TypeInfo.IssueSource
      },
      releaseTriggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.Deployment.fields = {
      completedOn: {
        isDate: true
      },
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
      },
      deploymentStatus: {
        enumType: exports.TypeInfo.DeploymentStatus
      },
      lastModifiedOn: {
        isDate: true
      },
      operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
      },
      postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      queuedOn: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.DeploymentReason
      },
      release: {
        typeInfo: exports.TypeInfo.ReleaseReference
      },
      scheduledDeploymentTime: {
        isDate: true
      },
      startedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.DeploymentApprovalCompletedEvent.fields = {
      approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.DeploymentApprovalPendingEvent.fields = {
      approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      approvalOptions: {
        typeInfo: exports.TypeInfo.ApprovalOptions
      },
      completedApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      deployment: {
        typeInfo: exports.TypeInfo.Deployment
      },
      pendingApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.DeploymentAttempt.fields = {
      job: {
        typeInfo: exports.TypeInfo.ReleaseTask
      },
      lastModifiedOn: {
        isDate: true
      },
      operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
      },
      postDeploymentGates: {
        typeInfo: exports.TypeInfo.ReleaseGates
      },
      preDeploymentGates: {
        typeInfo: exports.TypeInfo.ReleaseGates
      },
      queuedOn: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.DeploymentReason
      },
      releaseDeployPhases: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDeployPhase
      },
      status: {
        enumType: exports.TypeInfo.DeploymentStatus
      },
      tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
      }
    };
    exports.TypeInfo.DeploymentAuthorizationInfo.fields = {
      authorizationHeaderFor: {
        enumType: exports.TypeInfo.AuthorizationHeaderFor
      }
    };
    exports.TypeInfo.DeploymentCompletedEvent.fields = {
      deployment: {
        typeInfo: exports.TypeInfo.Deployment
      },
      environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
      }
    };
    exports.TypeInfo.DeploymentJob.fields = {
      job: {
        typeInfo: exports.TypeInfo.ReleaseTask
      },
      tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
      }
    };
    exports.TypeInfo.DeploymentManualInterventionPendingEvent.fields = {
      deployment: {
        typeInfo: exports.TypeInfo.Deployment
      },
      manualIntervention: {
        typeInfo: exports.TypeInfo.ManualIntervention
      },
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.DeploymentQueryParameters.fields = {
      deploymentStatus: {
        enumType: exports.TypeInfo.DeploymentStatus
      },
      expands: {
        enumType: exports.TypeInfo.DeploymentExpands
      },
      maxModifiedTime: {
        isDate: true
      },
      minModifiedTime: {
        isDate: true
      },
      operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
      },
      queryOrder: {
        enumType: exports.TypeInfo.ReleaseQueryOrder
      },
      queryType: {
        enumType: exports.TypeInfo.DeploymentsQueryType
      }
    };
    exports.TypeInfo.DeploymentStartedEvent.fields = {
      environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
      },
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.DeployPhase.fields = {
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      }
    };
    exports.TypeInfo.EnvironmentTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.EnvironmentTriggerType
      }
    };
    exports.TypeInfo.ExecutionInput.fields = {
      parallelExecutionType: {
        enumType: exports.TypeInfo.ParallelExecutionTypes
      }
    };
    exports.TypeInfo.Folder.fields = {
      createdOn: {
        isDate: true
      },
      lastChangedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.GatesDeployPhase.fields = {
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      }
    };
    exports.TypeInfo.IgnoredGate.fields = {
      lastModifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.MachineGroupBasedDeployPhase.fields = {
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      }
    };
    exports.TypeInfo.MailMessage.fields = {
      replyBy: {
        isDate: true
      },
      sections: {
        isArray: true,
        enumType: exports.TypeInfo.MailSectionType
      },
      senderType: {
        enumType: exports.TypeInfo.SenderType
      }
    };
    exports.TypeInfo.ManualIntervention.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.ManualInterventionStatus
      }
    };
    exports.TypeInfo.ManualInterventionUpdateMetadata.fields = {
      status: {
        enumType: exports.TypeInfo.ManualInterventionStatus
      }
    };
    exports.TypeInfo.MultiConfigInput.fields = {
      parallelExecutionType: {
        enumType: exports.TypeInfo.ParallelExecutionTypes
      }
    };
    exports.TypeInfo.MultiMachineInput.fields = {
      parallelExecutionType: {
        enumType: exports.TypeInfo.ParallelExecutionTypes
      }
    };
    exports.TypeInfo.PackageTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.ParallelExecutionInputBase.fields = {
      parallelExecutionType: {
        enumType: exports.TypeInfo.ParallelExecutionTypes
      }
    };
    exports.TypeInfo.PipelineProcess.fields = {
      type: {
        enumType: exports.TypeInfo.PipelineProcessTypes
      }
    };
    exports.TypeInfo.PropertySelector.fields = {
      selectorType: {
        enumType: exports.TypeInfo.PropertySelectorType
      }
    };
    exports.TypeInfo.PullRequestConfiguration.fields = {
      codeRepositoryReference: {
        typeInfo: exports.TypeInfo.CodeRepositoryReference
      }
    };
    exports.TypeInfo.PullRequestTrigger.fields = {
      pullRequestConfiguration: {
        typeInfo: exports.TypeInfo.PullRequestConfiguration
      },
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.Release.fields = {
      createdOn: {
        isDate: true
      },
      environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
      },
      modifiedOn: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.ReleaseReason
      },
      status: {
        enumType: exports.TypeInfo.ReleaseStatus
      },
      variableGroups: {
        isArray: true,
        typeInfo: exports.TypeInfo.VariableGroup
      }
    };
    exports.TypeInfo.ReleaseAbandonedEvent.fields = {
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.ReleaseApproval.fields = {
      approvalType: {
        enumType: exports.TypeInfo.ApprovalType
      },
      createdOn: {
        isDate: true
      },
      history: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApprovalHistory
      },
      modifiedOn: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.ApprovalStatus
      }
    };
    exports.TypeInfo.ReleaseApprovalHistory.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseApprovalPendingEvent.fields = {
      approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      approvalOptions: {
        typeInfo: exports.TypeInfo.ApprovalOptions
      },
      completedApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      deployment: {
        typeInfo: exports.TypeInfo.Deployment
      },
      environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
      },
      pendingApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      }
    };
    exports.TypeInfo.ReleaseCondition.fields = {
      conditionType: {
        enumType: exports.TypeInfo.ConditionType
      }
    };
    exports.TypeInfo.ReleaseCreatedEvent.fields = {
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.ReleaseDefinition.fields = {
      createdOn: {
        isDate: true
      },
      environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
      },
      lastRelease: {
        typeInfo: exports.TypeInfo.ReleaseReference
      },
      modifiedOn: {
        isDate: true
      },
      pipelineProcess: {
        typeInfo: exports.TypeInfo.PipelineProcess
      },
      source: {
        enumType: exports.TypeInfo.ReleaseDefinitionSource
      },
      triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTriggerBase
      }
    };
    exports.TypeInfo.ReleaseDefinitionApprovals.fields = {
      approvalOptions: {
        typeInfo: exports.TypeInfo.ApprovalOptions
      }
    };
    exports.TypeInfo.ReleaseDefinitionEnvironment.fields = {
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
      },
      deployPhases: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeployPhase
      },
      environmentTriggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.EnvironmentTrigger
      },
      postDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
      },
      preDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
      },
      schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseSchedule
      }
    };
    exports.TypeInfo.ReleaseDefinitionEnvironmentTemplate.fields = {
      environment: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
      }
    };
    exports.TypeInfo.ReleaseDefinitionRevision.fields = {
      changedDate: {
        isDate: true
      },
      changeType: {
        enumType: exports.TypeInfo.AuditAction
      }
    };
    exports.TypeInfo.ReleaseDefinitionSummary.fields = {
      releases: {
        isArray: true,
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.ReleaseDeployPhase.fields = {
      deploymentJobs: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentJob
      },
      manualInterventions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ManualIntervention
      },
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      },
      startedOn: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.DeployPhaseStatus
      }
    };
    exports.TypeInfo.ReleaseEnvironment.fields = {
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseCondition
      },
      createdOn: {
        isDate: true
      },
      deployPhasesSnapshot: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeployPhase
      },
      deploySteps: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentAttempt
      },
      modifiedOn: {
        isDate: true
      },
      nextScheduledUtcTime: {
        isDate: true
      },
      postApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
      },
      postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      preApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
      },
      preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
      },
      scheduledDeploymentTime: {
        isDate: true
      },
      schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseSchedule
      },
      status: {
        enumType: exports.TypeInfo.EnvironmentStatus
      },
      variableGroups: {
        isArray: true,
        typeInfo: exports.TypeInfo.VariableGroup
      }
    };
    exports.TypeInfo.ReleaseEnvironmentCompletedEvent.fields = {
      environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
      },
      reason: {
        enumType: exports.TypeInfo.DeploymentReason
      }
    };
    exports.TypeInfo.ReleaseEnvironmentStatusUpdatedEvent.fields = {
      environmentStatus: {
        enumType: exports.TypeInfo.EnvironmentStatus
      },
      latestDeploymentOperationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
      },
      latestDeploymentStatus: {
        enumType: exports.TypeInfo.DeploymentStatus
      }
    };
    exports.TypeInfo.ReleaseEnvironmentUpdateMetadata.fields = {
      scheduledDeploymentTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.EnvironmentStatus
      }
    };
    exports.TypeInfo.ReleaseGates.fields = {
      deploymentJobs: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentJob
      },
      ignoredGates: {
        isArray: true,
        typeInfo: exports.TypeInfo.IgnoredGate
      },
      lastModifiedOn: {
        isDate: true
      },
      stabilizationCompletedOn: {
        isDate: true
      },
      startedOn: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.GateStatus
      },
      succeedingSince: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseGatesPhase.fields = {
      deploymentJobs: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentJob
      },
      ignoredGates: {
        isArray: true,
        typeInfo: exports.TypeInfo.IgnoredGate
      },
      manualInterventions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ManualIntervention
      },
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      },
      stabilizationCompletedOn: {
        isDate: true
      },
      startedOn: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.DeployPhaseStatus
      },
      succeedingSince: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseNotCreatedEvent.fields = {
      releaseReason: {
        enumType: exports.TypeInfo.ReleaseReason
      }
    };
    exports.TypeInfo.ReleaseReference.fields = {
      createdOn: {
        isDate: true
      },
      reason: {
        enumType: exports.TypeInfo.ReleaseReason
      }
    };
    exports.TypeInfo.ReleaseRevision.fields = {
      changedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseSchedule.fields = {
      daysToRelease: {
        enumType: exports.TypeInfo.ScheduleDays
      }
    };
    exports.TypeInfo.ReleaseStartMetadata.fields = {
      artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactMetadata
      },
      reason: {
        enumType: exports.TypeInfo.ReleaseReason
      }
    };
    exports.TypeInfo.ReleaseTask.fields = {
      dateEnded: {
        isDate: true
      },
      dateStarted: {
        isDate: true
      },
      finishTime: {
        isDate: true
      },
      startTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.TaskStatus
      }
    };
    exports.TypeInfo.ReleaseTaskAttachment.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.ReleaseTasksUpdatedEvent.fields = {
      job: {
        typeInfo: exports.TypeInfo.ReleaseTask
      },
      tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
      }
    };
    exports.TypeInfo.ReleaseTriggerBase.fields = {
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.ReleaseUpdatedEvent.fields = {
      release: {
        typeInfo: exports.TypeInfo.Release
      }
    };
    exports.TypeInfo.ReleaseUpdateMetadata.fields = {
      status: {
        enumType: exports.TypeInfo.ReleaseStatus
      }
    };
    exports.TypeInfo.RunOnServerDeployPhase.fields = {
      deploymentInput: {
        typeInfo: exports.TypeInfo.ServerDeploymentInput
      },
      phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
      }
    };
    exports.TypeInfo.ScheduledReleaseTrigger.fields = {
      schedule: {
        typeInfo: exports.TypeInfo.ReleaseSchedule
      },
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.ServerDeploymentInput.fields = {
      parallelExecution: {
        typeInfo: exports.TypeInfo.ExecutionInput
      }
    };
    exports.TypeInfo.SourcePullRequestVersion.fields = {
      pullRequestMergedAt: {
        isDate: true
      }
    };
    exports.TypeInfo.SourceRepoTrigger.fields = {
      triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
      }
    };
    exports.TypeInfo.SummaryMailSection.fields = {
      sectionType: {
        enumType: exports.TypeInfo.MailSectionType
      }
    };
    exports.TypeInfo.VariableGroup.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.YamlFileSource.fields = {
      type: {
        enumType: exports.TypeInfo.YamlFileSourceTypes
      }
    };
    exports.TypeInfo.YamlPipelineProcess.fields = {
      fileSource: {
        typeInfo: exports.TypeInfo.YamlFileSource
      },
      type: {
        enumType: exports.TypeInfo.PipelineProcessTypes
      }
    };
  }
});

// node_modules/azure-devops-node-api/ReleaseApi.js
var require_ReleaseApi = __commonJS({
  "node_modules/azure-devops-node-api/ReleaseApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var ReleaseInterfaces = require_ReleaseInterfaces();
    var ReleaseApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Release-api", options);
      }
      getAgentArtifactDefinitions(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "f2571c27-bf50-4938-b396-32d109ddef26", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AgentArtifactDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getApprovals(project, assignedToFilter, statusFilter, releaseIdsFilter, typeFilter, top, continuationToken, queryOrder, includeMyGroupApprovals) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              assignedToFilter,
              statusFilter,
              releaseIdsFilter: releaseIdsFilter && releaseIdsFilter.join(","),
              typeFilter,
              top,
              continuationToken,
              queryOrder,
              includeMyGroupApprovals
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Release", "b47c6458-e73b-47cb-a770-4df1e8813a91", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getApprovalHistory(project, approvalStepId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              approvalStepId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Release", "250c7158-852e-4130-a00f-a0cce9b72d05", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getApproval(project, approvalId, includeHistory) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              approvalId
            };
            let queryValues = {
              includeHistory
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Release", "9328e074-59fb-465a-89d9-b09c82ee5109", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseApproval(approval, project, approvalId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              approvalId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Release", "9328e074-59fb-465a-89d9-b09c82ee5109", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, approval, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseApprovals(approvals, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Release", "c957584a-82aa-4131-8222-6d47f78bfa7a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, approvals, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskAttachmentContent(project, releaseId, environmentId, attemptId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              timelineId,
              recordId,
              type,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c4071f6d-3697-46ca-858e-8b10ff09e52f", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseTaskAttachmentContent(project, releaseId, environmentId, attemptId, planId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              planId,
              timelineId,
              recordId,
              type,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "60b86efb-7b8c-4853-8f9f-aa142b77b479", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskAttachments(project, releaseId, environmentId, attemptId, timelineId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              timelineId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "214111ee-2415-4df2-8ed2-74417f7d61f9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseTaskAttachments(project, releaseId, environmentId, attemptId, planId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              planId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "a4d06688-0dfa-4895-82a5-f43ec9452306", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAutoTriggerIssues(artifactType, sourceId, artifactVersionId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactType == null) {
            throw new TypeError("artifactType can not be null or undefined");
          }
          if (sourceId == null) {
            throw new TypeError("sourceId can not be null or undefined");
          }
          if (artifactVersionId == null) {
            throw new TypeError("artifactVersionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              artifactType,
              sourceId,
              artifactVersionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c1a68497-69da-40fb-9423-cab19cfeeca9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentBadge(projectId, releaseDefinitionId, environmentId, branchName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              projectId,
              releaseDefinitionId,
              environmentId,
              branchName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "1a60a35d-b8c9-45fb-bf67-da0829711147", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseChanges(project, releaseId, baseReleaseId, top, artifactAlias) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              baseReleaseId,
              "$top": top,
              artifactAlias
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "8dcf9fe9-ca37-4113-8ee1-37928e98407c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Change, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionEnvironments(project, taskGroupId, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              taskGroupId,
              propertyFilters: propertyFilters && propertyFilters.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "12b5d21a-f54c-430e-a8c1-7515d196890e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createReleaseDefinition(releaseDefinition, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, releaseDefinition, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteReleaseDefinition(project, definitionId, comment, forceDelete) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              comment,
              forceDelete
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseDefinition(project, definitionId, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              propertyFilters: propertyFilters && propertyFilters.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseDefinitionRevision(project, definitionId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
          if (revision == null) {
            throw new TypeError("revision can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            let queryValues = {
              revision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseDefinitions(project, searchText, expand, artifactType, artifactSourceId, top, continuationToken, queryOrder, path, isExactNameMatch, tagFilter, propertyFilters, definitionIdFilter, isDeleted, searchTextContainsFolderName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              searchText,
              "$expand": expand,
              artifactType,
              artifactSourceId,
              "$top": top,
              continuationToken,
              queryOrder,
              path,
              isExactNameMatch,
              tagFilter: tagFilter && tagFilter.join(","),
              propertyFilters: propertyFilters && propertyFilters.join(","),
              definitionIdFilter: definitionIdFilter && definitionIdFilter.join(","),
              isDeleted,
              searchTextContainsFolderName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      undeleteReleaseDefinition(releaseDefinitionUndeleteParameter, project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, releaseDefinitionUndeleteParameter, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseDefinition(releaseDefinition, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, releaseDefinition, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeployments(project, definitionId, definitionEnvironmentId, createdBy, minModifiedTime, maxModifiedTime, deploymentStatus, operationStatus, latestAttemptsOnly, queryOrder, top, continuationToken, createdFor, minStartedTime, maxStartedTime, sourceBranch) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              definitionId,
              definitionEnvironmentId,
              createdBy,
              minModifiedTime,
              maxModifiedTime,
              deploymentStatus,
              operationStatus,
              latestAttemptsOnly,
              queryOrder,
              "$top": top,
              continuationToken,
              createdFor,
              minStartedTime,
              maxStartedTime,
              sourceBranch
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "b005ef73-cddc-448e-9ba2-5193bf36b19f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentsForMultipleEnvironments(queryParameters, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "b005ef73-cddc-448e-9ba2-5193bf36b19f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, queryParameters, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseEnvironment(project, releaseId, environmentId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseEnvironment(environmentUpdateData, project, releaseId, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.7", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, environmentUpdateData, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createDefinitionEnvironmentTemplate(template, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, template, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDefinitionEnvironmentTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (templateId == null) {
            throw new TypeError("templateId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionEnvironmentTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (templateId == null) {
            throw new TypeError("templateId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listDefinitionEnvironmentTemplates(project, isDeleted) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              isDeleted
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      undeleteReleaseDefinitionEnvironmentTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (templateId == null) {
            throw new TypeError("templateId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.4", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createFavorites(favoriteItems, project, scope, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              scope
            };
            let queryValues = {
              identityId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, favoriteItems, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteFavorites(project, scope, identityId, favoriteItemIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              scope
            };
            let queryValues = {
              identityId,
              favoriteItemIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFavorites(project, scope, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              scope
            };
            let queryValues = {
              identityId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFlightAssignments(flightName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              flightName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "409d301f-3046-46f3-beb9-4357fbce0a8c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createFolder(folder, project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "f7ddf76d-ce0c-4d68-94ff-becaec5d9dea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, folder, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteFolder(project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "f7ddf76d-ce0c-4d68-94ff-becaec5d9dea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFolders(project, path, queryOrder) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              path
            };
            let queryValues = {
              queryOrder
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "f7ddf76d-ce0c-4d68-94ff-becaec5d9dea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateFolder(folder, project, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "f7ddf76d-ce0c-4d68-94ff-becaec5d9dea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, folder, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateGates(gateUpdateMetadata, project, gateStepId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              gateStepId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "2666a539-2001-4f80-bcc7-0379956749d4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, gateUpdateMetadata, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseGates, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseHistory(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "23f461c8-629a-4144-a076-3054fa5f268a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseRevision, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getInputValues(query, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "71dd499b-317d-45ea-9134-140ea1932b5e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getIssues(project, buildId, sourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              buildId
            };
            let queryValues = {
              sourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "cd42261a-f5c6-41c8-9259-f078989b9f25", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getGateLog(project, releaseId, environmentId, gateId, taskId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              gateId,
              taskId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "dec7ca5a-7f7f-4797-8bf1-8efc0dc93b28", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLogs(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "c37fbab5-214b-48e4-a55b-cb6b4f6e4038", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLog(project, releaseId, environmentId, taskId, attemptId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              taskId
            };
            let queryValues = {
              attemptId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "e71ba1ed-c0a4-4a28-a61f-2dd5f68cf3fd", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskLog2(project, releaseId, environmentId, attemptId, timelineId, taskId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              timelineId,
              taskId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "2577e6c3-6999-4400-bc69-fe1d837755fe", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskLog(project, releaseId, environmentId, releaseDeployPhaseId, taskId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              releaseDeployPhaseId,
              taskId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "17c91af7-09fd-4256-bff1-c24ee4f73bc0", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getManualIntervention(project, releaseId, manualInterventionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              manualInterventionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getManualInterventions(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateManualIntervention(manualInterventionUpdateMetadata, project, releaseId, manualInterventionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              manualInterventionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, manualInterventionUpdateMetadata, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getMetrics(project, minMetricsTime) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              minMetricsTime
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "cd1502bb-3c73-4e11-80a6-d11308dceae5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getOrgPipelineReleaseSettings() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "d156c759-ca4e-492b-90d4-db03971796ea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateOrgPipelineReleaseSettings(newSettings) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "d156c759-ca4e-492b-90d4-db03971796ea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, newSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPipelineReleaseSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "e816b9f4-f9fe-46ba-bdcc-a9af6abf3144", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePipelineReleaseSettings(newSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "e816b9f4-f9fe-46ba-bdcc-a9af6abf3144", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, newSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseProjects(artifactType, artifactSourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactType == null) {
            throw new TypeError("artifactType can not be null or undefined");
          }
          if (artifactSourceId == null) {
            throw new TypeError("artifactSourceId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              artifactType,
              artifactSourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "917ace4a-79d1-45a7-987c-7be4db4268fa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleases(project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, environmentStatusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, sourceId, artifactVersionId, sourceBranchFilter, isDeleted, tagFilter, propertyFilters, releaseIdFilter, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              definitionId,
              definitionEnvironmentId,
              searchText,
              createdBy,
              statusFilter,
              environmentStatusFilter,
              minCreatedTime,
              maxCreatedTime,
              queryOrder,
              "$top": top,
              continuationToken,
              "$expand": expand,
              artifactTypeId,
              sourceId,
              artifactVersionId,
              sourceBranchFilter,
              isDeleted,
              tagFilter: tagFilter && tagFilter.join(","),
              propertyFilters: propertyFilters && propertyFilters.join(","),
              releaseIdFilter: releaseIdFilter && releaseIdFilter.join(","),
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createRelease(releaseStartMetadata, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, releaseStartMetadata, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteRelease(project, releaseId, comment) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              comment
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRelease(project, releaseId, approvalFilters, propertyFilters, expand, topGateRecords) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              approvalFilters,
              propertyFilters: propertyFilters && propertyFilters.join(","),
              "$expand": expand,
              "$topGateRecords": topGateRecords
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, definitionEnvironmentIdsFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (definitionId == null) {
            throw new TypeError("definitionId can not be null or undefined");
          }
          if (releaseCount == null) {
            throw new TypeError("releaseCount can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              definitionId,
              releaseCount,
              includeArtifact,
              definitionEnvironmentIdsFilter: definitionEnvironmentIdsFilter && definitionEnvironmentIdsFilter.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionSummary, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseRevision(project, releaseId, definitionSnapshotRevision) {
        return __awaiter(this, void 0, void 0, function* () {
          if (definitionSnapshotRevision == null) {
            throw new TypeError("definitionSnapshotRevision can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              definitionSnapshotRevision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      undeleteRelease(project, releaseId, comment) {
        return __awaiter(this, void 0, void 0, function* () {
          if (comment == null) {
            throw new TypeError("comment can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              comment
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRelease(release, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, release, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseResource(releaseUpdateMetadata, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.8", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, releaseUpdateMetadata, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c63c3718-7cfd-41e0-b89b-81c1ca143437", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateReleaseSettings(releaseSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c63c3718-7cfd-41e0-b89b-81c1ca143437", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, releaseSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionRevision(project, definitionId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId,
              revision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseDefinitionHistory(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionRevision, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSummaryMailSections(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "224e92b2-8d13-4c14-b120-13d877c516f8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.SummaryMailSection, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      sendSummaryMail(mailMessage, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "224e92b2-8d13-4c14-b120-13d877c516f8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, mailMessage, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSourceBranches(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "0e5def23-78b3-461f-8198-1558f25041c8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDefinitionTag(project, releaseDefinitionId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseDefinitionId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "3d21b4c8-c32e-45b2-a7cb-770a369012f4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDefinitionTags(tags, project, releaseDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseDefinitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "3d21b4c8-c32e-45b2-a7cb-770a369012f4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, tags, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDefinitionTag(project, releaseDefinitionId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseDefinitionId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "3d21b4c8-c32e-45b2-a7cb-770a369012f4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDefinitionTags(project, releaseDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseDefinitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "3d21b4c8-c32e-45b2-a7cb-770a369012f4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addReleaseTag(project, releaseId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c5b602b6-d1b3-4363-8a51-94384f78068f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, null, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addReleaseTags(tags, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c5b602b6-d1b3-4363-8a51-94384f78068f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, tags, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteReleaseTag(project, releaseId, tag) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              tag
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c5b602b6-d1b3-4363-8a51-94384f78068f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseTags(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "c5b602b6-d1b3-4363-8a51-94384f78068f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTags(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "86cee25a-68ba-4ba3-9171-8ad6ffc6df93", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTasksForTaskGroup(project, releaseId, environmentId, releaseDeployPhaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              releaseDeployPhaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "4259191d-4b0a-4409-9fb3-09f22ab9bc47", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTasks2(project, releaseId, environmentId, attemptId, timelineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId,
              attemptId,
              timelineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "4259291d-4b0a-4409-9fb3-04f22ab9bc47", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTasks(project, releaseId, environmentId, attemptId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId,
              environmentId
            };
            let queryValues = {
              attemptId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Release", "36b276e0-3c70-4320-a63c-1a2e1466a0d1", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifactTypeDefinitions(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "8efc2a3c-1fc8-4f6d-9822-75e98cecb48f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactTypeDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifactVersions(project, releaseDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (releaseDefinitionId == null) {
            throw new TypeError("releaseDefinitionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              releaseDefinitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getArtifactVersionsForSources(artifacts, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, artifacts, options);
              let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReleaseWorkItemsRefs(project, releaseId, baseReleaseId, top, artifactAlias) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              releaseId
            };
            let queryValues = {
              baseReleaseId,
              "$top": top,
              artifactAlias
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Release", "4f165cc0-875c-4768-b148-f12f78769fab", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    ReleaseApi.RESOURCE_AREA_ID = "efc2f575-36ef-48e9-b672-0c6fb4a48ac5";
    exports.ReleaseApi = ReleaseApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/SecurityRolesInterfaces.js
var require_SecurityRolesInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/SecurityRolesInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RoleAccess;
    (function(RoleAccess2) {
      RoleAccess2[RoleAccess2["Assigned"] = 1] = "Assigned";
      RoleAccess2[RoleAccess2["Inherited"] = 2] = "Inherited";
    })(RoleAccess = exports.RoleAccess || (exports.RoleAccess = {}));
    exports.TypeInfo = {
      RoleAccess: {
        enumValues: {
          "assigned": 1,
          "inherited": 2
        }
      },
      RoleAssignment: {}
    };
    exports.TypeInfo.RoleAssignment.fields = {
      access: {
        enumType: exports.TypeInfo.RoleAccess
      }
    };
  }
});

// node_modules/azure-devops-node-api/SecurityRolesApi.js
var require_SecurityRolesApi = __commonJS({
  "node_modules/azure-devops-node-api/SecurityRolesApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var SecurityRolesInterfaces = require_SecurityRolesInterfaces();
    var SecurityRolesApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-SecurityRoles-api", options);
      }
      getRoleAssignments(scopeId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "9461c234-c84c-4ed2-b918-2f0f92ad0a35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeRoleAssignment(scopeId, resourceId, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId,
              resourceId,
              identityId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "9461c234-c84c-4ed2-b918-2f0f92ad0a35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeRoleAssignments(identityIds, scopeId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "9461c234-c84c-4ed2-b918-2f0f92ad0a35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, identityIds, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setRoleAssignment(roleAssignment, scopeId, resourceId, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId,
              resourceId,
              identityId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "9461c234-c84c-4ed2-b918-2f0f92ad0a35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, roleAssignment, options);
              let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setRoleAssignments(roleAssignments, scopeId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "9461c234-c84c-4ed2-b918-2f0f92ad0a35", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, roleAssignments, options);
              let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRoleDefinitions(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "securityroles", "f4cc9a86-453c-48d2-b44d-d3bd5c105f4f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.SecurityRolesApi = SecurityRolesApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/TaskAgentInterfaces.js
var require_TaskAgentInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/TaskAgentInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FormInputInterfaces = require_FormInputInterfaces();
    var AadLoginPromptOption;
    (function(AadLoginPromptOption2) {
      AadLoginPromptOption2[AadLoginPromptOption2["NoOption"] = 0] = "NoOption";
      AadLoginPromptOption2[AadLoginPromptOption2["Login"] = 1] = "Login";
      AadLoginPromptOption2[AadLoginPromptOption2["SelectAccount"] = 2] = "SelectAccount";
      AadLoginPromptOption2[AadLoginPromptOption2["FreshLogin"] = 3] = "FreshLogin";
      AadLoginPromptOption2[AadLoginPromptOption2["FreshLoginWithMfa"] = 4] = "FreshLoginWithMfa";
    })(AadLoginPromptOption = exports.AadLoginPromptOption || (exports.AadLoginPromptOption = {}));
    var AuditAction;
    (function(AuditAction2) {
      AuditAction2[AuditAction2["Add"] = 1] = "Add";
      AuditAction2[AuditAction2["Update"] = 2] = "Update";
      AuditAction2[AuditAction2["Delete"] = 3] = "Delete";
      AuditAction2[AuditAction2["Undelete"] = 4] = "Undelete";
    })(AuditAction = exports.AuditAction || (exports.AuditAction = {}));
    var DemandSourceType;
    (function(DemandSourceType2) {
      DemandSourceType2[DemandSourceType2["Task"] = 0] = "Task";
      DemandSourceType2[DemandSourceType2["Feature"] = 1] = "Feature";
    })(DemandSourceType = exports.DemandSourceType || (exports.DemandSourceType = {}));
    var DeploymentGroupActionFilter;
    (function(DeploymentGroupActionFilter2) {
      DeploymentGroupActionFilter2[DeploymentGroupActionFilter2["None"] = 0] = "None";
      DeploymentGroupActionFilter2[DeploymentGroupActionFilter2["Manage"] = 2] = "Manage";
      DeploymentGroupActionFilter2[DeploymentGroupActionFilter2["Use"] = 16] = "Use";
    })(DeploymentGroupActionFilter = exports.DeploymentGroupActionFilter || (exports.DeploymentGroupActionFilter = {}));
    var DeploymentGroupExpands;
    (function(DeploymentGroupExpands2) {
      DeploymentGroupExpands2[DeploymentGroupExpands2["None"] = 0] = "None";
      DeploymentGroupExpands2[DeploymentGroupExpands2["Machines"] = 2] = "Machines";
      DeploymentGroupExpands2[DeploymentGroupExpands2["Tags"] = 4] = "Tags";
    })(DeploymentGroupExpands = exports.DeploymentGroupExpands || (exports.DeploymentGroupExpands = {}));
    var DeploymentMachineExpands;
    (function(DeploymentMachineExpands2) {
      DeploymentMachineExpands2[DeploymentMachineExpands2["None"] = 0] = "None";
      DeploymentMachineExpands2[DeploymentMachineExpands2["Capabilities"] = 2] = "Capabilities";
      DeploymentMachineExpands2[DeploymentMachineExpands2["AssignedRequest"] = 4] = "AssignedRequest";
    })(DeploymentMachineExpands = exports.DeploymentMachineExpands || (exports.DeploymentMachineExpands = {}));
    var DeploymentPoolSummaryExpands;
    (function(DeploymentPoolSummaryExpands2) {
      DeploymentPoolSummaryExpands2[DeploymentPoolSummaryExpands2["None"] = 0] = "None";
      DeploymentPoolSummaryExpands2[DeploymentPoolSummaryExpands2["DeploymentGroups"] = 2] = "DeploymentGroups";
      DeploymentPoolSummaryExpands2[DeploymentPoolSummaryExpands2["Resource"] = 4] = "Resource";
    })(DeploymentPoolSummaryExpands = exports.DeploymentPoolSummaryExpands || (exports.DeploymentPoolSummaryExpands = {}));
    var DeploymentTargetExpands;
    (function(DeploymentTargetExpands2) {
      DeploymentTargetExpands2[DeploymentTargetExpands2["None"] = 0] = "None";
      DeploymentTargetExpands2[DeploymentTargetExpands2["Capabilities"] = 2] = "Capabilities";
      DeploymentTargetExpands2[DeploymentTargetExpands2["AssignedRequest"] = 4] = "AssignedRequest";
      DeploymentTargetExpands2[DeploymentTargetExpands2["LastCompletedRequest"] = 8] = "LastCompletedRequest";
    })(DeploymentTargetExpands = exports.DeploymentTargetExpands || (exports.DeploymentTargetExpands = {}));
    var ElasticAgentState;
    (function(ElasticAgentState2) {
      ElasticAgentState2[ElasticAgentState2["None"] = 0] = "None";
      ElasticAgentState2[ElasticAgentState2["Enabled"] = 1] = "Enabled";
      ElasticAgentState2[ElasticAgentState2["Online"] = 2] = "Online";
      ElasticAgentState2[ElasticAgentState2["Assigned"] = 4] = "Assigned";
    })(ElasticAgentState = exports.ElasticAgentState || (exports.ElasticAgentState = {}));
    var ElasticComputeState;
    (function(ElasticComputeState2) {
      ElasticComputeState2[ElasticComputeState2["None"] = 0] = "None";
      ElasticComputeState2[ElasticComputeState2["Healthy"] = 1] = "Healthy";
      ElasticComputeState2[ElasticComputeState2["Creating"] = 2] = "Creating";
      ElasticComputeState2[ElasticComputeState2["Deleting"] = 3] = "Deleting";
      ElasticComputeState2[ElasticComputeState2["Failed"] = 4] = "Failed";
      ElasticComputeState2[ElasticComputeState2["Stopped"] = 5] = "Stopped";
    })(ElasticComputeState = exports.ElasticComputeState || (exports.ElasticComputeState = {}));
    var ElasticNodeState;
    (function(ElasticNodeState2) {
      ElasticNodeState2[ElasticNodeState2["None"] = 0] = "None";
      ElasticNodeState2[ElasticNodeState2["New"] = 1] = "New";
      ElasticNodeState2[ElasticNodeState2["CreatingCompute"] = 2] = "CreatingCompute";
      ElasticNodeState2[ElasticNodeState2["StartingAgent"] = 3] = "StartingAgent";
      ElasticNodeState2[ElasticNodeState2["Idle"] = 4] = "Idle";
      ElasticNodeState2[ElasticNodeState2["Assigned"] = 5] = "Assigned";
      ElasticNodeState2[ElasticNodeState2["Offline"] = 6] = "Offline";
      ElasticNodeState2[ElasticNodeState2["PendingReimage"] = 7] = "PendingReimage";
      ElasticNodeState2[ElasticNodeState2["PendingDelete"] = 8] = "PendingDelete";
      ElasticNodeState2[ElasticNodeState2["Saved"] = 9] = "Saved";
      ElasticNodeState2[ElasticNodeState2["DeletingCompute"] = 10] = "DeletingCompute";
      ElasticNodeState2[ElasticNodeState2["Deleted"] = 11] = "Deleted";
      ElasticNodeState2[ElasticNodeState2["Lost"] = 12] = "Lost";
    })(ElasticNodeState = exports.ElasticNodeState || (exports.ElasticNodeState = {}));
    var ElasticPoolState;
    (function(ElasticPoolState2) {
      ElasticPoolState2[ElasticPoolState2["Online"] = 0] = "Online";
      ElasticPoolState2[ElasticPoolState2["Offline"] = 1] = "Offline";
      ElasticPoolState2[ElasticPoolState2["Unhealthy"] = 2] = "Unhealthy";
      ElasticPoolState2[ElasticPoolState2["New"] = 3] = "New";
    })(ElasticPoolState = exports.ElasticPoolState || (exports.ElasticPoolState = {}));
    var EnvironmentActionFilter;
    (function(EnvironmentActionFilter2) {
      EnvironmentActionFilter2[EnvironmentActionFilter2["None"] = 0] = "None";
      EnvironmentActionFilter2[EnvironmentActionFilter2["Manage"] = 2] = "Manage";
      EnvironmentActionFilter2[EnvironmentActionFilter2["Use"] = 16] = "Use";
    })(EnvironmentActionFilter = exports.EnvironmentActionFilter || (exports.EnvironmentActionFilter = {}));
    var EnvironmentExpands;
    (function(EnvironmentExpands2) {
      EnvironmentExpands2[EnvironmentExpands2["None"] = 0] = "None";
      EnvironmentExpands2[EnvironmentExpands2["ResourceReferences"] = 1] = "ResourceReferences";
    })(EnvironmentExpands = exports.EnvironmentExpands || (exports.EnvironmentExpands = {}));
    var EnvironmentResourceType;
    (function(EnvironmentResourceType2) {
      EnvironmentResourceType2[EnvironmentResourceType2["Undefined"] = 0] = "Undefined";
      EnvironmentResourceType2[EnvironmentResourceType2["Generic"] = 1] = "Generic";
      EnvironmentResourceType2[EnvironmentResourceType2["VirtualMachine"] = 2] = "VirtualMachine";
      EnvironmentResourceType2[EnvironmentResourceType2["Kubernetes"] = 4] = "Kubernetes";
    })(EnvironmentResourceType = exports.EnvironmentResourceType || (exports.EnvironmentResourceType = {}));
    var ExclusiveLockType;
    (function(ExclusiveLockType2) {
      ExclusiveLockType2[ExclusiveLockType2["RunLatest"] = 0] = "RunLatest";
      ExclusiveLockType2[ExclusiveLockType2["Sequential"] = 1] = "Sequential";
    })(ExclusiveLockType = exports.ExclusiveLockType || (exports.ExclusiveLockType = {}));
    var IssueType;
    (function(IssueType2) {
      IssueType2[IssueType2["Error"] = 1] = "Error";
      IssueType2[IssueType2["Warning"] = 2] = "Warning";
    })(IssueType = exports.IssueType || (exports.IssueType = {}));
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["Error"] = 0] = "Error";
      LogLevel2[LogLevel2["Warning"] = 1] = "Warning";
      LogLevel2[LogLevel2["Info"] = 2] = "Info";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    var MachineGroupActionFilter;
    (function(MachineGroupActionFilter2) {
      MachineGroupActionFilter2[MachineGroupActionFilter2["None"] = 0] = "None";
      MachineGroupActionFilter2[MachineGroupActionFilter2["Manage"] = 2] = "Manage";
      MachineGroupActionFilter2[MachineGroupActionFilter2["Use"] = 16] = "Use";
    })(MachineGroupActionFilter = exports.MachineGroupActionFilter || (exports.MachineGroupActionFilter = {}));
    var MaskType;
    (function(MaskType2) {
      MaskType2[MaskType2["Variable"] = 1] = "Variable";
      MaskType2[MaskType2["Regex"] = 2] = "Regex";
    })(MaskType = exports.MaskType || (exports.MaskType = {}));
    var OperatingSystemType;
    (function(OperatingSystemType2) {
      OperatingSystemType2[OperatingSystemType2["Windows"] = 0] = "Windows";
      OperatingSystemType2[OperatingSystemType2["Linux"] = 1] = "Linux";
    })(OperatingSystemType = exports.OperatingSystemType || (exports.OperatingSystemType = {}));
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["ConfigurationJob"] = 0] = "ConfigurationJob";
      OperationType2[OperationType2["SizingJob"] = 1] = "SizingJob";
      OperationType2[OperationType2["IncreaseCapacity"] = 2] = "IncreaseCapacity";
      OperationType2[OperationType2["Reimage"] = 3] = "Reimage";
      OperationType2[OperationType2["DeleteVMs"] = 4] = "DeleteVMs";
    })(OperationType = exports.OperationType || (exports.OperationType = {}));
    var PlanGroupStatus;
    (function(PlanGroupStatus2) {
      PlanGroupStatus2[PlanGroupStatus2["Running"] = 1] = "Running";
      PlanGroupStatus2[PlanGroupStatus2["Queued"] = 2] = "Queued";
      PlanGroupStatus2[PlanGroupStatus2["All"] = 3] = "All";
    })(PlanGroupStatus = exports.PlanGroupStatus || (exports.PlanGroupStatus = {}));
    var PlanGroupStatusFilter;
    (function(PlanGroupStatusFilter2) {
      PlanGroupStatusFilter2[PlanGroupStatusFilter2["Running"] = 1] = "Running";
      PlanGroupStatusFilter2[PlanGroupStatusFilter2["Queued"] = 2] = "Queued";
      PlanGroupStatusFilter2[PlanGroupStatusFilter2["All"] = 3] = "All";
    })(PlanGroupStatusFilter = exports.PlanGroupStatusFilter || (exports.PlanGroupStatusFilter = {}));
    var ResourceLockStatus;
    (function(ResourceLockStatus2) {
      ResourceLockStatus2[ResourceLockStatus2["Queued"] = 0] = "Queued";
      ResourceLockStatus2[ResourceLockStatus2["InUse"] = 1] = "InUse";
      ResourceLockStatus2[ResourceLockStatus2["Finished"] = 2] = "Finished";
      ResourceLockStatus2[ResourceLockStatus2["TimedOut"] = 3] = "TimedOut";
      ResourceLockStatus2[ResourceLockStatus2["Canceled"] = 4] = "Canceled";
      ResourceLockStatus2[ResourceLockStatus2["Abandoned"] = 5] = "Abandoned";
      ResourceLockStatus2[ResourceLockStatus2["WaitingOnChecks"] = 6] = "WaitingOnChecks";
    })(ResourceLockStatus = exports.ResourceLockStatus || (exports.ResourceLockStatus = {}));
    var SecureFileActionFilter;
    (function(SecureFileActionFilter2) {
      SecureFileActionFilter2[SecureFileActionFilter2["None"] = 0] = "None";
      SecureFileActionFilter2[SecureFileActionFilter2["Manage"] = 2] = "Manage";
      SecureFileActionFilter2[SecureFileActionFilter2["Use"] = 16] = "Use";
    })(SecureFileActionFilter = exports.SecureFileActionFilter || (exports.SecureFileActionFilter = {}));
    var TaskAgentJobResultFilter;
    (function(TaskAgentJobResultFilter2) {
      TaskAgentJobResultFilter2[TaskAgentJobResultFilter2["Failed"] = 1] = "Failed";
      TaskAgentJobResultFilter2[TaskAgentJobResultFilter2["Passed"] = 2] = "Passed";
      TaskAgentJobResultFilter2[TaskAgentJobResultFilter2["NeverDeployed"] = 4] = "NeverDeployed";
      TaskAgentJobResultFilter2[TaskAgentJobResultFilter2["All"] = 7] = "All";
    })(TaskAgentJobResultFilter = exports.TaskAgentJobResultFilter || (exports.TaskAgentJobResultFilter = {}));
    var TaskAgentJobStepType;
    (function(TaskAgentJobStepType2) {
      TaskAgentJobStepType2[TaskAgentJobStepType2["Task"] = 1] = "Task";
      TaskAgentJobStepType2[TaskAgentJobStepType2["Action"] = 2] = "Action";
    })(TaskAgentJobStepType = exports.TaskAgentJobStepType || (exports.TaskAgentJobStepType = {}));
    var TaskAgentPoolActionFilter;
    (function(TaskAgentPoolActionFilter2) {
      TaskAgentPoolActionFilter2[TaskAgentPoolActionFilter2["None"] = 0] = "None";
      TaskAgentPoolActionFilter2[TaskAgentPoolActionFilter2["Manage"] = 2] = "Manage";
      TaskAgentPoolActionFilter2[TaskAgentPoolActionFilter2["Use"] = 16] = "Use";
    })(TaskAgentPoolActionFilter = exports.TaskAgentPoolActionFilter || (exports.TaskAgentPoolActionFilter = {}));
    var TaskAgentPoolMaintenanceJobResult;
    (function(TaskAgentPoolMaintenanceJobResult2) {
      TaskAgentPoolMaintenanceJobResult2[TaskAgentPoolMaintenanceJobResult2["Succeeded"] = 1] = "Succeeded";
      TaskAgentPoolMaintenanceJobResult2[TaskAgentPoolMaintenanceJobResult2["Failed"] = 2] = "Failed";
      TaskAgentPoolMaintenanceJobResult2[TaskAgentPoolMaintenanceJobResult2["Canceled"] = 4] = "Canceled";
    })(TaskAgentPoolMaintenanceJobResult = exports.TaskAgentPoolMaintenanceJobResult || (exports.TaskAgentPoolMaintenanceJobResult = {}));
    var TaskAgentPoolMaintenanceJobStatus;
    (function(TaskAgentPoolMaintenanceJobStatus2) {
      TaskAgentPoolMaintenanceJobStatus2[TaskAgentPoolMaintenanceJobStatus2["InProgress"] = 1] = "InProgress";
      TaskAgentPoolMaintenanceJobStatus2[TaskAgentPoolMaintenanceJobStatus2["Completed"] = 2] = "Completed";
      TaskAgentPoolMaintenanceJobStatus2[TaskAgentPoolMaintenanceJobStatus2["Cancelling"] = 4] = "Cancelling";
      TaskAgentPoolMaintenanceJobStatus2[TaskAgentPoolMaintenanceJobStatus2["Queued"] = 8] = "Queued";
    })(TaskAgentPoolMaintenanceJobStatus = exports.TaskAgentPoolMaintenanceJobStatus || (exports.TaskAgentPoolMaintenanceJobStatus = {}));
    var TaskAgentPoolMaintenanceScheduleDays;
    (function(TaskAgentPoolMaintenanceScheduleDays2) {
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["None"] = 0] = "None";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Monday"] = 1] = "Monday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Tuesday"] = 2] = "Tuesday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Wednesday"] = 4] = "Wednesday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Thursday"] = 8] = "Thursday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Friday"] = 16] = "Friday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Saturday"] = 32] = "Saturday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["Sunday"] = 64] = "Sunday";
      TaskAgentPoolMaintenanceScheduleDays2[TaskAgentPoolMaintenanceScheduleDays2["All"] = 127] = "All";
    })(TaskAgentPoolMaintenanceScheduleDays = exports.TaskAgentPoolMaintenanceScheduleDays || (exports.TaskAgentPoolMaintenanceScheduleDays = {}));
    var TaskAgentPoolOptions;
    (function(TaskAgentPoolOptions2) {
      TaskAgentPoolOptions2[TaskAgentPoolOptions2["None"] = 0] = "None";
      TaskAgentPoolOptions2[TaskAgentPoolOptions2["ElasticPool"] = 1] = "ElasticPool";
      TaskAgentPoolOptions2[TaskAgentPoolOptions2["SingleUseAgents"] = 2] = "SingleUseAgents";
      TaskAgentPoolOptions2[TaskAgentPoolOptions2["PreserveAgentOnJobFailure"] = 4] = "PreserveAgentOnJobFailure";
    })(TaskAgentPoolOptions = exports.TaskAgentPoolOptions || (exports.TaskAgentPoolOptions = {}));
    var TaskAgentPoolType;
    (function(TaskAgentPoolType2) {
      TaskAgentPoolType2[TaskAgentPoolType2["Automation"] = 1] = "Automation";
      TaskAgentPoolType2[TaskAgentPoolType2["Deployment"] = 2] = "Deployment";
    })(TaskAgentPoolType = exports.TaskAgentPoolType || (exports.TaskAgentPoolType = {}));
    var TaskAgentQueueActionFilter;
    (function(TaskAgentQueueActionFilter2) {
      TaskAgentQueueActionFilter2[TaskAgentQueueActionFilter2["None"] = 0] = "None";
      TaskAgentQueueActionFilter2[TaskAgentQueueActionFilter2["Manage"] = 2] = "Manage";
      TaskAgentQueueActionFilter2[TaskAgentQueueActionFilter2["Use"] = 16] = "Use";
    })(TaskAgentQueueActionFilter = exports.TaskAgentQueueActionFilter || (exports.TaskAgentQueueActionFilter = {}));
    var TaskAgentRequestUpdateOptions;
    (function(TaskAgentRequestUpdateOptions2) {
      TaskAgentRequestUpdateOptions2[TaskAgentRequestUpdateOptions2["None"] = 0] = "None";
      TaskAgentRequestUpdateOptions2[TaskAgentRequestUpdateOptions2["BumpRequestToTop"] = 1] = "BumpRequestToTop";
    })(TaskAgentRequestUpdateOptions = exports.TaskAgentRequestUpdateOptions || (exports.TaskAgentRequestUpdateOptions = {}));
    var TaskAgentStatus;
    (function(TaskAgentStatus2) {
      TaskAgentStatus2[TaskAgentStatus2["Offline"] = 1] = "Offline";
      TaskAgentStatus2[TaskAgentStatus2["Online"] = 2] = "Online";
    })(TaskAgentStatus = exports.TaskAgentStatus || (exports.TaskAgentStatus = {}));
    var TaskAgentStatusFilter;
    (function(TaskAgentStatusFilter2) {
      TaskAgentStatusFilter2[TaskAgentStatusFilter2["Offline"] = 1] = "Offline";
      TaskAgentStatusFilter2[TaskAgentStatusFilter2["Online"] = 2] = "Online";
      TaskAgentStatusFilter2[TaskAgentStatusFilter2["All"] = 3] = "All";
    })(TaskAgentStatusFilter = exports.TaskAgentStatusFilter || (exports.TaskAgentStatusFilter = {}));
    var TaskAgentUpdateReasonType;
    (function(TaskAgentUpdateReasonType2) {
      TaskAgentUpdateReasonType2[TaskAgentUpdateReasonType2["Manual"] = 1] = "Manual";
      TaskAgentUpdateReasonType2[TaskAgentUpdateReasonType2["MinAgentVersionRequired"] = 2] = "MinAgentVersionRequired";
      TaskAgentUpdateReasonType2[TaskAgentUpdateReasonType2["Downgrade"] = 3] = "Downgrade";
    })(TaskAgentUpdateReasonType = exports.TaskAgentUpdateReasonType || (exports.TaskAgentUpdateReasonType = {}));
    var TaskCommandMode;
    (function(TaskCommandMode2) {
      TaskCommandMode2[TaskCommandMode2["Any"] = 0] = "Any";
      TaskCommandMode2[TaskCommandMode2["Restricted"] = 1] = "Restricted";
    })(TaskCommandMode = exports.TaskCommandMode || (exports.TaskCommandMode = {}));
    var TaskDefinitionStatus;
    (function(TaskDefinitionStatus2) {
      TaskDefinitionStatus2[TaskDefinitionStatus2["Preinstalled"] = 1] = "Preinstalled";
      TaskDefinitionStatus2[TaskDefinitionStatus2["ReceivedInstallOrUpdate"] = 2] = "ReceivedInstallOrUpdate";
      TaskDefinitionStatus2[TaskDefinitionStatus2["Installed"] = 3] = "Installed";
      TaskDefinitionStatus2[TaskDefinitionStatus2["ReceivedUninstall"] = 4] = "ReceivedUninstall";
      TaskDefinitionStatus2[TaskDefinitionStatus2["Uninstalled"] = 5] = "Uninstalled";
      TaskDefinitionStatus2[TaskDefinitionStatus2["RequestedUpdate"] = 6] = "RequestedUpdate";
      TaskDefinitionStatus2[TaskDefinitionStatus2["Updated"] = 7] = "Updated";
      TaskDefinitionStatus2[TaskDefinitionStatus2["AlreadyUpToDate"] = 8] = "AlreadyUpToDate";
      TaskDefinitionStatus2[TaskDefinitionStatus2["InlineUpdateReceived"] = 9] = "InlineUpdateReceived";
    })(TaskDefinitionStatus = exports.TaskDefinitionStatus || (exports.TaskDefinitionStatus = {}));
    var TaskGroupExpands;
    (function(TaskGroupExpands2) {
      TaskGroupExpands2[TaskGroupExpands2["None"] = 0] = "None";
      TaskGroupExpands2[TaskGroupExpands2["Tasks"] = 2] = "Tasks";
    })(TaskGroupExpands = exports.TaskGroupExpands || (exports.TaskGroupExpands = {}));
    var TaskGroupQueryOrder;
    (function(TaskGroupQueryOrder2) {
      TaskGroupQueryOrder2[TaskGroupQueryOrder2["CreatedOnAscending"] = 0] = "CreatedOnAscending";
      TaskGroupQueryOrder2[TaskGroupQueryOrder2["CreatedOnDescending"] = 1] = "CreatedOnDescending";
    })(TaskGroupQueryOrder = exports.TaskGroupQueryOrder || (exports.TaskGroupQueryOrder = {}));
    var TaskOrchestrationItemType;
    (function(TaskOrchestrationItemType2) {
      TaskOrchestrationItemType2[TaskOrchestrationItemType2["Container"] = 0] = "Container";
      TaskOrchestrationItemType2[TaskOrchestrationItemType2["Job"] = 1] = "Job";
    })(TaskOrchestrationItemType = exports.TaskOrchestrationItemType || (exports.TaskOrchestrationItemType = {}));
    var TaskOrchestrationPlanState;
    (function(TaskOrchestrationPlanState2) {
      TaskOrchestrationPlanState2[TaskOrchestrationPlanState2["InProgress"] = 1] = "InProgress";
      TaskOrchestrationPlanState2[TaskOrchestrationPlanState2["Queued"] = 2] = "Queued";
      TaskOrchestrationPlanState2[TaskOrchestrationPlanState2["Completed"] = 4] = "Completed";
      TaskOrchestrationPlanState2[TaskOrchestrationPlanState2["Throttled"] = 8] = "Throttled";
    })(TaskOrchestrationPlanState = exports.TaskOrchestrationPlanState || (exports.TaskOrchestrationPlanState = {}));
    var TaskResult;
    (function(TaskResult2) {
      TaskResult2[TaskResult2["Succeeded"] = 0] = "Succeeded";
      TaskResult2[TaskResult2["SucceededWithIssues"] = 1] = "SucceededWithIssues";
      TaskResult2[TaskResult2["Failed"] = 2] = "Failed";
      TaskResult2[TaskResult2["Canceled"] = 3] = "Canceled";
      TaskResult2[TaskResult2["Skipped"] = 4] = "Skipped";
      TaskResult2[TaskResult2["Abandoned"] = 5] = "Abandoned";
    })(TaskResult = exports.TaskResult || (exports.TaskResult = {}));
    var TimelineRecordState;
    (function(TimelineRecordState2) {
      TimelineRecordState2[TimelineRecordState2["Pending"] = 0] = "Pending";
      TimelineRecordState2[TimelineRecordState2["InProgress"] = 1] = "InProgress";
      TimelineRecordState2[TimelineRecordState2["Completed"] = 2] = "Completed";
    })(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));
    var VariableGroupActionFilter;
    (function(VariableGroupActionFilter2) {
      VariableGroupActionFilter2[VariableGroupActionFilter2["None"] = 0] = "None";
      VariableGroupActionFilter2[VariableGroupActionFilter2["Manage"] = 2] = "Manage";
      VariableGroupActionFilter2[VariableGroupActionFilter2["Use"] = 16] = "Use";
    })(VariableGroupActionFilter = exports.VariableGroupActionFilter || (exports.VariableGroupActionFilter = {}));
    var VariableGroupQueryOrder;
    (function(VariableGroupQueryOrder2) {
      VariableGroupQueryOrder2[VariableGroupQueryOrder2["IdAscending"] = 0] = "IdAscending";
      VariableGroupQueryOrder2[VariableGroupQueryOrder2["IdDescending"] = 1] = "IdDescending";
    })(VariableGroupQueryOrder = exports.VariableGroupQueryOrder || (exports.VariableGroupQueryOrder = {}));
    exports.TypeInfo = {
      AadLoginPromptOption: {
        enumValues: {
          "noOption": 0,
          "login": 1,
          "selectAccount": 2,
          "freshLogin": 3,
          "freshLoginWithMfa": 4
        }
      },
      AgentChangeEvent: {},
      AgentJobRequestMessage: {},
      AgentPoolEvent: {},
      AgentQueueEvent: {},
      AgentQueuesEvent: {},
      AuditAction: {
        enumValues: {
          "add": 1,
          "update": 2,
          "delete": 3,
          "undelete": 4
        }
      },
      AzureKeyVaultVariableGroupProviderData: {},
      AzureKeyVaultVariableValue: {},
      DemandMinimumVersion: {},
      DemandSource: {},
      DemandSourceType: {
        enumValues: {
          "task": 0,
          "feature": 1
        }
      },
      DeploymentGroup: {},
      DeploymentGroupActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      DeploymentGroupExpands: {
        enumValues: {
          "none": 0,
          "machines": 2,
          "tags": 4
        }
      },
      DeploymentGroupMetrics: {},
      DeploymentGroupReference: {},
      DeploymentMachine: {},
      DeploymentMachineChangedData: {},
      DeploymentMachineExpands: {
        enumValues: {
          "none": 0,
          "capabilities": 2,
          "assignedRequest": 4
        }
      },
      DeploymentMachineGroup: {},
      DeploymentMachineGroupReference: {},
      DeploymentMachinesChangeEvent: {},
      DeploymentPoolSummary: {},
      DeploymentPoolSummaryExpands: {
        enumValues: {
          "none": 0,
          "deploymentGroups": 2,
          "resource": 4
        }
      },
      DeploymentTargetExpands: {
        enumValues: {
          "none": 0,
          "capabilities": 2,
          "assignedRequest": 4,
          "lastCompletedRequest": 8
        }
      },
      ElasticAgentState: {
        enumValues: {
          "none": 0,
          "enabled": 1,
          "online": 2,
          "assigned": 4
        }
      },
      ElasticComputeState: {
        enumValues: {
          "none": 0,
          "healthy": 1,
          "creating": 2,
          "deleting": 3,
          "failed": 4,
          "stopped": 5
        }
      },
      ElasticNode: {},
      ElasticNodeSettings: {},
      ElasticNodeState: {
        enumValues: {
          "none": 0,
          "new": 1,
          "creatingCompute": 2,
          "startingAgent": 3,
          "idle": 4,
          "assigned": 5,
          "offline": 6,
          "pendingReimage": 7,
          "pendingDelete": 8,
          "saved": 9,
          "deletingCompute": 10,
          "deleted": 11,
          "lost": 12
        }
      },
      ElasticPool: {},
      ElasticPoolCreationResult: {},
      ElasticPoolLog: {},
      ElasticPoolSettings: {},
      ElasticPoolState: {
        enumValues: {
          "online": 0,
          "offline": 1,
          "unhealthy": 2,
          "new": 3
        }
      },
      EnvironmentActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      EnvironmentDeploymentExecutionRecord: {},
      EnvironmentExpands: {
        enumValues: {
          "none": 0,
          "resourceReferences": 1
        }
      },
      EnvironmentInstance: {},
      EnvironmentResource: {},
      EnvironmentResourceDeploymentExecutionRecord: {},
      EnvironmentResourceReference: {},
      EnvironmentResourceType: {
        enumValues: {
          "undefined": 0,
          "generic": 1,
          "virtualMachine": 2,
          "kubernetes": 4
        }
      },
      ExclusiveLockType: {
        enumValues: {
          "runLatest": 0,
          "sequential": 1
        }
      },
      Issue: {},
      IssueType: {
        enumValues: {
          "error": 1,
          "warning": 2
        }
      },
      JobAssignedEvent: {},
      JobCompletedEvent: {},
      JobEnvironment: {},
      JobRequestMessage: {},
      KubernetesResource: {},
      LogLevel: {
        enumValues: {
          "error": 0,
          "warning": 1,
          "info": 2
        }
      },
      MachineGroupActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      MaskHint: {},
      MaskType: {
        enumValues: {
          "variable": 1,
          "regex": 2
        }
      },
      OperatingSystemType: {
        enumValues: {
          "windows": 0,
          "linux": 1
        }
      },
      OperationType: {
        enumValues: {
          "configurationJob": 0,
          "sizingJob": 1,
          "increaseCapacity": 2,
          "reimage": 3,
          "deleteVMs": 4
        }
      },
      PackageMetadata: {},
      PlanEnvironment: {},
      PlanGroupStatus: {
        enumValues: {
          "running": 1,
          "queued": 2,
          "all": 3
        }
      },
      PlanGroupStatusFilter: {
        enumValues: {
          "running": 1,
          "queued": 2,
          "all": 3
        }
      },
      ResourceLockRequest: {},
      ResourceLockStatus: {
        enumValues: {
          "queued": 0,
          "inUse": 1,
          "finished": 2,
          "timedOut": 3,
          "canceled": 4,
          "abandoned": 5,
          "waitingOnChecks": 6
        }
      },
      ResourceUsage: {},
      SecureFile: {},
      SecureFileActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      SecureFileEvent: {},
      ServerTaskRequestMessage: {},
      ServiceEndpointAuthenticationScheme: {},
      ServiceEndpointExecutionData: {},
      ServiceEndpointExecutionRecord: {},
      ServiceEndpointExecutionRecordsInput: {},
      ServiceEndpointRequestResult: {},
      ServiceEndpointType: {},
      TaskAgent: {},
      TaskAgentCloudRequest: {},
      TaskAgentCloudType: {},
      TaskAgentDowngrade: {},
      TaskAgentJob: {},
      TaskAgentJobRequest: {},
      TaskAgentJobResultFilter: {
        enumValues: {
          "failed": 1,
          "passed": 2,
          "neverDeployed": 4,
          "all": 7
        }
      },
      TaskAgentJobStep: {},
      TaskAgentJobStepType: {
        enumValues: {
          "task": 1,
          "action": 2
        }
      },
      TaskAgentManualUpdate: {},
      TaskAgentMinAgentVersionRequiredUpdate: {},
      TaskAgentPool: {},
      TaskAgentPoolActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      TaskAgentPoolMaintenanceDefinition: {},
      TaskAgentPoolMaintenanceJob: {},
      TaskAgentPoolMaintenanceJobResult: {
        enumValues: {
          "succeeded": 1,
          "failed": 2,
          "canceled": 4
        }
      },
      TaskAgentPoolMaintenanceJobStatus: {
        enumValues: {
          "inProgress": 1,
          "completed": 2,
          "cancelling": 4,
          "queued": 8
        }
      },
      TaskAgentPoolMaintenanceJobTargetAgent: {},
      TaskAgentPoolMaintenanceSchedule: {},
      TaskAgentPoolMaintenanceScheduleDays: {
        enumValues: {
          "none": 0,
          "monday": 1,
          "tuesday": 2,
          "wednesday": 4,
          "thursday": 8,
          "friday": 16,
          "saturday": 32,
          "sunday": 64,
          "all": 127
        }
      },
      TaskAgentPoolOptions: {
        enumValues: {
          "none": 0,
          "elasticPool": 1,
          "singleUseAgents": 2,
          "preserveAgentOnJobFailure": 4
        }
      },
      TaskAgentPoolReference: {},
      TaskAgentPoolStatus: {},
      TaskAgentPoolSummary: {},
      TaskAgentPoolType: {
        enumValues: {
          "automation": 1,
          "deployment": 2
        }
      },
      TaskAgentQueue: {},
      TaskAgentQueueActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      TaskAgentReference: {},
      TaskAgentRequestUpdateOptions: {
        enumValues: {
          "none": 0,
          "bumpRequestToTop": 1
        }
      },
      TaskAgentSession: {},
      TaskAgentStatus: {
        enumValues: {
          "offline": 1,
          "online": 2
        }
      },
      TaskAgentStatusFilter: {
        enumValues: {
          "offline": 1,
          "online": 2,
          "all": 3
        }
      },
      TaskAgentUpdate: {},
      TaskAgentUpdateReason: {},
      TaskAgentUpdateReasonType: {
        enumValues: {
          "manual": 1,
          "minAgentVersionRequired": 2,
          "downgrade": 3
        }
      },
      TaskAttachment: {},
      TaskCommandMode: {
        enumValues: {
          "any": 0,
          "restricted": 1
        }
      },
      TaskCommandRestrictions: {},
      TaskCompletedEvent: {},
      TaskDefinition: {},
      TaskDefinitionStatus: {
        enumValues: {
          "preinstalled": 1,
          "receivedInstallOrUpdate": 2,
          "installed": 3,
          "receivedUninstall": 4,
          "uninstalled": 5,
          "requestedUpdate": 6,
          "updated": 7,
          "alreadyUpToDate": 8,
          "inlineUpdateReceived": 9
        }
      },
      TaskGroup: {},
      TaskGroupExpands: {
        enumValues: {
          "none": 0,
          "tasks": 2
        }
      },
      TaskGroupQueryOrder: {
        enumValues: {
          "createdOnAscending": 0,
          "createdOnDescending": 1
        }
      },
      TaskGroupRevision: {},
      TaskLog: {},
      TaskOrchestrationContainer: {},
      TaskOrchestrationItem: {},
      TaskOrchestrationItemType: {
        enumValues: {
          "container": 0,
          "job": 1
        }
      },
      TaskOrchestrationJob: {},
      TaskOrchestrationPlan: {},
      TaskOrchestrationPlanGroup: {},
      TaskOrchestrationPlanGroupsQueueMetrics: {},
      TaskOrchestrationPlanState: {
        enumValues: {
          "inProgress": 1,
          "queued": 2,
          "completed": 4,
          "throttled": 8
        }
      },
      TaskOrchestrationQueuedPlan: {},
      TaskOrchestrationQueuedPlanGroup: {},
      TaskRestrictions: {},
      TaskResult: {
        enumValues: {
          "succeeded": 0,
          "succeededWithIssues": 1,
          "failed": 2,
          "canceled": 3,
          "skipped": 4,
          "abandoned": 5
        }
      },
      Timeline: {},
      TimelineRecord: {},
      TimelineRecordState: {
        enumValues: {
          "pending": 0,
          "inProgress": 1,
          "completed": 2
        }
      },
      VariableGroup: {},
      VariableGroupActionFilter: {
        enumValues: {
          "none": 0,
          "manage": 2,
          "use": 16
        }
      },
      VariableGroupQueryOrder: {
        enumValues: {
          "idAscending": 0,
          "idDescending": 1
        }
      },
      VirtualMachine: {},
      VirtualMachineGroup: {},
      VirtualMachineResource: {},
      VirtualMachineResourceCreateParameters: {}
    };
    exports.TypeInfo.AgentChangeEvent.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgent
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      timeStamp: {
        isDate: true
      }
    };
    exports.TypeInfo.AgentJobRequestMessage.fields = {
      environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
      },
      lockedUntil: {
        isDate: true
      }
    };
    exports.TypeInfo.AgentPoolEvent.fields = {
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPool
      }
    };
    exports.TypeInfo.AgentQueueEvent.fields = {
      queue: {
        typeInfo: exports.TypeInfo.TaskAgentQueue
      }
    };
    exports.TypeInfo.AgentQueuesEvent.fields = {
      queues: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentQueue
      }
    };
    exports.TypeInfo.AzureKeyVaultVariableGroupProviderData.fields = {
      lastRefreshedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.AzureKeyVaultVariableValue.fields = {
      expires: {
        isDate: true
      }
    };
    exports.TypeInfo.DemandMinimumVersion.fields = {
      source: {
        typeInfo: exports.TypeInfo.DemandSource
      }
    };
    exports.TypeInfo.DemandSource.fields = {
      sourceType: {
        enumType: exports.TypeInfo.DemandSourceType
      }
    };
    exports.TypeInfo.DeploymentGroup.fields = {
      machines: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentMachine
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      }
    };
    exports.TypeInfo.DeploymentGroupMetrics.fields = {
      deploymentGroup: {
        typeInfo: exports.TypeInfo.DeploymentGroupReference
      }
    };
    exports.TypeInfo.DeploymentGroupReference.fields = {
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      }
    };
    exports.TypeInfo.DeploymentMachine.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgent
      }
    };
    exports.TypeInfo.DeploymentMachineChangedData.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgent
      }
    };
    exports.TypeInfo.DeploymentMachineGroup.fields = {
      machines: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentMachine
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      }
    };
    exports.TypeInfo.DeploymentMachineGroupReference.fields = {
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      }
    };
    exports.TypeInfo.DeploymentMachinesChangeEvent.fields = {
      machineGroupReference: {
        typeInfo: exports.TypeInfo.DeploymentGroupReference
      },
      machines: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentMachineChangedData
      }
    };
    exports.TypeInfo.DeploymentPoolSummary.fields = {
      deploymentGroups: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentGroupReference
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      resource: {
        typeInfo: exports.TypeInfo.EnvironmentResourceReference
      }
    };
    exports.TypeInfo.ElasticNode.fields = {
      agentState: {
        enumType: exports.TypeInfo.ElasticAgentState
      },
      computeState: {
        enumType: exports.TypeInfo.ElasticComputeState
      },
      desiredState: {
        enumType: exports.TypeInfo.ElasticNodeState
      },
      state: {
        enumType: exports.TypeInfo.ElasticNodeState
      },
      stateChangedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.ElasticNodeSettings.fields = {
      state: {
        enumType: exports.TypeInfo.ElasticNodeState
      }
    };
    exports.TypeInfo.ElasticPool.fields = {
      offlineSince: {
        isDate: true
      },
      osType: {
        enumType: exports.TypeInfo.OperatingSystemType
      },
      state: {
        enumType: exports.TypeInfo.ElasticPoolState
      }
    };
    exports.TypeInfo.ElasticPoolCreationResult.fields = {
      agentPool: {
        typeInfo: exports.TypeInfo.TaskAgentPool
      },
      agentQueue: {
        typeInfo: exports.TypeInfo.TaskAgentQueue
      },
      elasticPool: {
        typeInfo: exports.TypeInfo.ElasticPool
      }
    };
    exports.TypeInfo.ElasticPoolLog.fields = {
      level: {
        enumType: exports.TypeInfo.LogLevel
      },
      operation: {
        enumType: exports.TypeInfo.OperationType
      },
      timestamp: {
        isDate: true
      }
    };
    exports.TypeInfo.ElasticPoolSettings.fields = {
      osType: {
        enumType: exports.TypeInfo.OperatingSystemType
      }
    };
    exports.TypeInfo.EnvironmentDeploymentExecutionRecord.fields = {
      finishTime: {
        isDate: true
      },
      queueTime: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.EnvironmentInstance.fields = {
      createdOn: {
        isDate: true
      },
      lastModifiedOn: {
        isDate: true
      },
      resources: {
        isArray: true,
        typeInfo: exports.TypeInfo.EnvironmentResourceReference
      }
    };
    exports.TypeInfo.EnvironmentResource.fields = {
      createdOn: {
        isDate: true
      },
      lastModifiedOn: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.EnvironmentResourceType
      }
    };
    exports.TypeInfo.EnvironmentResourceDeploymentExecutionRecord.fields = {
      finishTime: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.EnvironmentResourceReference.fields = {
      type: {
        enumType: exports.TypeInfo.EnvironmentResourceType
      }
    };
    exports.TypeInfo.Issue.fields = {
      type: {
        enumType: exports.TypeInfo.IssueType
      }
    };
    exports.TypeInfo.JobAssignedEvent.fields = {
      request: {
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
      }
    };
    exports.TypeInfo.JobCompletedEvent.fields = {
      result: {
        enumType: exports.TypeInfo.TaskResult
      }
    };
    exports.TypeInfo.JobEnvironment.fields = {
      mask: {
        isArray: true,
        typeInfo: exports.TypeInfo.MaskHint
      },
      secureFiles: {
        isArray: true,
        typeInfo: exports.TypeInfo.SecureFile
      }
    };
    exports.TypeInfo.JobRequestMessage.fields = {
      environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
      }
    };
    exports.TypeInfo.KubernetesResource.fields = {
      createdOn: {
        isDate: true
      },
      lastModifiedOn: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.EnvironmentResourceType
      }
    };
    exports.TypeInfo.MaskHint.fields = {
      type: {
        enumType: exports.TypeInfo.MaskType
      }
    };
    exports.TypeInfo.PackageMetadata.fields = {
      createdOn: {
        isDate: true
      }
    };
    exports.TypeInfo.PlanEnvironment.fields = {
      mask: {
        isArray: true,
        typeInfo: exports.TypeInfo.MaskHint
      }
    };
    exports.TypeInfo.ResourceLockRequest.fields = {
      assignTime: {
        isDate: true
      },
      finishTime: {
        isDate: true
      },
      lockType: {
        enumType: exports.TypeInfo.ExclusiveLockType
      },
      queueTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.ResourceLockStatus
      }
    };
    exports.TypeInfo.ResourceUsage.fields = {
      runningRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
      }
    };
    exports.TypeInfo.SecureFile.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.SecureFileEvent.fields = {
      secureFiles: {
        isArray: true,
        typeInfo: exports.TypeInfo.SecureFile
      }
    };
    exports.TypeInfo.ServerTaskRequestMessage.fields = {
      environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
      },
      taskDefinition: {
        typeInfo: exports.TypeInfo.TaskDefinition
      }
    };
    exports.TypeInfo.ServiceEndpointAuthenticationScheme.fields = {
      inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
      }
    };
    exports.TypeInfo.ServiceEndpointExecutionData.fields = {
      finishTime: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      }
    };
    exports.TypeInfo.ServiceEndpointExecutionRecord.fields = {
      data: {
        typeInfo: exports.TypeInfo.ServiceEndpointExecutionData
      }
    };
    exports.TypeInfo.ServiceEndpointExecutionRecordsInput.fields = {
      data: {
        typeInfo: exports.TypeInfo.ServiceEndpointExecutionData
      }
    };
    exports.TypeInfo.ServiceEndpointRequestResult.fields = {};
    exports.TypeInfo.ServiceEndpointType.fields = {
      authenticationSchemes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ServiceEndpointAuthenticationScheme
      },
      inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
      }
    };
    exports.TypeInfo.TaskAgent.fields = {
      assignedAgentCloudRequest: {
        typeInfo: exports.TypeInfo.TaskAgentCloudRequest
      },
      assignedRequest: {
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
      },
      createdOn: {
        isDate: true
      },
      lastCompletedRequest: {
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
      },
      pendingUpdate: {
        typeInfo: exports.TypeInfo.TaskAgentUpdate
      },
      status: {
        enumType: exports.TypeInfo.TaskAgentStatus
      },
      statusChangedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskAgentCloudRequest.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
      },
      agentConnectedTime: {
        isDate: true
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      provisionedTime: {
        isDate: true
      },
      provisionRequestTime: {
        isDate: true
      },
      releaseRequestTime: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskAgentCloudType.fields = {
      inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
      }
    };
    exports.TypeInfo.TaskAgentDowngrade.fields = {
      code: {
        enumType: exports.TypeInfo.TaskAgentUpdateReasonType
      }
    };
    exports.TypeInfo.TaskAgentJob.fields = {
      steps: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentJobStep
      }
    };
    exports.TypeInfo.TaskAgentJobRequest.fields = {
      assignTime: {
        isDate: true
      },
      finishTime: {
        isDate: true
      },
      lockedUntil: {
        isDate: true
      },
      matchedAgents: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentReference
      },
      queueTime: {
        isDate: true
      },
      receiveTime: {
        isDate: true
      },
      reservedAgent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      }
    };
    exports.TypeInfo.TaskAgentJobStep.fields = {
      type: {
        enumType: exports.TypeInfo.TaskAgentJobStepType
      }
    };
    exports.TypeInfo.TaskAgentManualUpdate.fields = {
      code: {
        enumType: exports.TypeInfo.TaskAgentUpdateReasonType
      }
    };
    exports.TypeInfo.TaskAgentMinAgentVersionRequiredUpdate.fields = {
      code: {
        enumType: exports.TypeInfo.TaskAgentUpdateReasonType
      }
    };
    exports.TypeInfo.TaskAgentPool.fields = {
      createdOn: {
        isDate: true
      },
      options: {
        enumType: exports.TypeInfo.TaskAgentPoolOptions
      },
      poolType: {
        enumType: exports.TypeInfo.TaskAgentPoolType
      }
    };
    exports.TypeInfo.TaskAgentPoolMaintenanceDefinition.fields = {
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      scheduleSetting: {
        typeInfo: exports.TypeInfo.TaskAgentPoolMaintenanceSchedule
      }
    };
    exports.TypeInfo.TaskAgentPoolMaintenanceJob.fields = {
      finishTime: {
        isDate: true
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      queueTime: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobResult
      },
      startTime: {
        isDate: true
      },
      status: {
        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobStatus
      },
      targetAgents: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentPoolMaintenanceJobTargetAgent
      }
    };
    exports.TypeInfo.TaskAgentPoolMaintenanceJobTargetAgent.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
      },
      result: {
        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobResult
      },
      status: {
        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobStatus
      }
    };
    exports.TypeInfo.TaskAgentPoolMaintenanceSchedule.fields = {
      daysToBuild: {
        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceScheduleDays
      }
    };
    exports.TypeInfo.TaskAgentPoolReference.fields = {
      options: {
        enumType: exports.TypeInfo.TaskAgentPoolOptions
      },
      poolType: {
        enumType: exports.TypeInfo.TaskAgentPoolType
      }
    };
    exports.TypeInfo.TaskAgentPoolStatus.fields = {
      options: {
        enumType: exports.TypeInfo.TaskAgentPoolOptions
      },
      poolType: {
        enumType: exports.TypeInfo.TaskAgentPoolType
      }
    };
    exports.TypeInfo.TaskAgentPoolSummary.fields = {
      deploymentGroups: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentGroupReference
      },
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      },
      queues: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentQueue
      }
    };
    exports.TypeInfo.TaskAgentQueue.fields = {
      pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
      }
    };
    exports.TypeInfo.TaskAgentReference.fields = {
      status: {
        enumType: exports.TypeInfo.TaskAgentStatus
      }
    };
    exports.TypeInfo.TaskAgentSession.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
      }
    };
    exports.TypeInfo.TaskAgentUpdate.fields = {
      reason: {
        typeInfo: exports.TypeInfo.TaskAgentUpdateReason
      },
      requestTime: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskAgentUpdateReason.fields = {
      code: {
        enumType: exports.TypeInfo.TaskAgentUpdateReasonType
      }
    };
    exports.TypeInfo.TaskAttachment.fields = {
      createdOn: {
        isDate: true
      },
      lastChangedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskCommandRestrictions.fields = {
      mode: {
        enumType: exports.TypeInfo.TaskCommandMode
      }
    };
    exports.TypeInfo.TaskCompletedEvent.fields = {
      result: {
        enumType: exports.TypeInfo.TaskResult
      }
    };
    exports.TypeInfo.TaskDefinition.fields = {
      restrictions: {
        typeInfo: exports.TypeInfo.TaskRestrictions
      }
    };
    exports.TypeInfo.TaskGroup.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      },
      restrictions: {
        typeInfo: exports.TypeInfo.TaskRestrictions
      }
    };
    exports.TypeInfo.TaskGroupRevision.fields = {
      changedDate: {
        isDate: true
      },
      changeType: {
        enumType: exports.TypeInfo.AuditAction
      }
    };
    exports.TypeInfo.TaskLog.fields = {
      createdOn: {
        isDate: true
      },
      lastChangedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskOrchestrationContainer.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskOrchestrationItem
      },
      itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
      },
      rollback: {
        typeInfo: exports.TypeInfo.TaskOrchestrationContainer
      }
    };
    exports.TypeInfo.TaskOrchestrationItem.fields = {
      itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
      }
    };
    exports.TypeInfo.TaskOrchestrationJob.fields = {
      itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
      }
    };
    exports.TypeInfo.TaskOrchestrationPlan.fields = {
      environment: {
        typeInfo: exports.TypeInfo.PlanEnvironment
      },
      finishTime: {
        isDate: true
      },
      implementation: {
        typeInfo: exports.TypeInfo.TaskOrchestrationContainer
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TaskOrchestrationPlanState
      }
    };
    exports.TypeInfo.TaskOrchestrationPlanGroup.fields = {
      runningRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
      }
    };
    exports.TypeInfo.TaskOrchestrationPlanGroupsQueueMetrics.fields = {
      status: {
        enumType: exports.TypeInfo.PlanGroupStatus
      }
    };
    exports.TypeInfo.TaskOrchestrationQueuedPlan.fields = {
      assignTime: {
        isDate: true
      },
      queueTime: {
        isDate: true
      }
    };
    exports.TypeInfo.TaskOrchestrationQueuedPlanGroup.fields = {
      plans: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskOrchestrationQueuedPlan
      }
    };
    exports.TypeInfo.TaskRestrictions.fields = {
      commands: {
        typeInfo: exports.TypeInfo.TaskCommandRestrictions
      }
    };
    exports.TypeInfo.Timeline.fields = {
      lastChangedOn: {
        isDate: true
      },
      records: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
      }
    };
    exports.TypeInfo.TimelineRecord.fields = {
      finishTime: {
        isDate: true
      },
      issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
      },
      lastModified: {
        isDate: true
      },
      result: {
        enumType: exports.TypeInfo.TaskResult
      },
      startTime: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.TimelineRecordState
      }
    };
    exports.TypeInfo.VariableGroup.fields = {
      createdOn: {
        isDate: true
      },
      modifiedOn: {
        isDate: true
      }
    };
    exports.TypeInfo.VirtualMachine.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgent
      }
    };
    exports.TypeInfo.VirtualMachineGroup.fields = {
      createdOn: {
        isDate: true
      },
      lastModifiedOn: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.EnvironmentResourceType
      }
    };
    exports.TypeInfo.VirtualMachineResource.fields = {
      agent: {
        typeInfo: exports.TypeInfo.TaskAgent
      },
      createdOn: {
        isDate: true
      },
      lastModifiedOn: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.EnvironmentResourceType
      }
    };
    exports.TypeInfo.VirtualMachineResourceCreateParameters.fields = {
      virtualMachineResource: {
        typeInfo: exports.TypeInfo.VirtualMachineResource
      }
    };
  }
});

// node_modules/azure-devops-node-api/TaskAgentApiBase.js
var require_TaskAgentApiBase = __commonJS({
  "node_modules/azure-devops-node-api/TaskAgentApiBase.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var TaskAgentInterfaces = require_TaskAgentInterfaces();
    var TaskAgentApiBase = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-TaskAgent-api", options);
      }
      addAgentCloud(agentCloud) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bfa72b3d-0fc6-43fb-932b-a7f6559f93b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, agentCloud, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentCloud(agentCloudId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              agentCloudId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bfa72b3d-0fc6-43fb-932b-a7f6559f93b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentCloud(agentCloudId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              agentCloudId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bfa72b3d-0fc6-43fb-932b-a7f6559f93b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentClouds() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bfa72b3d-0fc6-43fb-932b-a7f6559f93b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentCloud(updatedCloud, agentCloudId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              agentCloudId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bfa72b3d-0fc6-43fb-932b-a7f6559f93b9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updatedCloud, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentCloudTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "5932e193-f376-469d-9c3e-e5588ce12cb5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentCloudType, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForQueue(project, queueId, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (top == null) {
            throw new TypeError("top can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              queueId
            };
            let queryValues = {
              "$top": top,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "f5f81ffb-f396-498d-85b1-5ada145e648a", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueAgentRequest(request, project, queueId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              queueId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "f5f81ffb-f396-498d-85b1-5ada145e648a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, request, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addAgent(agent, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, agent, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgent(poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgent(poolId, agentId, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            let queryValues = {
              includeCapabilities,
              includeAssignedRequest,
              includeLastCompletedRequest,
              propertyFilters: propertyFilters && propertyFilters.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgents(poolId, agentName, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters, demands) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              agentName,
              includeCapabilities,
              includeAssignedRequest,
              includeLastCompletedRequest,
              propertyFilters: propertyFilters && propertyFilters.join(","),
              demands: demands && demands.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceAgent(agent, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, agent, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgent(agent, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, agent, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAzureManagementGroups() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "39fe3bf2-7ee0-4198-a469-4a29929afa9c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAzureSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "bcd6189c-0303-471f-a8e1-acb22b74d700", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      generateDeploymentGroupAccessToken(project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "3d197ba2-c3e9-4253-882f-0ee2440f8174", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDeploymentGroup(deploymentGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "083c4d89-ab35-45af-aa11-7cf66895c53e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, deploymentGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDeploymentGroup(project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "083c4d89-ab35-45af-aa11-7cf66895c53e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentGroup(project, deploymentGroupId, actionFilter, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              actionFilter,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "083c4d89-ab35-45af-aa11-7cf66895c53e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentGroups(project, name, actionFilter, expand, continuationToken, top, ids) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              name,
              actionFilter,
              "$expand": expand,
              continuationToken,
              "$top": top,
              ids: ids && ids.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "083c4d89-ab35-45af-aa11-7cf66895c53e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentGroup(deploymentGroup, project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "083c4d89-ab35-45af-aa11-7cf66895c53e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, deploymentGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentGroupsMetrics(project, deploymentGroupName, continuationToken, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              deploymentGroupName,
              continuationToken,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "281c6308-427a-49e1-b83a-dac0f4862189", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroupMetrics, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForDeploymentMachine(project, deploymentGroupId, machineId, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          if (machineId == null) {
            throw new TypeError("machineId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              machineId,
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a3540e5b-f0dc-4668-963b-b752459be545", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForDeploymentMachines(project, deploymentGroupId, machineIds, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              machineIds: machineIds && machineIds.join(","),
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a3540e5b-f0dc-4668-963b-b752459be545", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      refreshDeploymentMachines(project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "91006ac4-0f68-4d82-a2bc-540676bd73ce", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      generateDeploymentPoolAccessToken(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "e077ee4a-399b-420b-841f-c43fbc058e0b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentPoolsSummary(poolName, expands, poolIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              poolName,
              expands,
              poolIds: poolIds && poolIds.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6525d6c6-258f-40e0-a1a9-8a24a3957625", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentPoolSummary, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForDeploymentTarget(project, deploymentGroupId, targetId, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          if (targetId == null) {
            throw new TypeError("targetId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              targetId,
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2fac0be3-8c8f-4473-ab93-c1389b08a2c9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForDeploymentTargets(project, deploymentGroupId, targetIds, ownerId, completedOn, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              targetIds: targetIds && targetIds.join(","),
              ownerId,
              completedOn,
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2fac0be3-8c8f-4473-ab93-c1389b08a2c9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      refreshDeploymentTargets(project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "1c1a817f-f23d-41c6-bf8d-14b638f64152", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryEndpoint(endpoint) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "f223b809-8c33-4b7d-b53f-07232569b5d6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, endpoint, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEnvironmentDeploymentExecutionRecords(project, environmentId, continuationToken, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            let queryValues = {
              continuationToken,
              top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "51bb5d21-4305-4ea6-9dbb-b7488af73334", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentDeploymentExecutionRecord, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addEnvironment(environmentCreateParameter, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8572b1fc-2482-47fa-8f74-7e3ed53ee54b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, environmentCreateParameter, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteEnvironment(project, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8572b1fc-2482-47fa-8f74-7e3ed53ee54b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEnvironmentById(project, environmentId, expands) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            let queryValues = {
              expands
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8572b1fc-2482-47fa-8f74-7e3ed53ee54b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEnvironments(project, name, continuationToken, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              name,
              continuationToken,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8572b1fc-2482-47fa-8f74-7e3ed53ee54b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateEnvironment(environmentUpdateParameter, project, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8572b1fc-2482-47fa-8f74-7e3ed53ee54b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, environmentUpdateParameter, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskHubLicenseDetails(hubName, includeEnterpriseUsersCount, includeHostedAgentMinutesCount) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              hubName
            };
            let queryValues = {
              includeEnterpriseUsersCount,
              includeHostedAgentMinutesCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "distributedtask", "f9f0f436-b8a1-4475-9041-1ccdbf8f0128", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTaskHubLicenseDetails(taskHubLicenseDetails, hubName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              hubName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "distributedtask", "f9f0f436-b8a1-4475-9041-1ccdbf8f0128", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, taskHubLicenseDetails, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      validateInputs(inputValidationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "58475b1e-adaf-4155-9bc1-e04bf1fff4c2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, inputValidationRequest, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentRequest(poolId, requestId, lockToken, result, agentShuttingDown) {
        return __awaiter(this, void 0, void 0, function* () {
          if (lockToken == null) {
            throw new TypeError("lockToken can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              requestId
            };
            let queryValues = {
              lockToken,
              result,
              agentShuttingDown
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequest(poolId, requestId, includeStatus) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              requestId
            };
            let queryValues = {
              includeStatus
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequests(poolId, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (top == null) {
            throw new TypeError("top can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              "$top": top,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForAgent(poolId, agentId, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          if (agentId == null) {
            throw new TypeError("agentId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              agentId,
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForAgents(poolId, agentIds, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              agentIds: agentIds && agentIds.join(","),
              completedRequestCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentRequestsForPlan(poolId, planId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (planId == null) {
            throw new TypeError("planId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              planId,
              jobId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueAgentRequestByPool(request, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, request, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentRequest(request, poolId, requestId, lockToken, updateOptions) {
        return __awaiter(this, void 0, void 0, function* () {
          if (lockToken == null) {
            throw new TypeError("lockToken can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              requestId
            };
            let queryValues = {
              lockToken,
              updateOptions
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, request, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addKubernetesResource(createParameters, project, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "73fba52f-15ab-42b3-a538-ce67a9223a04", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, createParameters, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.KubernetesResource, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteKubernetesResource(project, environmentId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "73fba52f-15ab-42b3-a538-ce67a9223a04", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getKubernetesResource(project, environmentId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "73fba52f-15ab-42b3-a538-ce67a9223a04", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.KubernetesResource, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      generateDeploymentMachineGroupAccessToken(project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "f8c7c0de-ac0d-469b-9cb1-c21f72d67693", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDeploymentMachineGroup(machineGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, machineGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDeploymentMachineGroup(project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentMachineGroup(project, machineGroupId, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            let queryValues = {
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentMachineGroups(project, machineGroupName, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              machineGroupName,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentMachineGroup(machineGroup, project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machineGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentMachineGroupMachines(project, machineGroupId, tagFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            let queryValues = {
              tagFilters: tagFilters && tagFilters.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "966c3874-c347-4b18-a90c-d509116717fd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentMachineGroupMachines(deploymentMachines, project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              machineGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "966c3874-c347-4b18-a90c-d509116717fd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, deploymentMachines, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDeploymentMachine(machine, project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDeploymentMachine(project, deploymentGroupId, machineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              machineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentMachine(project, deploymentGroupId, machineId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              machineId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentMachines(project, deploymentGroupId, tags, name, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              tags: tags && tags.join(","),
              name,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceDeploymentMachine(machine, project, deploymentGroupId, machineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              machineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentMachine(machine, project, deploymentGroupId, machineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              machineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentMachines(machines, project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6f6d406f-cfe6-409c-9327-7009928077e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machines, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAgentPoolMaintenanceDefinition(definition, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "80572e16-58f0-4419-ac07-d19fde32195c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, definition, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentPoolMaintenanceDefinition(poolId, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "80572e16-58f0-4419-ac07-d19fde32195c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMaintenanceDefinition(poolId, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "80572e16-58f0-4419-ac07-d19fde32195c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMaintenanceDefinitions(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "80572e16-58f0-4419-ac07-d19fde32195c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentPoolMaintenanceDefinition(definition, poolId, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "80572e16-58f0-4419-ac07-d19fde32195c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, definition, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentPoolMaintenanceJob(poolId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              jobId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMaintenanceJob(poolId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              jobId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMaintenanceJobLogs(poolId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              jobId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMaintenanceJobs(poolId, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              definitionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queueAgentPoolMaintenanceJob(job, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, job, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentPoolMaintenanceJob(job, poolId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              jobId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "15e7ab6e-abce-4601-a6d8-e111fe148f46", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, job, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteMessage(poolId, messageId, sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (sessionId == null) {
            throw new TypeError("sessionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              messageId
            };
            let queryValues = {
              sessionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getMessage(poolId, sessionId, lastMessageId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (sessionId == null) {
            throw new TypeError("sessionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              sessionId,
              lastMessageId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      refreshAgent(poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (agentId == null) {
            throw new TypeError("agentId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              agentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      refreshAgents(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      sendMessage(message, poolId, requestId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (requestId == null) {
            throw new TypeError("requestId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              requestId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, message, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPackage(packageType, platform, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              packageType,
              platform,
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.PackageMetadata, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPackages(packageType, platform, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              packageType,
              platform
            };
            let queryValues = {
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.PackageMetadata, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolMetadata(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "0d62f887-9f53-48b9-9161-4c35d5735b0f", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setAgentPoolMetadata(customHeaders, agentPoolMetadata, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "0d62f887-9f53-48b9-9161-4c35d5735b0f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.replace(url, agentPoolMetadata, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addAgentPool(pool) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, pool, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentPool(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPool(poolId, properties, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            let queryValues = {
              properties: properties && properties.join(","),
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPools(poolName, properties, poolType, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              poolName,
              properties: properties && properties.join(","),
              poolType,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentPoolsByIds(poolIds, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (poolIds == null) {
            throw new TypeError("poolIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              poolIds: poolIds && poolIds.join(","),
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentPool(pool, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, pool, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addAgentQueue(queue, project, authorizePipelines) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              authorizePipelines
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, queue, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTeamProject(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentQueue(queueId, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              queueId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentQueue(queueId, project, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              queueId
            };
            let queryValues = {
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentQueues(project, queueName, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              queueName,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentQueuesByIds(queueIds, project, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (queueIds == null) {
            throw new TypeError("queueIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              queueIds: queueIds && queueIds.join(","),
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentQueuesByNames(queueNames, project, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (queueNames == null) {
            throw new TypeError("queueNames can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              queueNames: queueNames && queueNames.join(","),
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentQueuesForPools(poolIds, project, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (poolIds == null) {
            throw new TypeError("poolIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              poolIds: poolIds && poolIds.join(","),
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAgentCloudRequests(agentCloudId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              agentCloudId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "20189bd7-5134-49c2-b8e9-f9e856eea2b2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentCloudRequest, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceLimits() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "1f1f0557-c445-42a6-b4a0-0df605a3a0f8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResourceUsage(parallelismTag, poolIsHosted, includeRunningRequests) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              parallelismTag,
              poolIsHosted,
              includeRunningRequests
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "eae1d376-a8b1-4475-9041-1dfdbe8f0143", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.ResourceUsage, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskGroupHistory(project, taskGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "100cc92a-b255-47fa-9ab3-e44a2985a3ac", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroupRevision, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteSecureFile(project, secureFileId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              secureFileId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      downloadSecureFile(project, secureFileId, ticket, download) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ticket == null) {
            throw new TypeError("ticket can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              secureFileId
            };
            let queryValues = {
              ticket,
              download
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSecureFile(project, secureFileId, includeDownloadTicket, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              secureFileId
            };
            let queryValues = {
              includeDownloadTicket,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSecureFiles(project, namePattern, includeDownloadTickets, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              namePattern,
              includeDownloadTickets,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSecureFilesByIds(project, secureFileIds, includeDownloadTickets, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (secureFileIds == null) {
            throw new TypeError("secureFileIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              secureFileIds: secureFileIds && secureFileIds.join(","),
              includeDownloadTickets,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSecureFilesByNames(project, secureFileNames, includeDownloadTickets, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (secureFileNames == null) {
            throw new TypeError("secureFileNames can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              secureFileNames: secureFileNames && secureFileNames.join(","),
              includeDownloadTickets,
              actionFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      querySecureFilesByProperties(condition, project, namePattern) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              namePattern
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, condition, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSecureFile(secureFile, project, secureFileId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              secureFileId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, secureFile, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSecureFiles(secureFiles, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, secureFiles, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      uploadSecureFile(customHeaders, contentStream, project, name, authorizePipelines) {
        return __awaiter(this, void 0, void 0, function* () {
          if (name == null) {
            throw new TypeError("name can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              name,
              authorizePipelines
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "adcfd8bc-b184-43ba-bd84-7c8c6a2ff421", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAgentSession(session, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, session, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentSession, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteAgentSession(poolId, sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              sessionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addDeploymentTarget(machine, project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteDeploymentTarget(project, deploymentGroupId, targetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              targetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentTarget(project, deploymentGroupId, targetId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              targetId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeploymentTargets(project, deploymentGroupId, tags, name, partialNameMatch, expand, agentStatus, agentJobResult, continuationToken, top, enabled, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            let queryValues = {
              tags: tags && tags.join(","),
              name,
              partialNameMatch,
              "$expand": expand,
              agentStatus,
              agentJobResult,
              continuationToken,
              "$top": top,
              enabled,
              propertyFilters: propertyFilters && propertyFilters.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceDeploymentTarget(machine, project, deploymentGroupId, targetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              targetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentTarget(machine, project, deploymentGroupId, targetId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId,
              targetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machine, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateDeploymentTargets(machines, project, deploymentGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              deploymentGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "2f0aa599-c121-4256-a5fd-ba370e0ae7b6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machines, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addTaskGroup(taskGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, taskGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTaskGroup(project, taskGroupId, comment) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            let queryValues = {
              comment
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskGroup(project, taskGroupId, versionSpec, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          if (versionSpec == null) {
            throw new TypeError("versionSpec can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            let queryValues = {
              versionSpec,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskGroupRevision(project, taskGroupId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
          if (revision == null) {
            throw new TypeError("revision can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            let queryValues = {
              revision
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskGroups(project, taskGroupId, expanded, taskIdFilter, deleted, top, continuationToken, queryOrder) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            let queryValues = {
              expanded,
              taskIdFilter,
              deleted,
              "$top": top,
              continuationToken,
              queryOrder
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      publishTaskGroup(taskGroupMetadata, project, parentTaskGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (parentTaskGroupId == null) {
            throw new TypeError("parentTaskGroupId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              parentTaskGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, taskGroupMetadata, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      undeleteTaskGroup(taskGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, taskGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTaskGroup(taskGroup, project, taskGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, taskGroup, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTaskGroupProperties(taskGroupUpdateProperties, project, taskGroupId, disablePriorVersions) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              taskGroupId
            };
            let queryValues = {
              disablePriorVersions
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, taskGroupUpdateProperties, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTaskDefinition(taskId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              taskId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskContentZip(taskId, versionString, visibility, scopeLocal) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              taskId,
              versionString
            };
            let queryValues = {
              visibility,
              scopeLocal
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskDefinition(taskId, versionString, visibility, scopeLocal) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              taskId,
              versionString
            };
            let queryValues = {
              visibility,
              scopeLocal
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskDefinition, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTaskDefinitions(taskId, visibility, scopeLocal, allVersions) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              taskId
            };
            let queryValues = {
              visibility,
              scopeLocal,
              allVersions
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentUpdateState(poolId, agentId, currentState) {
        return __awaiter(this, void 0, void 0, function* () {
          if (currentState == null) {
            throw new TypeError("currentState can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            let queryValues = {
              currentState
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8cc1b02b-ae49-4516-b5ad-4f9b29967c30", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateAgentUserCapabilities(userCapabilities, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              poolId,
              agentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "30ba3ada-fedf-4da8-bbb5-dacf2f82e176", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, userCapabilities, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addVariableGroup(variableGroupParameters) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, variableGroupParameters, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteVariableGroup(groupId, projectIds) {
        return __awaiter(this, void 0, void 0, function* () {
          if (projectIds == null) {
            throw new TypeError("projectIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              groupId
            };
            let queryValues = {
              projectIds: projectIds && projectIds.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      shareVariableGroup(variableGroupProjectReferences, variableGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (variableGroupId == null) {
            throw new TypeError("variableGroupId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              variableGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, variableGroupProjectReferences, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateVariableGroup(variableGroupParameters, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, variableGroupParameters, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVariableGroup(project, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVariableGroups(project, groupName, actionFilter, top, continuationToken, queryOrder) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              groupName,
              actionFilter,
              "$top": top,
              continuationToken,
              queryOrder
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVariableGroupsById(project, groupIds) {
        return __awaiter(this, void 0, void 0, function* () {
          if (groupIds == null) {
            throw new TypeError("groupIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              groupIds: groupIds && groupIds.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addVirtualMachineGroup(createParameters, project, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9e597901-4af7-4cc3-8d92-47d54db8ebfb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, createParameters, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteVirtualMachineGroup(project, environmentId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9e597901-4af7-4cc3-8d92-47d54db8ebfb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVirtualMachineGroup(project, environmentId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9e597901-4af7-4cc3-8d92-47d54db8ebfb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateVirtualMachineGroup(resource, project, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9e597901-4af7-4cc3-8d92-47d54db8ebfb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, resource, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVirtualMachines(project, environmentId, resourceId, continuationToken, name, partialNameMatch, tags, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            let queryValues = {
              continuationToken,
              name,
              partialNameMatch,
              tags: tags && tags.join(","),
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "48700676-2ba5-4282-8ec8-083280d169c7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateVirtualMachines(machines, project, environmentId, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              environmentId,
              resourceId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "48700676-2ba5-4282-8ec8-083280d169c7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, machines, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachine, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      acquireAccessToken(authenticationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9c63205e-3a0f-42a0-ad88-095200f13607", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, authenticationRequest, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAadOAuthRequest(tenantId, redirectUri, promptOption, completeCallbackPayload, completeCallbackByAuthCode) {
        return __awaiter(this, void 0, void 0, function* () {
          if (tenantId == null) {
            throw new TypeError("tenantId can not be null or undefined");
          }
          if (redirectUri == null) {
            throw new TypeError("redirectUri can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              tenantId,
              redirectUri,
              promptOption,
              completeCallbackPayload,
              completeCallbackByAuthCode
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9c63205e-3a0f-42a0-ad88-095200f13607", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getVstsAadTenantId() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "9c63205e-3a0f-42a0-ad88-095200f13607", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getYamlSchema(validateTaskNames) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              validateTaskNames
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "1f9990b9-1dba-441f-9c2e-6485888c42b6", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    TaskAgentApiBase.RESOURCE_AREA_ID = "a85b8835-c1a1-4aac-ae97-1c3d0ba72dbd";
    exports.TaskAgentApiBase = TaskAgentApiBase;
  }
});

// node_modules/azure-devops-node-api/TaskAgentApi.js
var require_TaskAgentApi = __commonJS({
  "node_modules/azure-devops-node-api/TaskAgentApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var taskagentbasem = require_TaskAgentApiBase();
    var url = require("url");
    var TaskAgentApi = class extends taskagentbasem.TaskAgentApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, options);
        this._handlers = handlers;
        this._options = options;
      }
      deleteTaskDefinition(taskId) {
        let promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd").then((location) => {
          if (location) {
            return super.deleteTaskDefinition(taskId);
          } else {
            var fallbackClient = this._getFallbackClient(this.baseUrl);
            if (!fallbackClient) {
              throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
            } else {
              return fallbackClient.deleteTaskDefinition(taskId);
            }
          }
        });
        return promise;
      }
      getTaskContentZip(taskId, versionString, visibility, scopeLocal) {
        let promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd").then((location) => {
          if (location) {
            return super.getTaskContentZip(taskId, versionString, visibility, scopeLocal);
          } else {
            var fallbackClient = this._getFallbackClient(this.baseUrl);
            if (!fallbackClient) {
              throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
            } else {
              return fallbackClient.getTaskContentZip(taskId, versionString, visibility, scopeLocal);
            }
          }
        });
        return promise;
      }
      getTaskDefinition(taskId, versionString, visibility, scopeLocal) {
        let promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd").then((location) => {
          if (location) {
            return super.getTaskDefinition(taskId, versionString, visibility, scopeLocal);
          } else {
            var fallbackClient = this._getFallbackClient(this.baseUrl);
            if (!fallbackClient) {
              throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
            } else {
              return fallbackClient.getTaskDefinition(taskId, versionString, visibility, scopeLocal);
            }
          }
        });
        return promise;
      }
      getTaskDefinitions(taskId, visibility, scopeLocal) {
        let promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd").then((location) => {
          if (location) {
            return super.getTaskDefinitions(taskId, visibility, scopeLocal);
          } else {
            var fallbackClient = this._getFallbackClient(this.baseUrl);
            if (!fallbackClient) {
              throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
            } else {
              return fallbackClient.getTaskDefinitions(taskId, visibility, scopeLocal);
            }
          }
        });
        return promise;
      }
      uploadTaskDefinition(customHeaders, contentStream, taskId, overwrite) {
        return __awaiter(this, void 0, void 0, function* () {
          let routeValues = {
            taskId
          };
          let queryValues = {
            overwrite
          };
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("3.0-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
              let url2 = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url2, contentStream, options);
              resolve(res.result);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      _getFallbackClient(baseUrl) {
        if (!this._fallbackClient) {
          var accountUrl = this._getAccountUrl(baseUrl);
          if (accountUrl) {
            this._fallbackClient = new TaskAgentApi(accountUrl, this._handlers, this._options);
          }
        }
        return this._fallbackClient;
      }
      _getAccountUrl(collectionUrl) {
        var purl = url.parse(collectionUrl);
        if (!purl.protocol || !purl.host) {
          return null;
        }
        var accountUrl = purl.protocol + "//" + purl.host;
        var splitPath = purl.path.split("/").slice(1);
        if (splitPath.length === 0 || splitPath.length === 1 && splitPath[0] === "") {
          return null;
        }
        if (splitPath[0] === "tfs" && (splitPath.length === 2 || splitPath.length === 3 && splitPath[2].length === 0)) {
          accountUrl += "/tfs";
        } else if (splitPath.length === 2 && splitPath[0] === "") {
          return accountUrl;
        } else if (splitPath.length > 1) {
          return null;
        }
        return accountUrl;
      }
    };
    exports.TaskAgentApi = TaskAgentApi;
  }
});

// node_modules/azure-devops-node-api/TaskApi.js
var require_TaskApi = __commonJS({
  "node_modules/azure-devops-node-api/TaskApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var TaskAgentInterfaces = require_TaskAgentInterfaces();
    var TaskApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Task-api", options);
      }
      getPlanAttachments(scopeIdentifier, hubName, planId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "eb55e5d6-2f30-4295-b5ed-38da50b1fc52", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAttachment(customHeaders, contentStream, scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId,
              type,
              name
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("PUT", url, contentStream, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAttachmentFromArtifact(scopeIdentifier, hubName, planId, timelineId, recordId, type, name, artifactHash, length) {
        return __awaiter(this, void 0, void 0, function* () {
          if (artifactHash == null) {
            throw new TypeError("artifactHash can not be null or undefined");
          }
          if (length == null) {
            throw new TypeError("length can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId,
              type,
              name
            };
            let queryValues = {
              artifactHash,
              length
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachment(scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId,
              type,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentContent(scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId,
              type,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachments(scopeIdentifier, hubName, planId, timelineId, recordId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      appendTimelineRecordFeed(lines, scopeIdentifier, hubName, planId, timelineId, recordId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "858983e4-19bd-4c5e-864c-507b59b58b12", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, lines, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLines(scopeIdentifier, hubName, planId, timelineId, recordId, stepId, endLine, takeCount, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (stepId == null) {
            throw new TypeError("stepId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId,
              recordId
            };
            let queryValues = {
              stepId,
              endLine,
              takeCount,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "858983e4-19bd-4c5e-864c-507b59b58b12", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getJobInstance(scopeIdentifier, hubName, orchestrationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              orchestrationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "0a1efd25-abda-43bd-9629-6c7bdd2e0d60", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJob, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      appendLogContent(customHeaders, contentStream, scopeIdentifier, hubName, planId, logId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              logId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      associateLog(scopeIdentifier, hubName, planId, logId, serializedBlobId, lineCount) {
        return __awaiter(this, void 0, void 0, function* () {
          if (serializedBlobId == null) {
            throw new TypeError("serializedBlobId can not be null or undefined");
          }
          if (lineCount == null) {
            throw new TypeError("lineCount can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              logId
            };
            let queryValues = {
              serializedBlobId,
              lineCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createLog(log, scopeIdentifier, hubName, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, log, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLog(scopeIdentifier, hubName, planId, logId, startLine, endLine) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              logId
            };
            let queryValues = {
              startLine,
              endLine
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLogs(scopeIdentifier, hubName, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPlanGroupsQueueMetrics(scopeIdentifier, hubName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "038fd4d5-cda7-44ca-92c0-935843fee1a7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationPlanGroupsQueueMetrics, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQueuedPlanGroups(scopeIdentifier, hubName, statusFilter, count) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName
            };
            let queryValues = {
              statusFilter,
              count
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "0dd73091-3e36-4f43-b443-1b76dd426d84", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationQueuedPlanGroup, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQueuedPlanGroup(scopeIdentifier, hubName, planGroup) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planGroup
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "65fd0708-bc1e-447b-a731-0587c5464e5b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationQueuedPlanGroup, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPlan(scopeIdentifier, hubName, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "distributedtask", "5cecd946-d704-471e-a45f-3b4064fcfaba", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationPlan, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRecords(scopeIdentifier, hubName, planId, timelineId, changeId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId
            };
            let queryValues = {
              changeId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8893bc5b-35b2-4be7-83cb-99e683551db4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TimelineRecord, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateRecords(records, scopeIdentifier, hubName, planId, timelineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "8893bc5b-35b2-4be7-83cb-99e683551db4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, records, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TimelineRecord, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTimeline(timeline, scopeIdentifier, hubName, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, timeline, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTimeline(scopeIdentifier, hubName, planId, timelineId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTimeline(scopeIdentifier, hubName, planId, timelineId, changeId, includeRecords) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId,
              timelineId
            };
            let queryValues = {
              changeId,
              includeRecords
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTimelines(scopeIdentifier, hubName, planId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              scopeIdentifier,
              hubName,
              planId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    exports.TaskApi = TaskApi;
  }
});

// node_modules/azure-devops-node-api/TestApi.js
var require_TestApi = __commonJS({
  "node_modules/azure-devops-node-api/TestApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var TestInterfaces = require_TestInterfaces();
    var TestApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Test-api", options);
      }
      createTestIterationResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, iterationId, actionPath) {
        return __awaiter(this, void 0, void 0, function* () {
          if (iterationId == null) {
            throw new TypeError("iterationId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            let queryValues = {
              iterationId,
              actionPath
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, attachmentRequestModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestResultAttachment(attachmentRequestModel, project, runId, testCaseResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, attachmentRequestModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestSubResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, testSubResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testSubResultId == null) {
            throw new TypeError("testSubResultId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            let queryValues = {
              testSubResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, attachmentRequestModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultAttachmentContent(project, runId, testCaseResultId, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId,
              attachmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultAttachments(project, runId, testCaseResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultAttachmentZip(project, runId, testCaseResultId, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId,
              attachmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestSubResultAttachmentContent(project, runId, testCaseResultId, attachmentId, testSubResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testSubResultId == null) {
            throw new TypeError("testSubResultId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId,
              attachmentId
            };
            let queryValues = {
              testSubResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestSubResultAttachments(project, runId, testCaseResultId, testSubResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testSubResultId == null) {
            throw new TypeError("testSubResultId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            let queryValues = {
              testSubResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestSubResultAttachmentZip(project, runId, testCaseResultId, attachmentId, testSubResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testSubResultId == null) {
            throw new TypeError("testSubResultId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId,
              attachmentId
            };
            let queryValues = {
              testSubResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestRunAttachment(attachmentRequestModel, project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, attachmentRequestModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunAttachmentContent(project, runId, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              attachmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunAttachments(project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunAttachmentZip(project, runId, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              attachmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBugsLinkedToTestResult(project, runId, testCaseResultId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "6de20ca2-67de-4faf-97fa-38c5d585eb00", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildCodeCoverage(project, buildId, flags) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          if (flags == null) {
            throw new TypeError("flags can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              flags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.BuildCoverage, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCodeCoverageSummary(project, buildId, deltaBuildId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              deltaBuildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CodeCoverageSummary, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateCodeCoverageSummary(coverageData, project, buildId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, coverageData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunCodeCoverage(project, runId, flags) {
        return __awaiter(this, void 0, void 0, function* () {
          if (flags == null) {
            throw new TypeError("flags can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            let queryValues = {
              flags
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "9629116f-3b89-4ed8-b358-d4694efda160", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addCustomFields(newFields, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, newFields, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CustomTestFieldDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryCustomFields(project, scopeFilter) {
        return __awaiter(this, void 0, void 0, function* () {
          if (scopeFilter == null) {
            throw new TypeError("scopeFilter can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              scopeFilter
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CustomTestFieldDefinition, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultHistory(filter, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "234616f5-429c-4e7b-9192-affd76731dfd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, filter, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultHistory, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestIteration(project, runId, testCaseResultId, iterationId, includeActionResults) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId,
              iterationId
            };
            let queryValues = {
              includeActionResults
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestIterationDetailsModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestIterations(project, runId, testCaseResultId, includeActionResults) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            let queryValues = {
              includeActionResults
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestIterationDetailsModel, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLinkedWorkItemsByQuery(workItemQuery, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "a4dcb25b-9878-49ea-abfd-e440bd9b1dcd", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemQuery, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunLogs(project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "a1e55200-637e-42e9-a7c0-7e5bfdedb1b3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestMessageLogDetails, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPoint(project, planId, suiteId, pointIds, witFields) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              planId,
              suiteId,
              pointIds
            };
            let queryValues = {
              witFields
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPoints(project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              planId,
              suiteId
            };
            let queryValues = {
              witFields,
              configurationId,
              testCaseId,
              testPointIds,
              includePointDetails,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTestPoints(pointUpdateModel, project, planId, suiteId, pointIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              planId,
              suiteId,
              pointIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, pointUpdateModel, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPointsByQuery(query, project, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "b4264fd0-a5d1-43e2-82a5-b9c46b7da9ce", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPointsQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultDetailsForBuild(project, buildId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              publishContext,
              groupBy,
              "$filter": filter,
              "$orderby": orderby,
              shouldIncludeResults,
              queryRunSummaryForInProgress
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "efb387b0-10d5-42e7-be40-95e06ee9430f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsDetails, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultDetailsForRelease(project, releaseId, releaseEnvId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {
        return __awaiter(this, void 0, void 0, function* () {
          if (releaseId == null) {
            throw new TypeError("releaseId can not be null or undefined");
          }
          if (releaseEnvId == null) {
            throw new TypeError("releaseEnvId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              releaseId,
              releaseEnvId,
              publishContext,
              groupBy,
              "$filter": filter,
              "$orderby": orderby,
              shouldIncludeResults,
              queryRunSummaryForInProgress
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "b834ec7e-35bb-450f-a3c8-802e70ca40dd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsDetails, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      publishTestResultDocument(document, project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "370ca04b-8eec-4ca8-8ba3-d24dca228791", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, document, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResultGroupsByBuild(project, buildId, publishContext, fields, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          if (publishContext == null) {
            throw new TypeError("publishContext can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              publishContext,
              fields: fields && fields.join(","),
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "d279d052-c55a-4204-b913-42f733b52958", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResultGroupsByRelease(project, releaseId, publishContext, releaseEnvId, fields, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (releaseId == null) {
            throw new TypeError("releaseId can not be null or undefined");
          }
          if (publishContext == null) {
            throw new TypeError("publishContext can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              releaseId,
              publishContext,
              releaseEnvId,
              fields: fields && fields.join(","),
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "ef5ce5d4-a4e5-47ee-804c-354518f8d03f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultsMetaData(testReferenceIds, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "afa7830e-67a7-4336-8090-2b448ca80295", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, testReferenceIds, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getResultRetentionSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.ResultRetentionSettings, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateResultRetentionSettings(retentionSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, retentionSettings, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.ResultRetentionSettings, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addTestResultsToTestRun(results, project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.6", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, results, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultById(project, runId, testCaseResultId, detailsToInclude) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId,
              testCaseResultId
            };
            let queryValues = {
              detailsToInclude
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.6", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResults(project, runId, detailsToInclude, skip, top, outcomes) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            let queryValues = {
              detailsToInclude,
              "$skip": skip,
              "$top": top,
              outcomes: outcomes && outcomes.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.6", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTestResults(results, project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.6", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, results, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultsByQuery(query, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.6", "Test", "6711da49-8e6f-4d35-9f73-cef7a3c81a5b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, query, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultsByBuild(project, buildId, publishContext, outcomes, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              publishContext,
              outcomes: outcomes && outcomes.join(","),
              "$top": top,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "3c191b88-615b-4be2-b7d9-5ff9141e91d4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestResultsByRelease(project, releaseId, releaseEnvid, publishContext, outcomes, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (releaseId == null) {
            throw new TypeError("releaseId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              releaseId,
              releaseEnvid,
              publishContext,
              outcomes: outcomes && outcomes.join(","),
              "$top": top,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "ce01820b-83f3-4c15-a583-697a43292c4e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultsReportForBuild(project, buildId, publishContext, includeFailureDetails, buildToCompare) {
        return __awaiter(this, void 0, void 0, function* () {
          if (buildId == null) {
            throw new TypeError("buildId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildId,
              publishContext,
              includeFailureDetails,
              buildToCompare
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "000ef77b-fea2-498d-a10d-ad1a037f559f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultsReportForRelease(project, releaseId, releaseEnvId, publishContext, includeFailureDetails, releaseToCompare) {
        return __awaiter(this, void 0, void 0, function* () {
          if (releaseId == null) {
            throw new TypeError("releaseId can not be null or undefined");
          }
          if (releaseEnvId == null) {
            throw new TypeError("releaseEnvId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              releaseId,
              releaseEnvId,
              publishContext,
              includeFailureDetails,
              releaseToCompare
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "85765790-ac68-494e-b268-af36c3929744", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultsSummaryForReleases(releases, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "85765790-ac68-494e-b268-af36c3929744", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, releases, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestSummaryByRequirement(resultsContext, project, workItemIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              workItemIds: workItemIds && workItemIds.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "cd08294e-308d-4460-a46e-4cfdefba0b4b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, resultsContext, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSummaryForWorkItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryResultTrendForBuild(filter, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "fbc82a85-0786-4442-88bb-eb0fda6b01b0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, filter, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.AggregatedDataForResultTrend, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryResultTrendForRelease(filter, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "dd178e93-d8dd-4887-9635-d6b9560b7b6e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, filter, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.AggregatedDataForResultTrend, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunStatistics(project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "0a42c424-d764-4a16-a2d5-5c85f87d0ae8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRunStatistic, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestRun(testRun, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, testRun, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTestRun(project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRunById(project, runId, includeDetails) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            let queryValues = {
              includeDetails
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestRuns(project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              buildUri,
              owner,
              tmiRunId,
              planId,
              includeRunDetails,
              automated,
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestRuns(project, minLastUpdatedDate, maxLastUpdatedDate, state, planIds, isAutomated, publishContext, buildIds, buildDefIds, branchName, releaseIds, releaseDefIds, releaseEnvIds, releaseEnvDefIds, runTitle, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
          if (minLastUpdatedDate == null) {
            throw new TypeError("minLastUpdatedDate can not be null or undefined");
          }
          if (maxLastUpdatedDate == null) {
            throw new TypeError("maxLastUpdatedDate can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              minLastUpdatedDate,
              maxLastUpdatedDate,
              state,
              planIds: planIds && planIds.join(","),
              isAutomated,
              publishContext,
              buildIds: buildIds && buildIds.join(","),
              buildDefIds: buildDefIds && buildDefIds.join(","),
              branchName,
              releaseIds: releaseIds && releaseIds.join(","),
              releaseDefIds: releaseDefIds && releaseDefIds.join(","),
              releaseEnvIds: releaseEnvIds && releaseEnvIds.join(","),
              releaseEnvDefIds: releaseEnvDefIds && releaseEnvDefIds.join(","),
              runTitle,
              "$top": top,
              continuationToken
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTestRun(runUpdateModel, project, runId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              runId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, runUpdateModel, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestSession(testSession, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, testSession, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestSessions(teamContext, period, allSessions, includeAllProperties, source, includeOnlyCompletedSessions) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            let queryValues = {
              period,
              allSessions,
              includeAllProperties,
              source,
              includeOnlyCompletedSessions
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTestSession(testSession, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, testSession, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteSharedParameter(project, sharedParameterId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              sharedParameterId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8300eeca-0f8c-4eff-a089-d2dda409c41f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteSharedStep(project, sharedStepId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              sharedStepId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "fabb3cc9-e3f8-40b7-8b62-24cc4b73fccf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addTestCasesToSuite(project, planId, suiteId, testCaseIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              action: "TestCases",
              project,
              planId,
              suiteId,
              testCaseIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestCaseById(project, planId, suiteId, testCaseIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              action: "TestCases",
              project,
              planId,
              suiteId,
              testCaseIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestCases(project, planId, suiteId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              action: "TestCases",
              project,
              planId,
              suiteId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeTestCasesFromSuiteUrl(project, planId, suiteId, testCaseIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              action: "TestCases",
              project,
              planId,
              suiteId,
              testCaseIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSuiteTestCases(suiteTestCaseUpdateModel, project, planId, suiteId, testCaseIds) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              action: "TestCases",
              project,
              planId,
              suiteId,
              testCaseIds
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, suiteTestCaseUpdateModel, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTestCase(project, testCaseId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              testCaseId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "4d472e0f-e32c-4ef8-adf4-a4078772889c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestHistory(filter, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "Test", "929fd86c-3e38-4d8c-b4b6-90df256e5971", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, filter, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestHistoryQuery, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTestSettings(testSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, testSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTestSettings(project, testSettingsId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              testSettingsId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTestSettingsById(project, testSettingsId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              testSettingsId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addWorkItemToTestLinks(workItemToTestLinks, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "371b1655-ce05-412e-a113-64cc77bb78d2", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemToTestLinks, options);
              let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.WorkItemToTestLinks, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTestMethodToWorkItemLink(project, testName, workItemId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testName == null) {
            throw new TypeError("testName can not be null or undefined");
          }
          if (workItemId == null) {
            throw new TypeError("workItemId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              testName,
              workItemId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "7b0bdee3-a354-47f9-a42c-89018d7808d5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestMethodLinkedWorkItems(project, testName) {
        return __awaiter(this, void 0, void 0, function* () {
          if (testName == null) {
            throw new TypeError("testName can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              testName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "7b0bdee3-a354-47f9-a42c-89018d7808d5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryTestResultWorkItems(project, workItemCategory, automatedTestName, testCaseId, maxCompleteDate, days, workItemCount) {
        return __awaiter(this, void 0, void 0, function* () {
          if (workItemCategory == null) {
            throw new TypeError("workItemCategory can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              workItemCategory,
              automatedTestName,
              testCaseId,
              maxCompleteDate,
              days,
              "$workItemCount": workItemCount
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "Test", "926ff5dc-137f-45f0-bd51-9412fa9810ce", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    TestApi.RESOURCE_AREA_ID = "c2aa639c-3ccc-4740-b3b6-ce2a1e1d984e";
    exports.TestApi = TestApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/TfvcInterfaces.js
var require_TfvcInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/TfvcInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TfsCoreInterfaces = require_CoreInterfaces();
    var ItemContentType;
    (function(ItemContentType2) {
      ItemContentType2[ItemContentType2["RawText"] = 0] = "RawText";
      ItemContentType2[ItemContentType2["Base64Encoded"] = 1] = "Base64Encoded";
    })(ItemContentType = exports.ItemContentType || (exports.ItemContentType = {}));
    var TfvcVersionOption;
    (function(TfvcVersionOption2) {
      TfvcVersionOption2[TfvcVersionOption2["None"] = 0] = "None";
      TfvcVersionOption2[TfvcVersionOption2["Previous"] = 1] = "Previous";
      TfvcVersionOption2[TfvcVersionOption2["UseRename"] = 2] = "UseRename";
    })(TfvcVersionOption = exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));
    var TfvcVersionType;
    (function(TfvcVersionType2) {
      TfvcVersionType2[TfvcVersionType2["None"] = 0] = "None";
      TfvcVersionType2[TfvcVersionType2["Changeset"] = 1] = "Changeset";
      TfvcVersionType2[TfvcVersionType2["Shelveset"] = 2] = "Shelveset";
      TfvcVersionType2[TfvcVersionType2["Change"] = 3] = "Change";
      TfvcVersionType2[TfvcVersionType2["Date"] = 4] = "Date";
      TfvcVersionType2[TfvcVersionType2["Latest"] = 5] = "Latest";
      TfvcVersionType2[TfvcVersionType2["Tip"] = 6] = "Tip";
      TfvcVersionType2[TfvcVersionType2["MergeSource"] = 7] = "MergeSource";
    })(TfvcVersionType = exports.TfvcVersionType || (exports.TfvcVersionType = {}));
    var VersionControlChangeType;
    (function(VersionControlChangeType2) {
      VersionControlChangeType2[VersionControlChangeType2["None"] = 0] = "None";
      VersionControlChangeType2[VersionControlChangeType2["Add"] = 1] = "Add";
      VersionControlChangeType2[VersionControlChangeType2["Edit"] = 2] = "Edit";
      VersionControlChangeType2[VersionControlChangeType2["Encoding"] = 4] = "Encoding";
      VersionControlChangeType2[VersionControlChangeType2["Rename"] = 8] = "Rename";
      VersionControlChangeType2[VersionControlChangeType2["Delete"] = 16] = "Delete";
      VersionControlChangeType2[VersionControlChangeType2["Undelete"] = 32] = "Undelete";
      VersionControlChangeType2[VersionControlChangeType2["Branch"] = 64] = "Branch";
      VersionControlChangeType2[VersionControlChangeType2["Merge"] = 128] = "Merge";
      VersionControlChangeType2[VersionControlChangeType2["Lock"] = 256] = "Lock";
      VersionControlChangeType2[VersionControlChangeType2["Rollback"] = 512] = "Rollback";
      VersionControlChangeType2[VersionControlChangeType2["SourceRename"] = 1024] = "SourceRename";
      VersionControlChangeType2[VersionControlChangeType2["TargetRename"] = 2048] = "TargetRename";
      VersionControlChangeType2[VersionControlChangeType2["Property"] = 4096] = "Property";
      VersionControlChangeType2[VersionControlChangeType2["All"] = 8191] = "All";
    })(VersionControlChangeType = exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));
    var VersionControlRecursionType;
    (function(VersionControlRecursionType2) {
      VersionControlRecursionType2[VersionControlRecursionType2["None"] = 0] = "None";
      VersionControlRecursionType2[VersionControlRecursionType2["OneLevel"] = 1] = "OneLevel";
      VersionControlRecursionType2[VersionControlRecursionType2["OneLevelPlusNestedEmptyFolders"] = 4] = "OneLevelPlusNestedEmptyFolders";
      VersionControlRecursionType2[VersionControlRecursionType2["Full"] = 120] = "Full";
    })(VersionControlRecursionType = exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));
    exports.TypeInfo = {
      Change: {},
      GitRepository: {},
      GitRepositoryRef: {},
      ItemContent: {},
      ItemContentType: {
        enumValues: {
          "rawText": 0,
          "base64Encoded": 1
        }
      },
      TfvcBranch: {},
      TfvcBranchRef: {},
      TfvcChange: {},
      TfvcChangeset: {},
      TfvcChangesetRef: {},
      TfvcItem: {},
      TfvcItemDescriptor: {},
      TfvcItemRequestData: {},
      TfvcLabel: {},
      TfvcLabelRef: {},
      TfvcShelveset: {},
      TfvcShelvesetRef: {},
      TfvcVersionDescriptor: {},
      TfvcVersionOption: {
        enumValues: {
          "none": 0,
          "previous": 1,
          "useRename": 2
        }
      },
      TfvcVersionType: {
        enumValues: {
          "none": 0,
          "changeset": 1,
          "shelveset": 2,
          "change": 3,
          "date": 4,
          "latest": 5,
          "tip": 6,
          "mergeSource": 7
        }
      },
      VersionControlChangeType: {
        enumValues: {
          "none": 0,
          "add": 1,
          "edit": 2,
          "encoding": 4,
          "rename": 8,
          "delete": 16,
          "undelete": 32,
          "branch": 64,
          "merge": 128,
          "lock": 256,
          "rollback": 512,
          "sourceRename": 1024,
          "targetRename": 2048,
          "property": 4096,
          "all": 8191
        }
      },
      VersionControlProjectInfo: {},
      VersionControlRecursionType: {
        enumValues: {
          "none": 0,
          "oneLevel": 1,
          "oneLevelPlusNestedEmptyFolders": 4,
          "full": 120
        }
      }
    };
    exports.TypeInfo.Change.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.GitRepository.fields = {
      parentRepository: {
        typeInfo: exports.TypeInfo.GitRepositoryRef
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.GitRepositoryRef.fields = {
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
    exports.TypeInfo.ItemContent.fields = {
      contentType: {
        enumType: exports.TypeInfo.ItemContentType
      }
    };
    exports.TypeInfo.TfvcBranch.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranch
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcBranchRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcChange.fields = {
      changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
      },
      newContent: {
        typeInfo: exports.TypeInfo.ItemContent
      }
    };
    exports.TypeInfo.TfvcChangeset.fields = {
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcChangesetRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcItem.fields = {
      changeDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcItemDescriptor.fields = {
      recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
      },
      versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
      },
      versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
      }
    };
    exports.TypeInfo.TfvcItemRequestData.fields = {
      itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItemDescriptor
      }
    };
    exports.TypeInfo.TfvcLabel.fields = {
      items: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItem
      },
      modifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcLabelRef.fields = {
      modifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcShelveset.fields = {
      changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
      },
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcShelvesetRef.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.TfvcVersionDescriptor.fields = {
      versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
      },
      versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
      }
    };
    exports.TypeInfo.VersionControlProjectInfo.fields = {
      defaultSourceControlType: {
        enumType: TfsCoreInterfaces.TypeInfo.SourceControlTypes
      },
      project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
      }
    };
  }
});

// node_modules/azure-devops-node-api/TfvcApi.js
var require_TfvcApi = __commonJS({
  "node_modules/azure-devops-node-api/TfvcApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var TfvcInterfaces = require_TfvcInterfaces();
    var TfvcApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Tfvc-api", options);
      }
      getBranch(path, project, includeParent, includeChildren) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path,
              includeParent,
              includeChildren
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranch, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBranches(project, includeParent, includeChildren, includeDeleted, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              includeParent,
              includeChildren,
              includeDeleted,
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranch, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBranchRefs(scopePath, project, includeDeleted, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
          if (scopePath == null) {
            throw new TypeError("scopePath can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              scopePath,
              includeDeleted,
              includeLinks
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranchRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChangesetChanges(id, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            let queryValues = {
              "$skip": skip,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "f32b86f2-15b9-4fe6-81b1-6f8938617ee5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChange, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createChangeset(changeset, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, changeset, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChangeset(id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              maxChangeCount,
              includeDetails,
              includeWorkItems,
              maxCommentLength,
              includeSourceRename,
              "$skip": skip,
              "$top": top,
              "$orderby": orderby,
              searchCriteria
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangeset, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChangesets(project, maxCommentLength, skip, top, orderby, searchCriteria) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              maxCommentLength,
              "$skip": skip,
              "$top": top,
              "$orderby": orderby,
              searchCriteria
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBatchedChangesets(changesetsRequestData) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "b7e7c173-803c-4fea-9ec8-31ee35c5502a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, changesetsRequestData, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getChangesetWorkItems(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "64ae0bea-1d71-47c9-a9e5-fe73f5ea0ff4", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemsBatch(itemRequestData, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, itemRequestData, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemsBatchZip(itemRequestData, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItem(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path,
              fileName,
              download,
              scopePath,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemContent(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path,
              fileName,
              download,
              scopePath,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItems(project, scopePath, recursionLevel, includeLinks, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              scopePath,
              recursionLevel,
              includeLinks,
              versionDescriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemText(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path,
              fileName,
              download,
              scopePath,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getItemZip(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              path,
              fileName,
              download,
              scopePath,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLabelItems(labelId, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              labelId
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "06166e34-de17-4b60-8cd1-23182a346fda", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLabel(labelId, requestData, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (requestData == null) {
            throw new TypeError("requestData can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              labelId
            };
            let queryValues = {
              requestData
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcLabel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getLabels(requestData, project, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          if (requestData == null) {
            throw new TypeError("requestData can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              requestData,
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcLabelRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getShelvesetChanges(shelvesetId, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          if (shelvesetId == null) {
            throw new TypeError("shelvesetId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              shelvesetId,
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "dbaf075b-0445-4c34-9e5b-82292f856522", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChange, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getShelveset(shelvesetId, requestData) {
        return __awaiter(this, void 0, void 0, function* () {
          if (shelvesetId == null) {
            throw new TypeError("shelvesetId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              shelvesetId,
              requestData
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcShelveset, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getShelvesets(requestData, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              requestData,
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcShelvesetRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getShelvesetWorkItems(shelvesetId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (shelvesetId == null) {
            throw new TypeError("shelvesetId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              shelvesetId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "a7a0c1c1-373e-425a-b031-a519474d743d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTfvcStatistics(project, scopePath) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              scopePath
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "tfvc", "e15c74c0-3605-40e0-aed4-4cc61e549ed8", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    TfvcApi.RESOURCE_AREA_ID = "8aa40520-446d-40e6-89f6-9c9f9ce44c48";
    exports.TfvcApi = TfvcApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/CommentsInterfaces.js
var require_CommentsInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/CommentsInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CommentExpandOptions;
    (function(CommentExpandOptions2) {
      CommentExpandOptions2[CommentExpandOptions2["None"] = 0] = "None";
      CommentExpandOptions2[CommentExpandOptions2["Reactions"] = 1] = "Reactions";
      CommentExpandOptions2[CommentExpandOptions2["RenderedText"] = 8] = "RenderedText";
      CommentExpandOptions2[CommentExpandOptions2["RenderedTextOnly"] = 16] = "RenderedTextOnly";
      CommentExpandOptions2[CommentExpandOptions2["Children"] = 32] = "Children";
      CommentExpandOptions2[CommentExpandOptions2["All"] = -17] = "All";
    })(CommentExpandOptions = exports.CommentExpandOptions || (exports.CommentExpandOptions = {}));
    var CommentFormat;
    (function(CommentFormat2) {
      CommentFormat2[CommentFormat2["Markdown"] = 0] = "Markdown";
      CommentFormat2[CommentFormat2["Html"] = 1] = "Html";
    })(CommentFormat = exports.CommentFormat || (exports.CommentFormat = {}));
    var CommentMentionType;
    (function(CommentMentionType2) {
      CommentMentionType2[CommentMentionType2["Person"] = 0] = "Person";
      CommentMentionType2[CommentMentionType2["WorkItem"] = 1] = "WorkItem";
      CommentMentionType2[CommentMentionType2["PullRequest"] = 2] = "PullRequest";
    })(CommentMentionType = exports.CommentMentionType || (exports.CommentMentionType = {}));
    var CommentReactionType;
    (function(CommentReactionType2) {
      CommentReactionType2[CommentReactionType2["Like"] = 0] = "Like";
      CommentReactionType2[CommentReactionType2["Dislike"] = 1] = "Dislike";
      CommentReactionType2[CommentReactionType2["Heart"] = 2] = "Heart";
      CommentReactionType2[CommentReactionType2["Hooray"] = 3] = "Hooray";
      CommentReactionType2[CommentReactionType2["Smile"] = 4] = "Smile";
      CommentReactionType2[CommentReactionType2["Confused"] = 5] = "Confused";
    })(CommentReactionType = exports.CommentReactionType || (exports.CommentReactionType = {}));
    var CommentSortOrder;
    (function(CommentSortOrder2) {
      CommentSortOrder2[CommentSortOrder2["Asc"] = 1] = "Asc";
      CommentSortOrder2[CommentSortOrder2["Desc"] = 2] = "Desc";
    })(CommentSortOrder = exports.CommentSortOrder || (exports.CommentSortOrder = {}));
    var CommentState;
    (function(CommentState2) {
      CommentState2[CommentState2["Active"] = 0] = "Active";
      CommentState2[CommentState2["Resolved"] = 1] = "Resolved";
      CommentState2[CommentState2["Closed"] = 2] = "Closed";
    })(CommentState = exports.CommentState || (exports.CommentState = {}));
    exports.TypeInfo = {
      Comment: {},
      CommentAttachment: {},
      CommentExpandOptions: {
        enumValues: {
          "none": 0,
          "reactions": 1,
          "renderedText": 8,
          "renderedTextOnly": 16,
          "children": 32,
          "all": -17
        }
      },
      CommentFormat: {
        enumValues: {
          "markdown": 0,
          "html": 1
        }
      },
      CommentList: {},
      CommentMention: {},
      CommentMentionType: {
        enumValues: {
          "person": 0,
          "workItem": 1,
          "pullRequest": 2
        }
      },
      CommentReaction: {},
      CommentReactionType: {
        enumValues: {
          "like": 0,
          "dislike": 1,
          "heart": 2,
          "hooray": 3,
          "smile": 4,
          "confused": 5
        }
      },
      CommentSortOrder: {
        enumValues: {
          "asc": 1,
          "desc": 2
        }
      },
      CommentState: {
        enumValues: {
          "active": 0,
          "resolved": 1,
          "closed": 2
        }
      },
      CommentUpdateParameters: {},
      CommentVersion: {}
    };
    exports.TypeInfo.Comment.fields = {
      createdDate: {
        isDate: true
      },
      mentions: {
        isArray: true,
        typeInfo: exports.TypeInfo.CommentMention
      },
      modifiedDate: {
        isDate: true
      },
      reactions: {
        isArray: true,
        typeInfo: exports.TypeInfo.CommentReaction
      },
      replies: {
        typeInfo: exports.TypeInfo.CommentList
      },
      state: {
        enumType: exports.TypeInfo.CommentState
      }
    };
    exports.TypeInfo.CommentAttachment.fields = {
      createdDate: {
        isDate: true
      }
    };
    exports.TypeInfo.CommentList.fields = {
      comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.Comment
      }
    };
    exports.TypeInfo.CommentMention.fields = {
      type: {
        enumType: exports.TypeInfo.CommentMentionType
      }
    };
    exports.TypeInfo.CommentReaction.fields = {
      type: {
        enumType: exports.TypeInfo.CommentReactionType
      }
    };
    exports.TypeInfo.CommentUpdateParameters.fields = {
      state: {
        enumType: exports.TypeInfo.CommentState
      }
    };
    exports.TypeInfo.CommentVersion.fields = {
      createdDate: {
        isDate: true
      },
      modifiedDate: {
        isDate: true
      },
      state: {
        enumType: exports.TypeInfo.CommentState
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/WikiInterfaces.js
var require_WikiInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/WikiInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GitInterfaces = require_GitInterfaces();
    var WikiType;
    (function(WikiType2) {
      WikiType2[WikiType2["ProjectWiki"] = 0] = "ProjectWiki";
      WikiType2[WikiType2["CodeWiki"] = 1] = "CodeWiki";
    })(WikiType = exports.WikiType || (exports.WikiType = {}));
    exports.TypeInfo = {
      Wiki: {},
      WikiCreateBaseParameters: {},
      WikiCreateParametersV2: {},
      WikiPageDetail: {},
      WikiPageStat: {},
      WikiPageViewStats: {},
      WikiType: {
        enumValues: {
          "projectWiki": 0,
          "codeWiki": 1
        }
      },
      WikiUpdateParameters: {},
      WikiV2: {}
    };
    exports.TypeInfo.Wiki.fields = {
      repository: {
        typeInfo: GitInterfaces.TypeInfo.GitRepository
      }
    };
    exports.TypeInfo.WikiCreateBaseParameters.fields = {
      type: {
        enumType: exports.TypeInfo.WikiType
      }
    };
    exports.TypeInfo.WikiCreateParametersV2.fields = {
      type: {
        enumType: exports.TypeInfo.WikiType
      },
      version: {
        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor
      }
    };
    exports.TypeInfo.WikiPageDetail.fields = {
      viewStats: {
        isArray: true,
        typeInfo: exports.TypeInfo.WikiPageStat
      }
    };
    exports.TypeInfo.WikiPageStat.fields = {
      day: {
        isDate: true
      }
    };
    exports.TypeInfo.WikiPageViewStats.fields = {
      lastViewedTime: {
        isDate: true
      }
    };
    exports.TypeInfo.WikiUpdateParameters.fields = {
      versions: {
        isArray: true,
        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor
      }
    };
    exports.TypeInfo.WikiV2.fields = {
      type: {
        enumType: exports.TypeInfo.WikiType
      },
      versions: {
        isArray: true,
        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor
      }
    };
  }
});

// node_modules/azure-devops-node-api/WikiApi.js
var require_WikiApi = __commonJS({
  "node_modules/azure-devops-node-api/WikiApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var Comments_Contracts = require_CommentsInterfaces();
    var WikiInterfaces = require_WikiInterfaces();
    var WikiApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Wiki-api", options);
      }
      createCommentAttachment(customHeaders, contentStream, project, wikiIdentifier, pageId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "5100d976-363d-42e7-a19d-4171ecb44782", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentAttachment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentContent(project, wikiIdentifier, pageId, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              attachmentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "5100d976-363d-42e7-a19d-4171ecb44782", routeValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addCommentReaction(project, wikiIdentifier, pageId, commentId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              commentId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "7a5bc693-aab7-4d48-8f34-36f373022063", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentReaction, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteCommentReaction(project, wikiIdentifier, pageId, commentId, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              commentId,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "7a5bc693-aab7-4d48-8f34-36f373022063", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentReaction, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEngagedUsers(project, wikiIdentifier, pageId, commentId, type, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              commentId,
              type
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "598a5268-41a7-4162-b7dc-344131e4d1fa", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addComment(request, project, wikiIdentifier, pageId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "9b394e93-7db5-46cb-9c26-09a36aa5c895", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, request, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteComment(project, wikiIdentifier, pageId, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "9b394e93-7db5-46cb-9c26-09a36aa5c895", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getComment(project, wikiIdentifier, pageId, id, excludeDeleted, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              id
            };
            let queryValues = {
              excludeDeleted,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "9b394e93-7db5-46cb-9c26-09a36aa5c895", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      listComments(project, wikiIdentifier, pageId, top, continuationToken, excludeDeleted, expand, order, parentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId
            };
            let queryValues = {
              "$top": top,
              continuationToken,
              excludeDeleted,
              "$expand": expand,
              order,
              parentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "9b394e93-7db5-46cb-9c26-09a36aa5c895", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentList, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateComment(comment, project, wikiIdentifier, pageId, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "9b394e93-7db5-46cb-9c26-09a36aa5c895", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, comment, options);
              let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPageText(project, wikiIdentifier, path, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            let queryValues = {
              path,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "25d3fbc7-fe3d-46cb-b5a5-0b6f79caf27b", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPageZip(project, wikiIdentifier, path, recursionLevel, versionDescriptor, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            let queryValues = {
              path,
              recursionLevel,
              versionDescriptor,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "25d3fbc7-fe3d-46cb-b5a5-0b6f79caf27b", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPageByIdText(project, wikiIdentifier, id, recursionLevel, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              id
            };
            let queryValues = {
              recursionLevel,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "ceddcf75-1068-452d-8b13-2d4d76e1f970", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("text/plain", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPageByIdZip(project, wikiIdentifier, id, recursionLevel, includeContent) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              id
            };
            let queryValues = {
              recursionLevel,
              includeContent
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "ceddcf75-1068-452d-8b13-2d4d76e1f970", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPagesBatch(pagesBatchRequest, project, wikiIdentifier, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            let queryValues = {
              versionDescriptor
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "71323c46-2592-4398-8771-ced73dd87207", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, pagesBatchRequest, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageDetail, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPageData(project, wikiIdentifier, pageId, pageViewsForDays) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier,
              pageId
            };
            let queryValues = {
              pageViewsForDays
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "81c4e0fe-7663-4d62-ad46-6ab78459f274", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageDetail, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createOrUpdatePageViewStats(project, wikiIdentifier, wikiVersion, path, oldPath) {
        return __awaiter(this, void 0, void 0, function* () {
          if (wikiVersion == null) {
            throw new TypeError("wikiVersion can not be null or undefined");
          }
          if (path == null) {
            throw new TypeError("path can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            let queryValues = {
              wikiVersion,
              path,
              oldPath
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wiki", "1087b746-5d15-41b9-bea6-14e325e7f880", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, null, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageViewStats, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createWiki(wikiCreateParams, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wiki", "288d122c-dbd4-451d-aa5f-7dbbba070728", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, wikiCreateParams, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteWiki(wikiIdentifier, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wiki", "288d122c-dbd4-451d-aa5f-7dbbba070728", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAllWikis(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wiki", "288d122c-dbd4-451d-aa5f-7dbbba070728", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWiki(wikiIdentifier, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wiki", "288d122c-dbd4-451d-aa5f-7dbbba070728", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWiki(updateParameters, wikiIdentifier, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              wikiIdentifier
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wiki", "288d122c-dbd4-451d-aa5f-7dbbba070728", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateParameters, options);
              let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    WikiApi.RESOURCE_AREA_ID = "bf7d82a0-8aa5-4613-94ef-6172a5ea01f3";
    exports.WikiApi = WikiApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/common/System.js
var require_System = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/common/System.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DayOfWeek;
    (function(DayOfWeek2) {
      DayOfWeek2[DayOfWeek2["Sunday"] = 0] = "Sunday";
      DayOfWeek2[DayOfWeek2["Monday"] = 1] = "Monday";
      DayOfWeek2[DayOfWeek2["Tuesday"] = 2] = "Tuesday";
      DayOfWeek2[DayOfWeek2["Wednesday"] = 3] = "Wednesday";
      DayOfWeek2[DayOfWeek2["Thursday"] = 4] = "Thursday";
      DayOfWeek2[DayOfWeek2["Friday"] = 5] = "Friday";
      DayOfWeek2[DayOfWeek2["Saturday"] = 6] = "Saturday";
    })(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));
    exports.TypeInfo = {
      DayOfWeek: {
        enumValues: {
          "sunday": 0,
          "monday": 1,
          "tuesday": 2,
          "wednesday": 3,
          "thursday": 4,
          "friday": 5,
          "saturday": 6
        }
      }
    };
  }
});

// node_modules/azure-devops-node-api/interfaces/WorkInterfaces.js
var require_WorkInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/WorkInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SystemInterfaces = require_System();
    var BacklogType;
    (function(BacklogType2) {
      BacklogType2[BacklogType2["Portfolio"] = 0] = "Portfolio";
      BacklogType2[BacklogType2["Requirement"] = 1] = "Requirement";
      BacklogType2[BacklogType2["Task"] = 2] = "Task";
    })(BacklogType = exports.BacklogType || (exports.BacklogType = {}));
    var BoardBadgeColumnOptions;
    (function(BoardBadgeColumnOptions2) {
      BoardBadgeColumnOptions2[BoardBadgeColumnOptions2["InProgressColumns"] = 0] = "InProgressColumns";
      BoardBadgeColumnOptions2[BoardBadgeColumnOptions2["AllColumns"] = 1] = "AllColumns";
      BoardBadgeColumnOptions2[BoardBadgeColumnOptions2["CustomColumns"] = 2] = "CustomColumns";
    })(BoardBadgeColumnOptions = exports.BoardBadgeColumnOptions || (exports.BoardBadgeColumnOptions = {}));
    var BoardColumnType;
    (function(BoardColumnType2) {
      BoardColumnType2[BoardColumnType2["Incoming"] = 0] = "Incoming";
      BoardColumnType2[BoardColumnType2["InProgress"] = 1] = "InProgress";
      BoardColumnType2[BoardColumnType2["Outgoing"] = 2] = "Outgoing";
    })(BoardColumnType = exports.BoardColumnType || (exports.BoardColumnType = {}));
    var BugsBehavior;
    (function(BugsBehavior2) {
      BugsBehavior2[BugsBehavior2["Off"] = 0] = "Off";
      BugsBehavior2[BugsBehavior2["AsRequirements"] = 1] = "AsRequirements";
      BugsBehavior2[BugsBehavior2["AsTasks"] = 2] = "AsTasks";
    })(BugsBehavior = exports.BugsBehavior || (exports.BugsBehavior = {}));
    var FieldType;
    (function(FieldType2) {
      FieldType2[FieldType2["String"] = 0] = "String";
      FieldType2[FieldType2["PlainText"] = 1] = "PlainText";
      FieldType2[FieldType2["Integer"] = 2] = "Integer";
      FieldType2[FieldType2["DateTime"] = 3] = "DateTime";
      FieldType2[FieldType2["TreePath"] = 4] = "TreePath";
      FieldType2[FieldType2["Boolean"] = 5] = "Boolean";
      FieldType2[FieldType2["Double"] = 6] = "Double";
    })(FieldType = exports.FieldType || (exports.FieldType = {}));
    var IdentityDisplayFormat;
    (function(IdentityDisplayFormat2) {
      IdentityDisplayFormat2[IdentityDisplayFormat2["AvatarOnly"] = 0] = "AvatarOnly";
      IdentityDisplayFormat2[IdentityDisplayFormat2["FullName"] = 1] = "FullName";
      IdentityDisplayFormat2[IdentityDisplayFormat2["AvatarAndFullName"] = 2] = "AvatarAndFullName";
    })(IdentityDisplayFormat = exports.IdentityDisplayFormat || (exports.IdentityDisplayFormat = {}));
    var PlanType;
    (function(PlanType2) {
      PlanType2[PlanType2["DeliveryTimelineView"] = 0] = "DeliveryTimelineView";
    })(PlanType = exports.PlanType || (exports.PlanType = {}));
    var PlanUserPermissions;
    (function(PlanUserPermissions2) {
      PlanUserPermissions2[PlanUserPermissions2["None"] = 0] = "None";
      PlanUserPermissions2[PlanUserPermissions2["View"] = 1] = "View";
      PlanUserPermissions2[PlanUserPermissions2["Edit"] = 2] = "Edit";
      PlanUserPermissions2[PlanUserPermissions2["Delete"] = 4] = "Delete";
      PlanUserPermissions2[PlanUserPermissions2["Manage"] = 8] = "Manage";
      PlanUserPermissions2[PlanUserPermissions2["AllPermissions"] = 15] = "AllPermissions";
    })(PlanUserPermissions = exports.PlanUserPermissions || (exports.PlanUserPermissions = {}));
    var TimeFrame;
    (function(TimeFrame2) {
      TimeFrame2[TimeFrame2["Past"] = 0] = "Past";
      TimeFrame2[TimeFrame2["Current"] = 1] = "Current";
      TimeFrame2[TimeFrame2["Future"] = 2] = "Future";
    })(TimeFrame = exports.TimeFrame || (exports.TimeFrame = {}));
    var TimelineCriteriaStatusCode;
    (function(TimelineCriteriaStatusCode2) {
      TimelineCriteriaStatusCode2[TimelineCriteriaStatusCode2["OK"] = 0] = "OK";
      TimelineCriteriaStatusCode2[TimelineCriteriaStatusCode2["InvalidFilterClause"] = 1] = "InvalidFilterClause";
      TimelineCriteriaStatusCode2[TimelineCriteriaStatusCode2["Unknown"] = 2] = "Unknown";
    })(TimelineCriteriaStatusCode = exports.TimelineCriteriaStatusCode || (exports.TimelineCriteriaStatusCode = {}));
    var TimelineIterationStatusCode;
    (function(TimelineIterationStatusCode2) {
      TimelineIterationStatusCode2[TimelineIterationStatusCode2["OK"] = 0] = "OK";
      TimelineIterationStatusCode2[TimelineIterationStatusCode2["IsOverlapping"] = 1] = "IsOverlapping";
    })(TimelineIterationStatusCode = exports.TimelineIterationStatusCode || (exports.TimelineIterationStatusCode = {}));
    var TimelineTeamStatusCode;
    (function(TimelineTeamStatusCode2) {
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["OK"] = 0] = "OK";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["DoesntExistOrAccessDenied"] = 1] = "DoesntExistOrAccessDenied";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["MaxTeamsExceeded"] = 2] = "MaxTeamsExceeded";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["MaxTeamFieldsExceeded"] = 3] = "MaxTeamFieldsExceeded";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["BacklogInError"] = 4] = "BacklogInError";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["MissingTeamFieldValue"] = 5] = "MissingTeamFieldValue";
      TimelineTeamStatusCode2[TimelineTeamStatusCode2["NoIterationsExist"] = 6] = "NoIterationsExist";
    })(TimelineTeamStatusCode = exports.TimelineTeamStatusCode || (exports.TimelineTeamStatusCode = {}));
    exports.TypeInfo = {
      BacklogConfiguration: {},
      BacklogLevelConfiguration: {},
      BacklogType: {
        enumValues: {
          "portfolio": 0,
          "requirement": 1,
          "task": 2
        }
      },
      Board: {},
      BoardBadgeColumnOptions: {
        enumValues: {
          "inProgressColumns": 0,
          "allColumns": 1,
          "customColumns": 2
        }
      },
      BoardColumn: {},
      BoardColumnType: {
        enumValues: {
          "incoming": 0,
          "inProgress": 1,
          "outgoing": 2
        }
      },
      BugsBehavior: {
        enumValues: {
          "off": 0,
          "asRequirements": 1,
          "asTasks": 2
        }
      },
      CapacityContractBase: {},
      CapacityPatch: {},
      CardFieldSettings: {},
      CardSettings: {},
      CreatePlan: {},
      DateRange: {},
      DeliveryViewData: {},
      DeliveryViewPropertyCollection: {},
      FieldInfo: {},
      FieldType: {
        enumValues: {
          "string": 0,
          "plainText": 1,
          "integer": 2,
          "dateTime": 3,
          "treePath": 4,
          "boolean": 5,
          "double": 6
        }
      },
      IdentityDisplayFormat: {
        enumValues: {
          "avatarOnly": 0,
          "fullName": 1,
          "avatarAndFullName": 2
        }
      },
      Marker: {},
      Plan: {},
      PlanMetadata: {},
      PlanType: {
        enumValues: {
          "deliveryTimelineView": 0
        }
      },
      PlanUserPermissions: {
        enumValues: {
          "none": 0,
          "view": 1,
          "edit": 2,
          "delete": 4,
          "manage": 8,
          "allPermissions": 15
        }
      },
      TeamCapacity: {},
      TeamIterationAttributes: {},
      TeamMemberCapacity: {},
      TeamMemberCapacityIdentityRef: {},
      TeamSetting: {},
      TeamSettingsDaysOff: {},
      TeamSettingsDaysOffPatch: {},
      TeamSettingsIteration: {},
      TeamSettingsPatch: {},
      TimeFrame: {
        enumValues: {
          "past": 0,
          "current": 1,
          "future": 2
        }
      },
      TimelineCriteriaStatus: {},
      TimelineCriteriaStatusCode: {
        enumValues: {
          "ok": 0,
          "invalidFilterClause": 1,
          "unknown": 2
        }
      },
      TimelineIterationStatus: {},
      TimelineIterationStatusCode: {
        enumValues: {
          "ok": 0,
          "isOverlapping": 1
        }
      },
      TimelineTeamData: {},
      TimelineTeamIteration: {},
      TimelineTeamStatus: {},
      TimelineTeamStatusCode: {
        enumValues: {
          "ok": 0,
          "doesntExistOrAccessDenied": 1,
          "maxTeamsExceeded": 2,
          "maxTeamFieldsExceeded": 3,
          "backlogInError": 4,
          "missingTeamFieldValue": 5,
          "noIterationsExist": 6
        }
      },
      UpdatePlan: {}
    };
    exports.TypeInfo.BacklogConfiguration.fields = {
      bugsBehavior: {
        enumType: exports.TypeInfo.BugsBehavior
      },
      portfolioBacklogs: {
        isArray: true,
        typeInfo: exports.TypeInfo.BacklogLevelConfiguration
      },
      requirementBacklog: {
        typeInfo: exports.TypeInfo.BacklogLevelConfiguration
      },
      taskBacklog: {
        typeInfo: exports.TypeInfo.BacklogLevelConfiguration
      }
    };
    exports.TypeInfo.BacklogLevelConfiguration.fields = {
      type: {
        enumType: exports.TypeInfo.BacklogType
      }
    };
    exports.TypeInfo.Board.fields = {
      columns: {
        isArray: true,
        typeInfo: exports.TypeInfo.BoardColumn
      }
    };
    exports.TypeInfo.BoardColumn.fields = {
      columnType: {
        enumType: exports.TypeInfo.BoardColumnType
      }
    };
    exports.TypeInfo.CapacityContractBase.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.CapacityPatch.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.CardFieldSettings.fields = {
      additionalFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.FieldInfo
      },
      assignedToDisplayFormat: {
        enumType: exports.TypeInfo.IdentityDisplayFormat
      },
      coreFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.FieldInfo
      }
    };
    exports.TypeInfo.CardSettings.fields = {
      fields: {
        typeInfo: exports.TypeInfo.CardFieldSettings
      }
    };
    exports.TypeInfo.CreatePlan.fields = {
      type: {
        enumType: exports.TypeInfo.PlanType
      }
    };
    exports.TypeInfo.DateRange.fields = {
      end: {
        isDate: true
      },
      start: {
        isDate: true
      }
    };
    exports.TypeInfo.DeliveryViewData.fields = {
      criteriaStatus: {
        typeInfo: exports.TypeInfo.TimelineCriteriaStatus
      },
      endDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      },
      teams: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineTeamData
      }
    };
    exports.TypeInfo.DeliveryViewPropertyCollection.fields = {
      cardSettings: {
        typeInfo: exports.TypeInfo.CardSettings
      },
      markers: {
        isArray: true,
        typeInfo: exports.TypeInfo.Marker
      }
    };
    exports.TypeInfo.FieldInfo.fields = {
      fieldType: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.Marker.fields = {
      date: {
        isDate: true
      }
    };
    exports.TypeInfo.Plan.fields = {
      createdDate: {
        isDate: true
      },
      modifiedDate: {
        isDate: true
      },
      type: {
        enumType: exports.TypeInfo.PlanType
      },
      userPermissions: {
        enumType: exports.TypeInfo.PlanUserPermissions
      }
    };
    exports.TypeInfo.PlanMetadata.fields = {
      modifiedDate: {
        isDate: true
      },
      userPermissions: {
        enumType: exports.TypeInfo.PlanUserPermissions
      }
    };
    exports.TypeInfo.TeamCapacity.fields = {
      teamMembers: {
        isArray: true,
        typeInfo: exports.TypeInfo.TeamMemberCapacityIdentityRef
      }
    };
    exports.TypeInfo.TeamIterationAttributes.fields = {
      finishDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      },
      timeFrame: {
        enumType: exports.TypeInfo.TimeFrame
      }
    };
    exports.TypeInfo.TeamMemberCapacity.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.TeamMemberCapacityIdentityRef.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.TeamSetting.fields = {
      backlogIteration: {
        typeInfo: exports.TypeInfo.TeamSettingsIteration
      },
      bugsBehavior: {
        enumType: exports.TypeInfo.BugsBehavior
      },
      defaultIteration: {
        typeInfo: exports.TypeInfo.TeamSettingsIteration
      },
      workingDays: {
        isArray: true,
        enumType: SystemInterfaces.TypeInfo.DayOfWeek
      }
    };
    exports.TypeInfo.TeamSettingsDaysOff.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.TeamSettingsDaysOffPatch.fields = {
      daysOff: {
        isArray: true,
        typeInfo: exports.TypeInfo.DateRange
      }
    };
    exports.TypeInfo.TeamSettingsIteration.fields = {
      attributes: {
        typeInfo: exports.TypeInfo.TeamIterationAttributes
      }
    };
    exports.TypeInfo.TeamSettingsPatch.fields = {
      bugsBehavior: {
        enumType: exports.TypeInfo.BugsBehavior
      },
      workingDays: {
        isArray: true,
        enumType: SystemInterfaces.TypeInfo.DayOfWeek
      }
    };
    exports.TypeInfo.TimelineCriteriaStatus.fields = {
      type: {
        enumType: exports.TypeInfo.TimelineCriteriaStatusCode
      }
    };
    exports.TypeInfo.TimelineIterationStatus.fields = {
      type: {
        enumType: exports.TypeInfo.TimelineIterationStatusCode
      }
    };
    exports.TypeInfo.TimelineTeamData.fields = {
      iterations: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineTeamIteration
      },
      status: {
        typeInfo: exports.TypeInfo.TimelineTeamStatus
      }
    };
    exports.TypeInfo.TimelineTeamIteration.fields = {
      finishDate: {
        isDate: true
      },
      startDate: {
        isDate: true
      },
      status: {
        typeInfo: exports.TypeInfo.TimelineIterationStatus
      }
    };
    exports.TypeInfo.TimelineTeamStatus.fields = {
      type: {
        enumType: exports.TypeInfo.TimelineTeamStatusCode
      }
    };
    exports.TypeInfo.UpdatePlan.fields = {
      type: {
        enumType: exports.TypeInfo.PlanType
      }
    };
  }
});

// node_modules/azure-devops-node-api/WorkApi.js
var require_WorkApi = __commonJS({
  "node_modules/azure-devops-node-api/WorkApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var WorkInterfaces = require_WorkInterfaces();
    var WorkApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-Work-api", options);
      }
      getBacklogConfigurations(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "7799f497-3cb5-4f16-ad4f-5cd06012db64", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBacklogLevelWorkItems(teamContext, backlogId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              backlogId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "7c468d96-ab1d-4294-a360-92f07e9ccd98", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBacklog(teamContext, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "a93726f9-7867-4e38-b4f2-0bfafc2f6a94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogLevelConfiguration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBacklogs(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "a93726f9-7867-4e38-b4f2-0bfafc2f6a94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogLevelConfiguration, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardBadge(teamContext, id, columnOptions, columns) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            let queryValues = {
              columnOptions,
              columns: columns && columns.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0120b002-ab6c-4ca0-98cf-a8d7492f865c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardBadgeData(teamContext, id, columnOptions, columns) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            let queryValues = {
              columnOptions,
              columns: columns && columns.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0120b002-ab6c-4ca0-98cf-a8d7492f865c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getColumnSuggestedValues(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "eb7ec5a3-1ba3-4fd1-b834-49a5a387e57d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardMappingParentItems(teamContext, childBacklogContextCategoryRefName, workitemIds) {
        return __awaiter(this, void 0, void 0, function* () {
          if (childBacklogContextCategoryRefName == null) {
            throw new TypeError("childBacklogContextCategoryRefName can not be null or undefined");
          }
          if (workitemIds == null) {
            throw new TypeError("workitemIds can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            let queryValues = {
              childBacklogContextCategoryRefName,
              workitemIds: workitemIds && workitemIds.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "186abea3-5c35-432f-9e28-7a15b4312a0e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRowSuggestedValues(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "bb494cc6-a0f5-4c6c-8dca-ea6912e79eb9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoard(teamContext, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "23ad19fc-3b8e-4877-8462-b3f92bc06b40", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Board, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoards(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "23ad19fc-3b8e-4877-8462-b3f92bc06b40", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setBoardOptions(options, teamContext, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "23ad19fc-3b8e-4877-8462-b3f92bc06b40", routeValues);
              let url = verData.requestUrl;
              let options2 = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, options2, options2);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardUserSettings(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "b30d9f58-1891-4b0a-b168-c46408f919b0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardUserSettings(boardUserSettings, teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "b30d9f58-1891-4b0a-b168-c46408f919b0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, boardUserSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCapacitiesWithIdentityRefAndTotals(teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "work", "74412d15-8c1a-4352-a48d-ef1ed5587d57", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamCapacity, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCapacityWithIdentityRef(teamContext, iterationId, teamMemberId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId,
              teamMemberId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "work", "74412d15-8c1a-4352-a48d-ef1ed5587d57", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceCapacitiesWithIdentityRef(capacities, teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "work", "74412d15-8c1a-4352-a48d-ef1ed5587d57", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, capacities, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateCapacityWithIdentityRef(patch, teamContext, iterationId, teamMemberId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId,
              teamMemberId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "work", "74412d15-8c1a-4352-a48d-ef1ed5587d57", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, patch, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardCardRuleSettings(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "b044a3d9-02ea-49c7-91a1-b730949cc896", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardCardRuleSettings(boardCardRuleSettings, teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "b044a3d9-02ea-49c7-91a1-b730949cc896", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, boardCardRuleSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTaskboardCardRuleSettings(boardCardRuleSettings, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "3f84a8d1-1aab-423e-a94b-6dcbdcca511f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, boardCardRuleSettings, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardCardSettings(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "07c3b467-bc60-4f05-8e34-599ce288fafc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardCardSettings(boardCardSettingsToSave, teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "07c3b467-bc60-4f05-8e34-599ce288fafc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, boardCardSettingsToSave, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTaskboardCardSettings(boardCardSettingsToSave, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "work", "0d63745f-31f3-4cf3-9056-2a064e567637", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, boardCardSettingsToSave, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardChart(teamContext, board, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "45fe888c-239e-49fd-958c-df1a1ab21d97", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardCharts(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "45fe888c-239e-49fd-958c-df1a1ab21d97", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardChart(chart, teamContext, board, name) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board,
              name
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "45fe888c-239e-49fd-958c-df1a1ab21d97", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, chart, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardColumns(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c555d7ff-84e1-47df-9923-a3fe0cd8751b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BoardColumn, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardColumns(boardColumns, teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c555d7ff-84e1-47df-9923-a3fe0cd8751b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, boardColumns, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BoardColumn, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeliveryTimelineData(project, id, revision, startDate, endDate) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              revision,
              startDate,
              endDate
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "bdd0834e-101f-49f0-a6ae-509f384a12b4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.DeliveryViewData, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTotalIterationCapacities(project, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "1e385ce0-396b-4273-8171-d64562c18d37", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTeamIteration(teamContext, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c9175577-28a1-4b06-9197-8636af9f64ad", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamIteration(teamContext, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c9175577-28a1-4b06-9197-8636af9f64ad", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamIterations(teamContext, timeframe) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            let queryValues = {
              "$timeframe": timeframe
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c9175577-28a1-4b06-9197-8636af9f64ad", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      postTeamIteration(iteration, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c9175577-28a1-4b06-9197-8636af9f64ad", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, iteration, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createPlan(postedPlan, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0b42cb47-cd73-4810-ac90-19c9ba147453", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, postedPlan, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deletePlan(project, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0b42cb47-cd73-4810-ac90-19c9ba147453", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPlan(project, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0b42cb47-cd73-4810-ac90-19c9ba147453", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getPlans(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0b42cb47-cd73-4810-ac90-19c9ba147453", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePlan(updatedPlan, project, id) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0b42cb47-cd73-4810-ac90-19c9ba147453", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, updatedPlan, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessConfiguration(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "f901ba42-86d2-4b0c-89c1-3f86d06daa84", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBoardRows(teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0863355d-aefd-4d63-8669-984c9b7b0e78", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBoardRows(boardRows, teamContext, board) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              board
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "0863355d-aefd-4d63-8669-984c9b7b0e78", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, boardRows, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getColumns(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c6815dbe-8e7e-4ffe-9a79-e83ee712aa92", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateColumns(updateColumns, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c6815dbe-8e7e-4ffe-9a79-e83ee712aa92", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, updateColumns, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemColumns(teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "1be23c36-8872-4abc-b57d-402cd6c669d9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItemColumn(updateColumn, teamContext, iterationId, workItemId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId,
              workItemId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "1be23c36-8872-4abc-b57d-402cd6c669d9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateColumn, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamDaysOff(teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "2d4faa2e-9150-4cbf-a47a-932b1b4a0773", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsDaysOff, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTeamDaysOff(daysOffPatch, teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "2d4faa2e-9150-4cbf-a47a-932b1b4a0773", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, daysOffPatch, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsDaysOff, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamFieldValues(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "07ced576-58ed-49e6-9c1e-5cb53ab8bf2a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTeamFieldValues(patch, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "07ced576-58ed-49e6-9c1e-5cb53ab8bf2a", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, patch, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTeamSettings(teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c3c1012b-bea7-49d7-b45e-1664e566f84c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSetting, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTeamSettings(teamSettingsPatch, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "c3c1012b-bea7-49d7-b45e-1664e566f84c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, teamSettingsPatch, options);
              let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSetting, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getIterationWorkItems(teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "5b3ef1a6-d3ab-44cd-bafd-c7f45db850fa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      reorderBacklogWorkItems(operation, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "1c22b714-e7e4-41b9-85e0-56ee13ef55ed", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, operation, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      reorderIterationWorkItems(operation, teamContext, iterationId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              iterationId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "work", "47755db2-d7eb-405a-8c25-675401525fc9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, operation, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    WorkApi.RESOURCE_AREA_ID = "1d4f49f9-02b9-4e26-b826-2cdb6195f2a9";
    exports.WorkApi = WorkApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/WorkItemTrackingInterfaces.js
var require_WorkItemTrackingInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/WorkItemTrackingInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ClassificationNodesErrorPolicy;
    (function(ClassificationNodesErrorPolicy2) {
      ClassificationNodesErrorPolicy2[ClassificationNodesErrorPolicy2["Fail"] = 1] = "Fail";
      ClassificationNodesErrorPolicy2[ClassificationNodesErrorPolicy2["Omit"] = 2] = "Omit";
    })(ClassificationNodesErrorPolicy = exports.ClassificationNodesErrorPolicy || (exports.ClassificationNodesErrorPolicy = {}));
    var CommentExpandOptions;
    (function(CommentExpandOptions2) {
      CommentExpandOptions2[CommentExpandOptions2["None"] = 0] = "None";
      CommentExpandOptions2[CommentExpandOptions2["Reactions"] = 1] = "Reactions";
      CommentExpandOptions2[CommentExpandOptions2["RenderedText"] = 8] = "RenderedText";
      CommentExpandOptions2[CommentExpandOptions2["RenderedTextOnly"] = 16] = "RenderedTextOnly";
      CommentExpandOptions2[CommentExpandOptions2["All"] = -17] = "All";
    })(CommentExpandOptions = exports.CommentExpandOptions || (exports.CommentExpandOptions = {}));
    var CommentReactionType;
    (function(CommentReactionType2) {
      CommentReactionType2[CommentReactionType2["Like"] = 0] = "Like";
      CommentReactionType2[CommentReactionType2["Dislike"] = 1] = "Dislike";
      CommentReactionType2[CommentReactionType2["Heart"] = 2] = "Heart";
      CommentReactionType2[CommentReactionType2["Hooray"] = 3] = "Hooray";
      CommentReactionType2[CommentReactionType2["Smile"] = 4] = "Smile";
      CommentReactionType2[CommentReactionType2["Confused"] = 5] = "Confused";
    })(CommentReactionType = exports.CommentReactionType || (exports.CommentReactionType = {}));
    var CommentSortOrder;
    (function(CommentSortOrder2) {
      CommentSortOrder2[CommentSortOrder2["Asc"] = 1] = "Asc";
      CommentSortOrder2[CommentSortOrder2["Desc"] = 2] = "Desc";
    })(CommentSortOrder = exports.CommentSortOrder || (exports.CommentSortOrder = {}));
    var FieldType;
    (function(FieldType2) {
      FieldType2[FieldType2["String"] = 0] = "String";
      FieldType2[FieldType2["Integer"] = 1] = "Integer";
      FieldType2[FieldType2["DateTime"] = 2] = "DateTime";
      FieldType2[FieldType2["PlainText"] = 3] = "PlainText";
      FieldType2[FieldType2["Html"] = 4] = "Html";
      FieldType2[FieldType2["TreePath"] = 5] = "TreePath";
      FieldType2[FieldType2["History"] = 6] = "History";
      FieldType2[FieldType2["Double"] = 7] = "Double";
      FieldType2[FieldType2["Guid"] = 8] = "Guid";
      FieldType2[FieldType2["Boolean"] = 9] = "Boolean";
      FieldType2[FieldType2["Identity"] = 10] = "Identity";
      FieldType2[FieldType2["PicklistString"] = 11] = "PicklistString";
      FieldType2[FieldType2["PicklistInteger"] = 12] = "PicklistInteger";
      FieldType2[FieldType2["PicklistDouble"] = 13] = "PicklistDouble";
    })(FieldType = exports.FieldType || (exports.FieldType = {}));
    var FieldUsage;
    (function(FieldUsage2) {
      FieldUsage2[FieldUsage2["None"] = 0] = "None";
      FieldUsage2[FieldUsage2["WorkItem"] = 1] = "WorkItem";
      FieldUsage2[FieldUsage2["WorkItemLink"] = 2] = "WorkItemLink";
      FieldUsage2[FieldUsage2["Tree"] = 3] = "Tree";
      FieldUsage2[FieldUsage2["WorkItemTypeExtension"] = 4] = "WorkItemTypeExtension";
    })(FieldUsage = exports.FieldUsage || (exports.FieldUsage = {}));
    var GetFieldsExpand;
    (function(GetFieldsExpand2) {
      GetFieldsExpand2[GetFieldsExpand2["None"] = 0] = "None";
      GetFieldsExpand2[GetFieldsExpand2["ExtensionFields"] = 1] = "ExtensionFields";
      GetFieldsExpand2[GetFieldsExpand2["IncludeDeleted"] = 2] = "IncludeDeleted";
    })(GetFieldsExpand = exports.GetFieldsExpand || (exports.GetFieldsExpand = {}));
    var LinkQueryMode;
    (function(LinkQueryMode2) {
      LinkQueryMode2[LinkQueryMode2["WorkItems"] = 0] = "WorkItems";
      LinkQueryMode2[LinkQueryMode2["LinksOneHopMustContain"] = 1] = "LinksOneHopMustContain";
      LinkQueryMode2[LinkQueryMode2["LinksOneHopMayContain"] = 2] = "LinksOneHopMayContain";
      LinkQueryMode2[LinkQueryMode2["LinksOneHopDoesNotContain"] = 3] = "LinksOneHopDoesNotContain";
      LinkQueryMode2[LinkQueryMode2["LinksRecursiveMustContain"] = 4] = "LinksRecursiveMustContain";
      LinkQueryMode2[LinkQueryMode2["LinksRecursiveMayContain"] = 5] = "LinksRecursiveMayContain";
      LinkQueryMode2[LinkQueryMode2["LinksRecursiveDoesNotContain"] = 6] = "LinksRecursiveDoesNotContain";
    })(LinkQueryMode = exports.LinkQueryMode || (exports.LinkQueryMode = {}));
    var LogicalOperation;
    (function(LogicalOperation2) {
      LogicalOperation2[LogicalOperation2["NONE"] = 0] = "NONE";
      LogicalOperation2[LogicalOperation2["AND"] = 1] = "AND";
      LogicalOperation2[LogicalOperation2["OR"] = 2] = "OR";
    })(LogicalOperation = exports.LogicalOperation || (exports.LogicalOperation = {}));
    var ProvisioningActionType;
    (function(ProvisioningActionType2) {
      ProvisioningActionType2[ProvisioningActionType2["Import"] = 0] = "Import";
      ProvisioningActionType2[ProvisioningActionType2["Validate"] = 1] = "Validate";
    })(ProvisioningActionType = exports.ProvisioningActionType || (exports.ProvisioningActionType = {}));
    var QueryErrorPolicy;
    (function(QueryErrorPolicy2) {
      QueryErrorPolicy2[QueryErrorPolicy2["Fail"] = 1] = "Fail";
      QueryErrorPolicy2[QueryErrorPolicy2["Omit"] = 2] = "Omit";
    })(QueryErrorPolicy = exports.QueryErrorPolicy || (exports.QueryErrorPolicy = {}));
    var QueryExpand;
    (function(QueryExpand2) {
      QueryExpand2[QueryExpand2["None"] = 0] = "None";
      QueryExpand2[QueryExpand2["Wiql"] = 1] = "Wiql";
      QueryExpand2[QueryExpand2["Clauses"] = 2] = "Clauses";
      QueryExpand2[QueryExpand2["All"] = 3] = "All";
      QueryExpand2[QueryExpand2["Minimal"] = 4] = "Minimal";
    })(QueryExpand = exports.QueryExpand || (exports.QueryExpand = {}));
    var QueryOption;
    (function(QueryOption2) {
      QueryOption2[QueryOption2["Doing"] = 1] = "Doing";
      QueryOption2[QueryOption2["Done"] = 2] = "Done";
      QueryOption2[QueryOption2["Followed"] = 3] = "Followed";
    })(QueryOption = exports.QueryOption || (exports.QueryOption = {}));
    var QueryRecursionOption;
    (function(QueryRecursionOption2) {
      QueryRecursionOption2[QueryRecursionOption2["ParentFirst"] = 0] = "ParentFirst";
      QueryRecursionOption2[QueryRecursionOption2["ChildFirst"] = 1] = "ChildFirst";
    })(QueryRecursionOption = exports.QueryRecursionOption || (exports.QueryRecursionOption = {}));
    var QueryResultType;
    (function(QueryResultType2) {
      QueryResultType2[QueryResultType2["WorkItem"] = 1] = "WorkItem";
      QueryResultType2[QueryResultType2["WorkItemLink"] = 2] = "WorkItemLink";
    })(QueryResultType = exports.QueryResultType || (exports.QueryResultType = {}));
    var QueryType;
    (function(QueryType2) {
      QueryType2[QueryType2["Flat"] = 1] = "Flat";
      QueryType2[QueryType2["Tree"] = 2] = "Tree";
      QueryType2[QueryType2["OneHop"] = 3] = "OneHop";
    })(QueryType = exports.QueryType || (exports.QueryType = {}));
    var ReportingRevisionsExpand;
    (function(ReportingRevisionsExpand2) {
      ReportingRevisionsExpand2[ReportingRevisionsExpand2["None"] = 0] = "None";
      ReportingRevisionsExpand2[ReportingRevisionsExpand2["Fields"] = 1] = "Fields";
    })(ReportingRevisionsExpand = exports.ReportingRevisionsExpand || (exports.ReportingRevisionsExpand = {}));
    var TemplateType;
    (function(TemplateType2) {
      TemplateType2[TemplateType2["WorkItemType"] = 0] = "WorkItemType";
      TemplateType2[TemplateType2["GlobalWorkflow"] = 1] = "GlobalWorkflow";
    })(TemplateType = exports.TemplateType || (exports.TemplateType = {}));
    var TreeNodeStructureType;
    (function(TreeNodeStructureType2) {
      TreeNodeStructureType2[TreeNodeStructureType2["Area"] = 0] = "Area";
      TreeNodeStructureType2[TreeNodeStructureType2["Iteration"] = 1] = "Iteration";
    })(TreeNodeStructureType = exports.TreeNodeStructureType || (exports.TreeNodeStructureType = {}));
    var TreeStructureGroup;
    (function(TreeStructureGroup2) {
      TreeStructureGroup2[TreeStructureGroup2["Areas"] = 0] = "Areas";
      TreeStructureGroup2[TreeStructureGroup2["Iterations"] = 1] = "Iterations";
    })(TreeStructureGroup = exports.TreeStructureGroup || (exports.TreeStructureGroup = {}));
    var WorkItemErrorPolicy;
    (function(WorkItemErrorPolicy2) {
      WorkItemErrorPolicy2[WorkItemErrorPolicy2["Fail"] = 1] = "Fail";
      WorkItemErrorPolicy2[WorkItemErrorPolicy2["Omit"] = 2] = "Omit";
    })(WorkItemErrorPolicy = exports.WorkItemErrorPolicy || (exports.WorkItemErrorPolicy = {}));
    var WorkItemExpand;
    (function(WorkItemExpand2) {
      WorkItemExpand2[WorkItemExpand2["None"] = 0] = "None";
      WorkItemExpand2[WorkItemExpand2["Relations"] = 1] = "Relations";
      WorkItemExpand2[WorkItemExpand2["Fields"] = 2] = "Fields";
      WorkItemExpand2[WorkItemExpand2["Links"] = 3] = "Links";
      WorkItemExpand2[WorkItemExpand2["All"] = 4] = "All";
    })(WorkItemExpand = exports.WorkItemExpand || (exports.WorkItemExpand = {}));
    var WorkItemRecentActivityType;
    (function(WorkItemRecentActivityType2) {
      WorkItemRecentActivityType2[WorkItemRecentActivityType2["Visited"] = 0] = "Visited";
      WorkItemRecentActivityType2[WorkItemRecentActivityType2["Edited"] = 1] = "Edited";
      WorkItemRecentActivityType2[WorkItemRecentActivityType2["Deleted"] = 2] = "Deleted";
      WorkItemRecentActivityType2[WorkItemRecentActivityType2["Restored"] = 3] = "Restored";
    })(WorkItemRecentActivityType = exports.WorkItemRecentActivityType || (exports.WorkItemRecentActivityType = {}));
    var WorkItemTypeFieldsExpandLevel;
    (function(WorkItemTypeFieldsExpandLevel2) {
      WorkItemTypeFieldsExpandLevel2[WorkItemTypeFieldsExpandLevel2["None"] = 0] = "None";
      WorkItemTypeFieldsExpandLevel2[WorkItemTypeFieldsExpandLevel2["AllowedValues"] = 1] = "AllowedValues";
      WorkItemTypeFieldsExpandLevel2[WorkItemTypeFieldsExpandLevel2["DependentFields"] = 2] = "DependentFields";
      WorkItemTypeFieldsExpandLevel2[WorkItemTypeFieldsExpandLevel2["All"] = 3] = "All";
    })(WorkItemTypeFieldsExpandLevel = exports.WorkItemTypeFieldsExpandLevel || (exports.WorkItemTypeFieldsExpandLevel = {}));
    exports.TypeInfo = {
      AccountMyWorkResult: {},
      AccountRecentActivityWorkItemModel: {},
      AccountRecentActivityWorkItemModel2: {},
      AccountRecentActivityWorkItemModelBase: {},
      AccountRecentMentionWorkItemModel: {},
      AccountWorkWorkItemModel: {},
      ClassificationNodesErrorPolicy: {
        enumValues: {
          "fail": 1,
          "omit": 2
        }
      },
      Comment: {},
      CommentExpandOptions: {
        enumValues: {
          "none": 0,
          "reactions": 1,
          "renderedText": 8,
          "renderedTextOnly": 16,
          "all": -17
        }
      },
      CommentList: {},
      CommentReaction: {},
      CommentReactionType: {
        enumValues: {
          "like": 0,
          "dislike": 1,
          "heart": 2,
          "hooray": 3,
          "smile": 4,
          "confused": 5
        }
      },
      CommentSortOrder: {
        enumValues: {
          "asc": 1,
          "desc": 2
        }
      },
      CommentVersion: {},
      ExternalDeployment: {},
      FieldType: {
        enumValues: {
          "string": 0,
          "integer": 1,
          "dateTime": 2,
          "plainText": 3,
          "html": 4,
          "treePath": 5,
          "history": 6,
          "double": 7,
          "guid": 8,
          "boolean": 9,
          "identity": 10,
          "picklistString": 11,
          "picklistInteger": 12,
          "picklistDouble": 13
        }
      },
      FieldUsage: {
        enumValues: {
          "none": 0,
          "workItem": 1,
          "workItemLink": 2,
          "tree": 3,
          "workItemTypeExtension": 4
        }
      },
      GetFieldsExpand: {
        enumValues: {
          "none": 0,
          "extensionFields": 1,
          "includeDeleted": 2
        }
      },
      LinkQueryMode: {
        enumValues: {
          "workItems": 0,
          "linksOneHopMustContain": 1,
          "linksOneHopMayContain": 2,
          "linksOneHopDoesNotContain": 3,
          "linksRecursiveMustContain": 4,
          "linksRecursiveMayContain": 5,
          "linksRecursiveDoesNotContain": 6
        }
      },
      LogicalOperation: {
        enumValues: {
          "none": 0,
          "and": 1,
          "or": 2
        }
      },
      ProvisioningActionType: {
        enumValues: {
          "import": 0,
          "validate": 1
        }
      },
      QueryBatchGetRequest: {},
      QueryErrorPolicy: {
        enumValues: {
          "fail": 1,
          "omit": 2
        }
      },
      QueryExpand: {
        enumValues: {
          "none": 0,
          "wiql": 1,
          "clauses": 2,
          "all": 3,
          "minimal": 4
        }
      },
      QueryHierarchyItem: {},
      QueryHierarchyItemsResult: {},
      QueryOption: {
        enumValues: {
          "doing": 1,
          "done": 2,
          "followed": 3
        }
      },
      QueryRecursionOption: {
        enumValues: {
          "parentFirst": 0,
          "childFirst": 1
        }
      },
      QueryResultType: {
        enumValues: {
          "workItem": 1,
          "workItemLink": 2
        }
      },
      QueryType: {
        enumValues: {
          "flat": 1,
          "tree": 2,
          "oneHop": 3
        }
      },
      ReportingRevisionsExpand: {
        enumValues: {
          "none": 0,
          "fields": 1
        }
      },
      TemplateType: {
        enumValues: {
          "workItemType": 0,
          "globalWorkflow": 1
        }
      },
      TreeNodeStructureType: {
        enumValues: {
          "area": 0,
          "iteration": 1
        }
      },
      TreeStructureGroup: {
        enumValues: {
          "areas": 0,
          "iterations": 1
        }
      },
      WorkItemBatchGetRequest: {},
      WorkItemClassificationNode: {},
      WorkItemComment: {},
      WorkItemComments: {},
      WorkItemErrorPolicy: {
        enumValues: {
          "fail": 1,
          "omit": 2
        }
      },
      WorkItemExpand: {
        enumValues: {
          "none": 0,
          "relations": 1,
          "fields": 2,
          "links": 3,
          "all": 4
        }
      },
      WorkItemField: {},
      WorkItemHistory: {},
      WorkItemQueryClause: {},
      WorkItemQueryResult: {},
      WorkItemRecentActivityType: {
        enumValues: {
          "visited": 0,
          "edited": 1,
          "deleted": 2,
          "restored": 3
        }
      },
      WorkItemTypeFieldsExpandLevel: {
        enumValues: {
          "none": 0,
          "allowedValues": 1,
          "dependentFields": 2,
          "all": 3
        }
      },
      WorkItemTypeTemplateUpdateModel: {},
      WorkItemUpdate: {}
    };
    exports.TypeInfo.AccountMyWorkResult.fields = {
      workItemDetails: {
        isArray: true,
        typeInfo: exports.TypeInfo.AccountWorkWorkItemModel
      }
    };
    exports.TypeInfo.AccountRecentActivityWorkItemModel.fields = {
      activityDate: {
        isDate: true
      },
      activityType: {
        enumType: exports.TypeInfo.WorkItemRecentActivityType
      },
      changedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.AccountRecentActivityWorkItemModel2.fields = {
      activityDate: {
        isDate: true
      },
      activityType: {
        enumType: exports.TypeInfo.WorkItemRecentActivityType
      },
      changedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.AccountRecentActivityWorkItemModelBase.fields = {
      activityDate: {
        isDate: true
      },
      activityType: {
        enumType: exports.TypeInfo.WorkItemRecentActivityType
      },
      changedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.AccountRecentMentionWorkItemModel.fields = {
      mentionedDateField: {
        isDate: true
      }
    };
    exports.TypeInfo.AccountWorkWorkItemModel.fields = {
      changedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.Comment.fields = {
      createdDate: {
        isDate: true
      },
      createdOnBehalfDate: {
        isDate: true
      },
      modifiedDate: {
        isDate: true
      },
      reactions: {
        isArray: true,
        typeInfo: exports.TypeInfo.CommentReaction
      }
    };
    exports.TypeInfo.CommentList.fields = {
      comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.Comment
      }
    };
    exports.TypeInfo.CommentReaction.fields = {
      type: {
        enumType: exports.TypeInfo.CommentReactionType
      }
    };
    exports.TypeInfo.CommentVersion.fields = {
      createdDate: {
        isDate: true
      },
      createdOnBehalfDate: {
        isDate: true
      },
      modifiedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.ExternalDeployment.fields = {
      statusDate: {
        isDate: true
      }
    };
    exports.TypeInfo.QueryBatchGetRequest.fields = {
      $expand: {
        enumType: exports.TypeInfo.QueryExpand
      },
      errorPolicy: {
        enumType: exports.TypeInfo.QueryErrorPolicy
      }
    };
    exports.TypeInfo.QueryHierarchyItem.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryHierarchyItem
      },
      clauses: {
        typeInfo: exports.TypeInfo.WorkItemQueryClause
      },
      createdDate: {
        isDate: true
      },
      filterOptions: {
        enumType: exports.TypeInfo.LinkQueryMode
      },
      lastExecutedDate: {
        isDate: true
      },
      lastModifiedDate: {
        isDate: true
      },
      linkClauses: {
        typeInfo: exports.TypeInfo.WorkItemQueryClause
      },
      queryRecursionOption: {
        enumType: exports.TypeInfo.QueryRecursionOption
      },
      queryType: {
        enumType: exports.TypeInfo.QueryType
      },
      sourceClauses: {
        typeInfo: exports.TypeInfo.WorkItemQueryClause
      },
      targetClauses: {
        typeInfo: exports.TypeInfo.WorkItemQueryClause
      }
    };
    exports.TypeInfo.QueryHierarchyItemsResult.fields = {
      value: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryHierarchyItem
      }
    };
    exports.TypeInfo.WorkItemBatchGetRequest.fields = {
      $expand: {
        enumType: exports.TypeInfo.WorkItemExpand
      },
      asOf: {
        isDate: true
      },
      errorPolicy: {
        enumType: exports.TypeInfo.WorkItemErrorPolicy
      }
    };
    exports.TypeInfo.WorkItemClassificationNode.fields = {
      children: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkItemClassificationNode
      },
      structureType: {
        enumType: exports.TypeInfo.TreeNodeStructureType
      }
    };
    exports.TypeInfo.WorkItemComment.fields = {
      revisedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.WorkItemComments.fields = {
      comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkItemComment
      }
    };
    exports.TypeInfo.WorkItemField.fields = {
      type: {
        enumType: exports.TypeInfo.FieldType
      },
      usage: {
        enumType: exports.TypeInfo.FieldUsage
      }
    };
    exports.TypeInfo.WorkItemHistory.fields = {
      revisedDate: {
        isDate: true
      }
    };
    exports.TypeInfo.WorkItemQueryClause.fields = {
      clauses: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkItemQueryClause
      },
      logicalOperator: {
        enumType: exports.TypeInfo.LogicalOperation
      }
    };
    exports.TypeInfo.WorkItemQueryResult.fields = {
      asOf: {
        isDate: true
      },
      queryResultType: {
        enumType: exports.TypeInfo.QueryResultType
      },
      queryType: {
        enumType: exports.TypeInfo.QueryType
      }
    };
    exports.TypeInfo.WorkItemTypeTemplateUpdateModel.fields = {
      actionType: {
        enumType: exports.TypeInfo.ProvisioningActionType
      },
      templateType: {
        enumType: exports.TypeInfo.TemplateType
      }
    };
    exports.TypeInfo.WorkItemUpdate.fields = {
      revisedDate: {
        isDate: true
      }
    };
  }
});

// node_modules/azure-devops-node-api/WorkItemTrackingApi.js
var require_WorkItemTrackingApi = __commonJS({
  "node_modules/azure-devops-node-api/WorkItemTrackingApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var WorkItemTrackingInterfaces = require_WorkItemTrackingInterfaces();
    var WorkItemTrackingApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-WorkItemTracking-api", options);
      }
      getAccountMyWorkData(queryOption) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              "$queryOption": queryOption
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "def3d688-ddf5-4096-9024-69beea15cdbd", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountMyWorkResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRecentActivityData() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "1bc988f4-c15f-4072-ad35-497c87e3a909", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountRecentActivityWorkItemModel2, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRecentMentions() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "d60eeb6e-e18c-4478-9e94-a0094e28f41c", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountRecentMentionWorkItemModel, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkArtifactLinkTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "1a31de40-e318-41cd-a6c6-881077df52e3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryWorkItemsForArtifactUris(artifactUriQuery, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "a9a9aa7a-8c09-44d3-ad1b-46e855c1e3d3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, artifactUriQuery, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createAttachment(customHeaders, contentStream, fileName, uploadType, project, areaPath) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fileName,
              uploadType,
              areaPath
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/octet-stream";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.uploadStream("POST", url, contentStream, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentContent(id, fileName, project, download) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              fileName,
              download
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAttachmentZip(id, fileName, project, download) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              fileName,
              download
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("application/zip", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getClassificationNodes(project, ids, depth, errorPolicy) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ids: ids && ids.join(","),
              "$depth": depth,
              errorPolicy
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a70579d1-f53a-48ee-a5be-7be8659023b9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRootNodes(project, depth) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$depth": depth
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a70579d1-f53a-48ee-a5be-7be8659023b9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createOrUpdateClassificationNode(postedNode, project, structureGroup, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              structureGroup,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, postedNode, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteClassificationNode(project, structureGroup, path, reclassifyId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              structureGroup,
              path
            };
            let queryValues = {
              "$reclassifyId": reclassifyId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getClassificationNode(project, structureGroup, path, depth) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              structureGroup,
              path
            };
            let queryValues = {
              "$depth": depth
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateClassificationNode(postedNode, project, structureGroup, path) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              structureGroup,
              path
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, postedNode, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getEngagedUsers(project, workItemId, commentId, reactionType, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId,
              reactionType
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "e33ca5e0-2349-4285-af3d-d72d86781c35", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addComment(request, project, workItemId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, request, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteComment(project, workItemId, commentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getComment(project, workItemId, commentId, includeDeleted, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId
            };
            let queryValues = {
              includeDeleted,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getComments(project, workItemId, top, continuationToken, includeDeleted, expand, order) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId
            };
            let queryValues = {
              "$top": top,
              continuationToken,
              includeDeleted,
              "$expand": expand,
              order
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentList, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommentsBatch(project, workItemId, ids, includeDeleted, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId
            };
            let queryValues = {
              ids: ids && ids.join(","),
              includeDeleted,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentList, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateComment(request, project, workItemId, commentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "608aac0a-32e1-4493-a863-b9cf4566d257", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, request, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createCommentReaction(project, workItemId, commentId, reactionType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId,
              reactionType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "f6cb3f27-1028-4851-af96-887e570dc21f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, null, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteCommentReaction(project, workItemId, commentId, reactionType) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId,
              reactionType
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "f6cb3f27-1028-4851-af96-887e570dc21f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommentReactions(project, workItemId, commentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "f6cb3f27-1028-4851-af96-887e570dc21f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommentVersion(project, workItemId, commentId, version) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId,
              version
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "49e03b34-3be0-42e3-8a5d-e8dfb88ac954", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentVersion, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getCommentVersions(project, workItemId, commentId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              workItemId,
              commentId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "49e03b34-3be0-42e3-8a5d-e8dfb88ac954", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentVersion, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createField(workItemField, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemField, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteField(fieldNameOrRefName, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fieldNameOrRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getField(fieldNameOrRefName, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fieldNameOrRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFields(project, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateField(payload, fieldNameOrRefName, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              fieldNameOrRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, payload, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      migrateProjectsProcess(newProcess, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "19801631-d4e5-47e9-8166-0330de0ff1e6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, newProcess, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createQuery(postedQuery, project, query, validateWiqlOnly) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              query
            };
            let queryValues = {
              validateWiqlOnly
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, postedQuery, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteQuery(project, query) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              query
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQueries(project, expand, depth, includeDeleted) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$expand": expand,
              "$depth": depth,
              "$includeDeleted": includeDeleted
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQuery(project, query, expand, depth, includeDeleted, useIsoDateFormat) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              query
            };
            let queryValues = {
              "$expand": expand,
              "$depth": depth,
              "$includeDeleted": includeDeleted,
              "$useIsoDateFormat": useIsoDateFormat
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      searchQueries(project, filter, top, expand, includeDeleted) {
        return __awaiter(this, void 0, void 0, function* () {
          if (filter == null) {
            throw new TypeError("filter can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              "$filter": filter,
              "$top": top,
              "$expand": expand,
              "$includeDeleted": includeDeleted
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItemsResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateQuery(queryUpdate, project, query, undeleteDescendants) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              query
            };
            let queryValues = {
              "$undeleteDescendants": undeleteDescendants
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, queryUpdate, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getQueriesBatch(queryGetRequest, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "549816f9-09b0-4e75-9e81-01fbfcd07426", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, queryGetRequest, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      destroyWorkItem(id, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeletedWorkItem(id, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeletedWorkItems(ids, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ids: ids && ids.join(",")
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getDeletedWorkItemShallowReferences(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      restoreWorkItem(payload, id, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, payload, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevision(id, revisionNumber, expand, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id,
              revisionNumber
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "a00c85a5-80fa-4565-99c3-bcd2181434bb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRevisions(id, top, skip, expand, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              "$top": top,
              "$skip": skip,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "a00c85a5-80fa-4565-99c3-bcd2181434bb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      sendMail(body, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "12438500-2f84-4fa7-9f1a-c31871b4959d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, body, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTag(project, tagIdOrName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              tagIdOrName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "bc15bc60-e7a8-43cb-ab01-2106be3983a1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTag(project, tagIdOrName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              tagIdOrName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "bc15bc60-e7a8-43cb-ab01-2106be3983a1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTags(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "bc15bc60-e7a8-43cb-ab01-2106be3983a1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateTag(tagData, project, tagIdOrName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              tagIdOrName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "bc15bc60-e7a8-43cb-ab01-2106be3983a1", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, tagData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createTemplate(template, teamContext) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "6a90345f-a676-4969-afce-8e163e1d5642", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, template, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTemplates(teamContext, workitemtypename) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            let queryValues = {
              workitemtypename
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "6a90345f-a676-4969-afce-8e163e1d5642", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteTemplate(teamContext, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "fb10264a-8836-48a0-8033-1b0ccd2748d5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getTemplate(teamContext, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "fb10264a-8836-48a0-8033-1b0ccd2748d5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceTemplate(templateContent, teamContext, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              templateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "fb10264a-8836-48a0-8033-1b0ccd2748d5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, templateContent, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getUpdate(id, updateNumber, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id,
              updateNumber
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "6570bf97-d02c-4a91-8d93-3abe9895b1a9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getUpdates(id, top, skip, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              "$top": top,
              "$skip": skip
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "6570bf97-d02c-4a91-8d93-3abe9895b1a9", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryByWiql(wiql, teamContext, timePrecision, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team
            };
            let queryValues = {
              timePrecision,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "1a9c53f7-f243-4447-b110-35ef023636e4", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, wiql, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      queryById(id, teamContext, timePrecision, top) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let project = null;
            let team = null;
            if (teamContext) {
              project = teamContext.projectId || teamContext.project;
              team = teamContext.teamId || teamContext.team;
            }
            let routeValues = {
              project,
              team,
              id
            };
            let queryValues = {
              timePrecision,
              "$top": top
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "a02355f5-5f8a-4671-8e32-369d23aac83d", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemIconJson(icon, color, v) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              icon
            };
            let queryValues = {
              color,
              v
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "4e1eb4a5-1970-4228-a682-ec48eb2dca30", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemIcons() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "4e1eb4a5-1970-4228-a682-ec48eb2dca30", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemIconSvg(icon, color, v) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              icon
            };
            let queryValues = {
              color,
              v
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "4e1eb4a5-1970-4228-a682-ec48eb2dca30", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("image/svg+xml", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemIconXaml(icon, color, v) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              icon
            };
            let queryValues = {
              color,
              v
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "4e1eb4a5-1970-4228-a682-ec48eb2dca30", routeValues, queryValues);
              let url = verData.requestUrl;
              let apiVersion = verData.apiVersion;
              let accept = this.createAcceptHeader("image/xaml+xml", apiVersion);
              resolve((yield this.http.get(url, { "Accept": accept })).message);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getReportingLinksByLinkType(project, linkTypes, types, continuationToken, startDateTime) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              linkTypes: linkTypes && linkTypes.join(","),
              types: types && types.join(","),
              continuationToken,
              startDateTime
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "b5b5b6d0-0308-40a1-b3f4-b9bb3c66878f", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRelationType(relation) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              relation
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getRelationTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      readReportingRevisionsGet(project, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, expand, includeDiscussionChangesOnly, maxPageSize) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              fields: fields && fields.join(","),
              types: types && types.join(","),
              continuationToken,
              startDateTime,
              includeIdentityRef,
              includeDeleted,
              includeTagRef,
              includeLatestOnly,
              "$expand": expand,
              includeDiscussionChangesOnly,
              "$maxPageSize": maxPageSize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "f828fe59-dd87-495d-a17c-7a8d6211ca6c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      readReportingRevisionsPost(filter, project, continuationToken, startDateTime, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              continuationToken,
              startDateTime,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "f828fe59-dd87-495d-a17c-7a8d6211ca6c", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, filter, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      readReportingDiscussions(project, continuationToken, maxPageSize) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              continuationToken,
              "$maxPageSize": maxPageSize
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "4a644469-90c5-4fcc-9a9f-be0827d369ec", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createWorkItem(customHeaders, document, project, type, validateOnly, bypassRules, suppressNotifications, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            let queryValues = {
              validateOnly,
              bypassRules,
              suppressNotifications,
              "$expand": expand
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "62d3d110-0047-428c-ad3c-4fe872c91c74", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.create(url, document, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTemplate(project, type, fields, asOf, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            let queryValues = {
              fields,
              asOf,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "62d3d110-0047-428c-ad3c-4fe872c91c74", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteWorkItem(id, project, destroy) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              destroy
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItem(id, fields, asOf, expand, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              fields: fields && fields.join(","),
              asOf,
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItems(ids, fields, asOf, expand, errorPolicy, project) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            let queryValues = {
              ids: ids && ids.join(","),
              fields: fields && fields.join(","),
              asOf,
              "$expand": expand,
              errorPolicy
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItem(customHeaders, document, id, project, validateOnly, bypassRules, suppressNotifications, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              id
            };
            let queryValues = {
              validateOnly,
              bypassRules,
              suppressNotifications,
              "$expand": expand
            };
            customHeaders = customHeaders || {};
            customHeaders["Content-Type"] = "application/json-patch+json";
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              options.additionalHeaders = customHeaders;
              let res;
              res = yield this.rest.update(url, document, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemsBatch(workItemGetRequest, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "908509b6-4248-4475-a1cd-829139ba419f", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemGetRequest, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemStateColors(projectNames) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "0b83df8a-3496-4ddb-ba44-63634f4cda61", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, projectNames, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemNextStatesOnCheckinAction(ids, action) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ids == null) {
            throw new TypeError("ids can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              ids: ids && ids.join(","),
              action
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "afae844b-e2f6-44c2-8053-17b3bb936a40", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeCategories(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "9b9f5734-36c8-415e-ba67-f83b45c31408", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeCategory(project, category) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              category
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "9b9f5734-36c8-415e-ba67-f83b45c31408", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeColors(projectNames) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "958fde80-115e-43fb-bd65-749c48057faf", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, projectNames, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeColorAndIcons(projectNames) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "f0f8dc62-3975-48ce-8051-f636b68b52e3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, projectNames, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemType(project, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypes(project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "wit", "7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeFieldsWithReferences(project, type, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "bd293ce5-3d25-4192-8e67-e8092e879efb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeFieldWithReferences(project, type, field, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type,
              field
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.3", "wit", "bd293ce5-3d25-4192-8e67-e8092e879efb", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeStates(project, type) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "7c9d7a76-4a09-43e8-b5df-bd792f4ac6aa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      exportWorkItemTypeDefinition(project, type, exportGlobalLists) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project,
              type
            };
            let queryValues = {
              exportGlobalLists
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "8637ac8b-5eb6-4f90-b3f7-4f2ff576a459", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItemTypeDefinition(updateModel, project) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              project
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "wit", "8637ac8b-5eb6-4f90-b3f7-4f2ff576a459", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, updateModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    WorkItemTrackingApi.RESOURCE_AREA_ID = "5264459e-e5e0-4bd8-b118-0985e68a4ec5";
    exports.WorkItemTrackingApi = WorkItemTrackingApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessInterfaces.js
var require_WorkItemTrackingProcessInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CustomizationType;
    (function(CustomizationType2) {
      CustomizationType2[CustomizationType2["System"] = 1] = "System";
      CustomizationType2[CustomizationType2["Inherited"] = 2] = "Inherited";
      CustomizationType2[CustomizationType2["Custom"] = 3] = "Custom";
    })(CustomizationType = exports.CustomizationType || (exports.CustomizationType = {}));
    var FieldType;
    (function(FieldType2) {
      FieldType2[FieldType2["String"] = 1] = "String";
      FieldType2[FieldType2["Integer"] = 2] = "Integer";
      FieldType2[FieldType2["DateTime"] = 3] = "DateTime";
      FieldType2[FieldType2["PlainText"] = 5] = "PlainText";
      FieldType2[FieldType2["Html"] = 7] = "Html";
      FieldType2[FieldType2["TreePath"] = 8] = "TreePath";
      FieldType2[FieldType2["History"] = 9] = "History";
      FieldType2[FieldType2["Double"] = 10] = "Double";
      FieldType2[FieldType2["Guid"] = 11] = "Guid";
      FieldType2[FieldType2["Boolean"] = 12] = "Boolean";
      FieldType2[FieldType2["Identity"] = 13] = "Identity";
      FieldType2[FieldType2["PicklistInteger"] = 14] = "PicklistInteger";
      FieldType2[FieldType2["PicklistString"] = 15] = "PicklistString";
      FieldType2[FieldType2["PicklistDouble"] = 16] = "PicklistDouble";
    })(FieldType = exports.FieldType || (exports.FieldType = {}));
    var GetBehaviorsExpand;
    (function(GetBehaviorsExpand2) {
      GetBehaviorsExpand2[GetBehaviorsExpand2["None"] = 0] = "None";
      GetBehaviorsExpand2[GetBehaviorsExpand2["Fields"] = 1] = "Fields";
      GetBehaviorsExpand2[GetBehaviorsExpand2["CombinedFields"] = 2] = "CombinedFields";
    })(GetBehaviorsExpand = exports.GetBehaviorsExpand || (exports.GetBehaviorsExpand = {}));
    var GetProcessExpandLevel;
    (function(GetProcessExpandLevel2) {
      GetProcessExpandLevel2[GetProcessExpandLevel2["None"] = 0] = "None";
      GetProcessExpandLevel2[GetProcessExpandLevel2["Projects"] = 1] = "Projects";
    })(GetProcessExpandLevel = exports.GetProcessExpandLevel || (exports.GetProcessExpandLevel = {}));
    var GetWorkItemTypeExpand;
    (function(GetWorkItemTypeExpand2) {
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["None"] = 0] = "None";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["States"] = 1] = "States";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["Behaviors"] = 2] = "Behaviors";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["Layout"] = 4] = "Layout";
    })(GetWorkItemTypeExpand = exports.GetWorkItemTypeExpand || (exports.GetWorkItemTypeExpand = {}));
    var PageType;
    (function(PageType2) {
      PageType2[PageType2["Custom"] = 1] = "Custom";
      PageType2[PageType2["History"] = 2] = "History";
      PageType2[PageType2["Links"] = 3] = "Links";
      PageType2[PageType2["Attachments"] = 4] = "Attachments";
    })(PageType = exports.PageType || (exports.PageType = {}));
    var ProcessClass;
    (function(ProcessClass2) {
      ProcessClass2[ProcessClass2["System"] = 0] = "System";
      ProcessClass2[ProcessClass2["Derived"] = 1] = "Derived";
      ProcessClass2[ProcessClass2["Custom"] = 2] = "Custom";
    })(ProcessClass = exports.ProcessClass || (exports.ProcessClass = {}));
    var ProcessWorkItemTypeFieldsExpandLevel;
    (function(ProcessWorkItemTypeFieldsExpandLevel2) {
      ProcessWorkItemTypeFieldsExpandLevel2[ProcessWorkItemTypeFieldsExpandLevel2["None"] = 0] = "None";
      ProcessWorkItemTypeFieldsExpandLevel2[ProcessWorkItemTypeFieldsExpandLevel2["AllowedValues"] = 1] = "AllowedValues";
      ProcessWorkItemTypeFieldsExpandLevel2[ProcessWorkItemTypeFieldsExpandLevel2["All"] = 2] = "All";
    })(ProcessWorkItemTypeFieldsExpandLevel = exports.ProcessWorkItemTypeFieldsExpandLevel || (exports.ProcessWorkItemTypeFieldsExpandLevel = {}));
    var RuleActionType;
    (function(RuleActionType2) {
      RuleActionType2[RuleActionType2["MakeRequired"] = 1] = "MakeRequired";
      RuleActionType2[RuleActionType2["MakeReadOnly"] = 2] = "MakeReadOnly";
      RuleActionType2[RuleActionType2["SetDefaultValue"] = 3] = "SetDefaultValue";
      RuleActionType2[RuleActionType2["SetDefaultFromClock"] = 4] = "SetDefaultFromClock";
      RuleActionType2[RuleActionType2["SetDefaultFromCurrentUser"] = 5] = "SetDefaultFromCurrentUser";
      RuleActionType2[RuleActionType2["SetDefaultFromField"] = 6] = "SetDefaultFromField";
      RuleActionType2[RuleActionType2["CopyValue"] = 7] = "CopyValue";
      RuleActionType2[RuleActionType2["CopyFromClock"] = 8] = "CopyFromClock";
      RuleActionType2[RuleActionType2["CopyFromCurrentUser"] = 9] = "CopyFromCurrentUser";
      RuleActionType2[RuleActionType2["CopyFromField"] = 10] = "CopyFromField";
      RuleActionType2[RuleActionType2["SetValueToEmpty"] = 11] = "SetValueToEmpty";
      RuleActionType2[RuleActionType2["CopyFromServerClock"] = 12] = "CopyFromServerClock";
      RuleActionType2[RuleActionType2["CopyFromServerCurrentUser"] = 13] = "CopyFromServerCurrentUser";
      RuleActionType2[RuleActionType2["HideTargetField"] = 14] = "HideTargetField";
      RuleActionType2[RuleActionType2["DisallowValue"] = 15] = "DisallowValue";
    })(RuleActionType = exports.RuleActionType || (exports.RuleActionType = {}));
    var RuleConditionType;
    (function(RuleConditionType2) {
      RuleConditionType2[RuleConditionType2["When"] = 1] = "When";
      RuleConditionType2[RuleConditionType2["WhenNot"] = 2] = "WhenNot";
      RuleConditionType2[RuleConditionType2["WhenChanged"] = 3] = "WhenChanged";
      RuleConditionType2[RuleConditionType2["WhenNotChanged"] = 4] = "WhenNotChanged";
      RuleConditionType2[RuleConditionType2["WhenWas"] = 5] = "WhenWas";
      RuleConditionType2[RuleConditionType2["WhenStateChangedTo"] = 6] = "WhenStateChangedTo";
      RuleConditionType2[RuleConditionType2["WhenStateChangedFromAndTo"] = 7] = "WhenStateChangedFromAndTo";
      RuleConditionType2[RuleConditionType2["WhenWorkItemIsCreated"] = 8] = "WhenWorkItemIsCreated";
      RuleConditionType2[RuleConditionType2["WhenValueIsDefined"] = 9] = "WhenValueIsDefined";
      RuleConditionType2[RuleConditionType2["WhenValueIsNotDefined"] = 10] = "WhenValueIsNotDefined";
      RuleConditionType2[RuleConditionType2["WhenCurrentUserIsMemberOfGroup"] = 11] = "WhenCurrentUserIsMemberOfGroup";
      RuleConditionType2[RuleConditionType2["WhenCurrentUserIsNotMemberOfGroup"] = 12] = "WhenCurrentUserIsNotMemberOfGroup";
    })(RuleConditionType = exports.RuleConditionType || (exports.RuleConditionType = {}));
    var WorkItemTypeClass;
    (function(WorkItemTypeClass2) {
      WorkItemTypeClass2[WorkItemTypeClass2["System"] = 0] = "System";
      WorkItemTypeClass2[WorkItemTypeClass2["Derived"] = 1] = "Derived";
      WorkItemTypeClass2[WorkItemTypeClass2["Custom"] = 2] = "Custom";
    })(WorkItemTypeClass = exports.WorkItemTypeClass || (exports.WorkItemTypeClass = {}));
    exports.TypeInfo = {
      CreateProcessRuleRequest: {},
      CustomizationType: {
        enumValues: {
          "system": 1,
          "inherited": 2,
          "custom": 3
        }
      },
      FieldModel: {},
      FieldType: {
        enumValues: {
          "string": 1,
          "integer": 2,
          "dateTime": 3,
          "plainText": 5,
          "html": 7,
          "treePath": 8,
          "history": 9,
          "double": 10,
          "guid": 11,
          "boolean": 12,
          "identity": 13,
          "picklistInteger": 14,
          "picklistString": 15,
          "picklistDouble": 16
        }
      },
      FormLayout: {},
      GetBehaviorsExpand: {
        enumValues: {
          "none": 0,
          "fields": 1,
          "combinedFields": 2
        }
      },
      GetProcessExpandLevel: {
        enumValues: {
          "none": 0,
          "projects": 1
        }
      },
      GetWorkItemTypeExpand: {
        enumValues: {
          "none": 0,
          "states": 1,
          "behaviors": 2,
          "layout": 4
        }
      },
      Page: {},
      PageType: {
        enumValues: {
          "custom": 1,
          "history": 2,
          "links": 3,
          "attachments": 4
        }
      },
      ProcessBehavior: {},
      ProcessClass: {
        enumValues: {
          "system": 0,
          "derived": 1,
          "custom": 2
        }
      },
      ProcessInfo: {},
      ProcessModel: {},
      ProcessProperties: {},
      ProcessRule: {},
      ProcessWorkItemType: {},
      ProcessWorkItemTypeField: {},
      ProcessWorkItemTypeFieldsExpandLevel: {
        enumValues: {
          "none": 0,
          "allowedValues": 1,
          "all": 2
        }
      },
      RuleAction: {},
      RuleActionType: {
        enumValues: {
          "makeRequired": 1,
          "makeReadOnly": 2,
          "setDefaultValue": 3,
          "setDefaultFromClock": 4,
          "setDefaultFromCurrentUser": 5,
          "setDefaultFromField": 6,
          "copyValue": 7,
          "copyFromClock": 8,
          "copyFromCurrentUser": 9,
          "copyFromField": 10,
          "setValueToEmpty": 11,
          "copyFromServerClock": 12,
          "copyFromServerCurrentUser": 13,
          "hideTargetField": 14,
          "disallowValue": 15
        }
      },
      RuleCondition: {},
      RuleConditionType: {
        enumValues: {
          "when": 1,
          "whenNot": 2,
          "whenChanged": 3,
          "whenNotChanged": 4,
          "whenWas": 5,
          "whenStateChangedTo": 6,
          "whenStateChangedFromAndTo": 7,
          "whenWorkItemIsCreated": 8,
          "whenValueIsDefined": 9,
          "whenValueIsNotDefined": 10,
          "whenCurrentUserIsMemberOfGroup": 11,
          "whenCurrentUserIsNotMemberOfGroup": 12
        }
      },
      UpdateProcessRuleRequest: {},
      WorkItemStateResultModel: {},
      WorkItemTypeClass: {
        enumValues: {
          "system": 0,
          "derived": 1,
          "custom": 2
        }
      },
      WorkItemTypeModel: {}
    };
    exports.TypeInfo.CreateProcessRuleRequest.fields = {
      actions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleAction
      },
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleCondition
      }
    };
    exports.TypeInfo.FieldModel.fields = {
      type: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.FormLayout.fields = {
      pages: {
        isArray: true,
        typeInfo: exports.TypeInfo.Page
      }
    };
    exports.TypeInfo.Page.fields = {
      pageType: {
        enumType: exports.TypeInfo.PageType
      }
    };
    exports.TypeInfo.ProcessBehavior.fields = {
      customization: {
        enumType: exports.TypeInfo.CustomizationType
      }
    };
    exports.TypeInfo.ProcessInfo.fields = {
      customizationType: {
        enumType: exports.TypeInfo.CustomizationType
      }
    };
    exports.TypeInfo.ProcessModel.fields = {
      properties: {
        typeInfo: exports.TypeInfo.ProcessProperties
      }
    };
    exports.TypeInfo.ProcessProperties.fields = {
      class: {
        enumType: exports.TypeInfo.ProcessClass
      }
    };
    exports.TypeInfo.ProcessRule.fields = {
      actions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleAction
      },
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleCondition
      },
      customizationType: {
        enumType: exports.TypeInfo.CustomizationType
      }
    };
    exports.TypeInfo.ProcessWorkItemType.fields = {
      customization: {
        enumType: exports.TypeInfo.CustomizationType
      },
      layout: {
        typeInfo: exports.TypeInfo.FormLayout
      },
      states: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkItemStateResultModel
      }
    };
    exports.TypeInfo.ProcessWorkItemTypeField.fields = {
      customization: {
        enumType: exports.TypeInfo.CustomizationType
      },
      type: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.RuleAction.fields = {
      actionType: {
        enumType: exports.TypeInfo.RuleActionType
      }
    };
    exports.TypeInfo.RuleCondition.fields = {
      conditionType: {
        enumType: exports.TypeInfo.RuleConditionType
      }
    };
    exports.TypeInfo.UpdateProcessRuleRequest.fields = {
      actions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleAction
      },
      conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.RuleCondition
      }
    };
    exports.TypeInfo.WorkItemStateResultModel.fields = {
      customizationType: {
        enumType: exports.TypeInfo.CustomizationType
      }
    };
    exports.TypeInfo.WorkItemTypeModel.fields = {
      class: {
        enumType: exports.TypeInfo.WorkItemTypeClass
      },
      layout: {
        typeInfo: exports.TypeInfo.FormLayout
      },
      states: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkItemStateResultModel
      }
    };
  }
});

// node_modules/azure-devops-node-api/WorkItemTrackingProcessApi.js
var require_WorkItemTrackingProcessApi = __commonJS({
  "node_modules/azure-devops-node-api/WorkItemTrackingProcessApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var WorkItemTrackingProcessInterfaces = require_WorkItemTrackingProcessInterfaces();
    var WorkItemTrackingProcessApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-WorkItemTracking-api", options);
      }
      createProcessBehavior(behavior, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "d1800200-f184-4e75-a5f2-ad0b04b4373e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, behavior, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteProcessBehavior(processId, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "d1800200-f184-4e75-a5f2-ad0b04b4373e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessBehavior(processId, behaviorRefName, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorRefName
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "d1800200-f184-4e75-a5f2-ad0b04b4373e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessBehaviors(processId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "d1800200-f184-4e75-a5f2-ad0b04b4373e", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateProcessBehavior(behaviorData, processId, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "d1800200-f184-4e75-a5f2-ad0b04b4373e", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, behaviorData, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createControlInGroup(control, processId, witRefName, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      moveControlToGroup(control, processId, witRefName, groupId, controlId, removeFromGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            let queryValues = {
              removeFromGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeControlFromGroup(processId, witRefName, groupId, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateControl(control, processId, witRefName, groupId, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addFieldToWorkItemType(field, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "bc0ad8dc-e3f3-46b0-b06c-5bf861793196", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getAllWorkItemTypeFields(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "bc0ad8dc-e3f3-46b0-b06c-5bf861793196", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeField(processId, witRefName, fieldRefName, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              fieldRefName
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "bc0ad8dc-e3f3-46b0-b06c-5bf861793196", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeWorkItemTypeField(processId, witRefName, fieldRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              fieldRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "bc0ad8dc-e3f3-46b0-b06c-5bf861793196", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItemTypeField(field, processId, witRefName, fieldRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              fieldRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "bc0ad8dc-e3f3-46b0-b06c-5bf861793196", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addGroup(group, processId, witRefName, pageId, sectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "766e44e1-36a8-41d7-9050-c343ff02f7a5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      moveGroupToPage(group, processId, witRefName, pageId, sectionId, groupId, removeFromPageId, removeFromSectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (removeFromPageId == null) {
            throw new TypeError("removeFromPageId can not be null or undefined");
          }
          if (removeFromSectionId == null) {
            throw new TypeError("removeFromSectionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            let queryValues = {
              removeFromPageId,
              removeFromSectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "766e44e1-36a8-41d7-9050-c343ff02f7a5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      moveGroupToSection(group, processId, witRefName, pageId, sectionId, groupId, removeFromSectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (removeFromSectionId == null) {
            throw new TypeError("removeFromSectionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            let queryValues = {
              removeFromSectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "766e44e1-36a8-41d7-9050-c343ff02f7a5", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeGroup(processId, witRefName, pageId, sectionId, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "766e44e1-36a8-41d7-9050-c343ff02f7a5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateGroup(group, processId, witRefName, pageId, sectionId, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "766e44e1-36a8-41d7-9050-c343ff02f7a5", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFormLayout(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "fa8646eb-43cd-4b71-9564-40106fd63e40", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.FormLayout, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createList(picklist) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "01e15468-e27c-4e20-a974-bd957dcccebc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, picklist, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteList(listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "01e15468-e27c-4e20-a974-bd957dcccebc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getList(listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "01e15468-e27c-4e20-a974-bd957dcccebc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getListsMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "01e15468-e27c-4e20-a974-bd957dcccebc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateList(picklist, listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "01e15468-e27c-4e20-a974-bd957dcccebc", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, picklist, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addPage(page, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1cc7b29f-6697-4d9d-b0a1-2650d3e1d584", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, page, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.Page, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removePage(processId, witRefName, pageId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1cc7b29f-6697-4d9d-b0a1-2650d3e1d584", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updatePage(page, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "1cc7b29f-6697-4d9d-b0a1-2650d3e1d584", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, page, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.Page, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createNewProcess(createRequest) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "02cc6a73-5cfb-427d-8c8e-b49fb086e8af", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, createRequest, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteProcessById(processTypeId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processTypeId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "02cc6a73-5cfb-427d-8c8e-b49fb086e8af", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      editProcess(updateRequest, processTypeId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processTypeId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "02cc6a73-5cfb-427d-8c8e-b49fb086e8af", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, updateRequest, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getListOfProcesses(expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "02cc6a73-5cfb-427d-8c8e-b49fb086e8af", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessByItsId(processTypeId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processTypeId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "02cc6a73-5cfb-427d-8c8e-b49fb086e8af", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addProcessWorkItemTypeRule(processRuleCreate, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "76fe3432-d825-479d-a5f6-983bbb78b4f3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, processRuleCreate, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteProcessWorkItemTypeRule(processId, witRefName, ruleId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              ruleId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "76fe3432-d825-479d-a5f6-983bbb78b4f3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessWorkItemTypeRule(processId, witRefName, ruleId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              ruleId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "76fe3432-d825-479d-a5f6-983bbb78b4f3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessWorkItemTypeRules(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "76fe3432-d825-479d-a5f6-983bbb78b4f3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateProcessWorkItemTypeRule(processRule, processId, witRefName, ruleId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              ruleId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "76fe3432-d825-479d-a5f6-983bbb78b4f3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, processRule, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createStateDefinition(stateModel, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, stateModel, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteStateDefinition(processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStateDefinition(processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStateDefinitions(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      hideStateDefinition(hideStateModel, processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, hideStateModel, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateStateDefinition(stateModel, processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "31015d57-2dff-4a46-adb3-2fb4ee3dcec9", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, stateModel, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteSystemControl(processId, witRefName, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "ff9a3d2c-32b7-4c6c-991c-d5a251fb9098", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getSystemControls(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "ff9a3d2c-32b7-4c6c-991c-d5a251fb9098", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateSystemControl(control, processId, witRefName, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "ff9a3d2c-32b7-4c6c-991c-d5a251fb9098", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createProcessWorkItemType(workItemType, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "e2e9d1a6-432d-4062-8870-bfcb8c324ad7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemType, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteProcessWorkItemType(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "e2e9d1a6-432d-4062-8870-bfcb8c324ad7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessWorkItemType(processId, witRefName, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "e2e9d1a6-432d-4062-8870-bfcb8c324ad7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getProcessWorkItemTypes(processId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "e2e9d1a6-432d-4062-8870-bfcb8c324ad7", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateProcessWorkItemType(workItemTypeUpdate, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.2", "processes", "e2e9d1a6-432d-4062-8870-bfcb8c324ad7", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, workItemTypeUpdate, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "6d765a2e-4e1b-4b11-be93-f953be676024", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, behavior, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehaviorForWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "6d765a2e-4e1b-4b11-be93-f953be676024", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehaviorsForWorkItemType(processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "6d765a2e-4e1b-4b11-be93-f953be676024", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeBehaviorFromWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "6d765a2e-4e1b-4b11-be93-f953be676024", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processes", "6d765a2e-4e1b-4b11-be93-f953be676024", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, behavior, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    WorkItemTrackingProcessApi.RESOURCE_AREA_ID = "5264459e-e5e0-4bd8-b118-0985e68a4ec5";
    exports.WorkItemTrackingProcessApi = WorkItemTrackingProcessApi;
  }
});

// node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessDefinitionsInterfaces.js
var require_WorkItemTrackingProcessDefinitionsInterfaces = __commonJS({
  "node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessDefinitionsInterfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FieldType;
    (function(FieldType2) {
      FieldType2[FieldType2["String"] = 1] = "String";
      FieldType2[FieldType2["Integer"] = 2] = "Integer";
      FieldType2[FieldType2["DateTime"] = 3] = "DateTime";
      FieldType2[FieldType2["PlainText"] = 5] = "PlainText";
      FieldType2[FieldType2["Html"] = 7] = "Html";
      FieldType2[FieldType2["TreePath"] = 8] = "TreePath";
      FieldType2[FieldType2["History"] = 9] = "History";
      FieldType2[FieldType2["Double"] = 10] = "Double";
      FieldType2[FieldType2["Guid"] = 11] = "Guid";
      FieldType2[FieldType2["Boolean"] = 12] = "Boolean";
      FieldType2[FieldType2["Identity"] = 13] = "Identity";
      FieldType2[FieldType2["PicklistInteger"] = 14] = "PicklistInteger";
      FieldType2[FieldType2["PicklistString"] = 15] = "PicklistString";
      FieldType2[FieldType2["PicklistDouble"] = 16] = "PicklistDouble";
    })(FieldType = exports.FieldType || (exports.FieldType = {}));
    var GetWorkItemTypeExpand;
    (function(GetWorkItemTypeExpand2) {
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["None"] = 0] = "None";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["States"] = 1] = "States";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["Behaviors"] = 2] = "Behaviors";
      GetWorkItemTypeExpand2[GetWorkItemTypeExpand2["Layout"] = 4] = "Layout";
    })(GetWorkItemTypeExpand = exports.GetWorkItemTypeExpand || (exports.GetWorkItemTypeExpand = {}));
    var PageType;
    (function(PageType2) {
      PageType2[PageType2["Custom"] = 1] = "Custom";
      PageType2[PageType2["History"] = 2] = "History";
      PageType2[PageType2["Links"] = 3] = "Links";
      PageType2[PageType2["Attachments"] = 4] = "Attachments";
    })(PageType = exports.PageType || (exports.PageType = {}));
    var WorkItemTypeClass;
    (function(WorkItemTypeClass2) {
      WorkItemTypeClass2[WorkItemTypeClass2["System"] = 0] = "System";
      WorkItemTypeClass2[WorkItemTypeClass2["Derived"] = 1] = "Derived";
      WorkItemTypeClass2[WorkItemTypeClass2["Custom"] = 2] = "Custom";
    })(WorkItemTypeClass = exports.WorkItemTypeClass || (exports.WorkItemTypeClass = {}));
    exports.TypeInfo = {
      FieldModel: {},
      FieldType: {
        enumValues: {
          "string": 1,
          "integer": 2,
          "dateTime": 3,
          "plainText": 5,
          "html": 7,
          "treePath": 8,
          "history": 9,
          "double": 10,
          "guid": 11,
          "boolean": 12,
          "identity": 13,
          "picklistInteger": 14,
          "picklistString": 15,
          "picklistDouble": 16
        }
      },
      FormLayout: {},
      GetWorkItemTypeExpand: {
        enumValues: {
          "none": 0,
          "states": 1,
          "behaviors": 2,
          "layout": 4
        }
      },
      Page: {},
      PageType: {
        enumValues: {
          "custom": 1,
          "history": 2,
          "links": 3,
          "attachments": 4
        }
      },
      WorkItemTypeClass: {
        enumValues: {
          "system": 0,
          "derived": 1,
          "custom": 2
        }
      },
      WorkItemTypeFieldModel: {},
      WorkItemTypeFieldModel2: {},
      WorkItemTypeModel: {}
    };
    exports.TypeInfo.FieldModel.fields = {
      type: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.FormLayout.fields = {
      pages: {
        isArray: true,
        typeInfo: exports.TypeInfo.Page
      }
    };
    exports.TypeInfo.Page.fields = {
      pageType: {
        enumType: exports.TypeInfo.PageType
      }
    };
    exports.TypeInfo.WorkItemTypeFieldModel.fields = {
      type: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.WorkItemTypeFieldModel2.fields = {
      type: {
        enumType: exports.TypeInfo.FieldType
      }
    };
    exports.TypeInfo.WorkItemTypeModel.fields = {
      class: {
        enumType: exports.TypeInfo.WorkItemTypeClass
      },
      layout: {
        typeInfo: exports.TypeInfo.FormLayout
      }
    };
  }
});

// node_modules/azure-devops-node-api/WorkItemTrackingProcessDefinitionsApi.js
var require_WorkItemTrackingProcessDefinitionsApi = __commonJS({
  "node_modules/azure-devops-node-api/WorkItemTrackingProcessDefinitionsApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var basem = require_ClientApiBases();
    var WorkItemTrackingProcessDefinitionsInterfaces = require_WorkItemTrackingProcessDefinitionsInterfaces();
    var WorkItemTrackingProcessDefinitionsApi = class extends basem.ClientApiBase {
      constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, "node-WorkItemTracking-api", options);
      }
      createBehavior(behavior, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "47a651f4-fb70-43bf-b96b-7c0ba947142b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, behavior, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteBehavior(processId, behaviorId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "47a651f4-fb70-43bf-b96b-7c0ba947142b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehavior(processId, behaviorId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "47a651f4-fb70-43bf-b96b-7c0ba947142b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehaviors(processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "47a651f4-fb70-43bf-b96b-7c0ba947142b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      replaceBehavior(behaviorData, processId, behaviorId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              behaviorId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "47a651f4-fb70-43bf-b96b-7c0ba947142b", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, behaviorData, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addControlToGroup(control, processId, witRefName, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "e2e3166a-627a-4e9b-85b2-d6a097bbd731", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      editControl(control, processId, witRefName, groupId, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "e2e3166a-627a-4e9b-85b2-d6a097bbd731", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeControlFromGroup(processId, witRefName, groupId, controlId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "e2e3166a-627a-4e9b-85b2-d6a097bbd731", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setControlInGroup(control, processId, witRefName, groupId, controlId, removeFromGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              groupId,
              controlId
            };
            let queryValues = {
              removeFromGroupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "e2e3166a-627a-4e9b-85b2-d6a097bbd731", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, control, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createField(field, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "f36c66c7-911d-4163-8938-d3c5d0d7f5aa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FieldModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateField(field, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "f36c66c7-911d-4163-8938-d3c5d0d7f5aa", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FieldModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addGroup(group, processId, witRefName, pageId, sectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "2617828b-e850-4375-a92a-04855704d4c3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      editGroup(group, processId, witRefName, pageId, sectionId, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "2617828b-e850-4375-a92a-04855704d4c3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeGroup(processId, witRefName, pageId, sectionId, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "2617828b-e850-4375-a92a-04855704d4c3", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setGroupInPage(group, processId, witRefName, pageId, sectionId, groupId, removeFromPageId, removeFromSectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (removeFromPageId == null) {
            throw new TypeError("removeFromPageId can not be null or undefined");
          }
          if (removeFromSectionId == null) {
            throw new TypeError("removeFromSectionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            let queryValues = {
              removeFromPageId,
              removeFromSectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "2617828b-e850-4375-a92a-04855704d4c3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      setGroupInSection(group, processId, witRefName, pageId, sectionId, groupId, removeFromSectionId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (removeFromSectionId == null) {
            throw new TypeError("removeFromSectionId can not be null or undefined");
          }
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId,
              sectionId,
              groupId
            };
            let queryValues = {
              removeFromSectionId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "2617828b-e850-4375-a92a-04855704d4c3", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, group, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getFormLayout(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "3eacc80a-ddca-4404-857a-6331aac99063", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FormLayout, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getListsMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "b45cc931-98e3-44a1-b1cd-2e8e9c6dc1c6", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createList(picklist) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {};
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "0b6179e2-23ce-46b2-b094-2ffa5ee70286", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, picklist, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteList(listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "0b6179e2-23ce-46b2-b094-2ffa5ee70286", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getList(listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "0b6179e2-23ce-46b2-b094-2ffa5ee70286", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateList(picklist, listId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              listId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "0b6179e2-23ce-46b2-b094-2ffa5ee70286", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, picklist, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addPage(page, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1b4ac126-59b2-4f37-b4df-0a48ba807edb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, page, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.Page, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      editPage(page, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1b4ac126-59b2-4f37-b4df-0a48ba807edb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, page, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.Page, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removePage(processId, witRefName, pageId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              pageId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1b4ac126-59b2-4f37-b4df-0a48ba807edb", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createStateDefinition(stateModel, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, stateModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteStateDefinition(processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStateDefinition(processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getStateDefinitions(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      hideStateDefinition(hideStateModel, processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.replace(url, hideStateModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateStateDefinition(stateModel, processId, witRefName, stateId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName,
              stateId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "4303625d-08f4-4461-b14b-32c65bba5599", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, stateModel, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "921dfb88-ef57-4c69-94e5-dd7da2d7031d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, behavior, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehaviorForWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "921dfb88-ef57-4c69-94e5-dd7da2d7031d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBehaviorsForWorkItemType(processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "921dfb88-ef57-4c69-94e5-dd7da2d7031d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, null, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeBehaviorFromWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors,
              behaviorRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "921dfb88-ef57-4c69-94e5-dd7da2d7031d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForBehaviors
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "921dfb88-ef57-4c69-94e5-dd7da2d7031d", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, behavior, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      createWorkItemType(workItemType, processId) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1ce0acad-4638-49c3-969c-04aa65ba6bea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, workItemType, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      deleteWorkItemType(processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1ce0acad-4638-49c3-969c-04aa65ba6bea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemType(processId, witRefName, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1ce0acad-4638-49c3-969c-04aa65ba6bea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypes(processId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId
            };
            let queryValues = {
              "$expand": expand
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1ce0acad-4638-49c3-969c-04aa65ba6bea", routeValues, queryValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItemType(workItemTypeUpdate, processId, witRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "1ce0acad-4638-49c3-969c-04aa65ba6bea", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, workItemTypeUpdate, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      addFieldToWorkItemType(field, processId, witRefNameForFields) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForFields
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "976713b4-a62e-499e-94dc-eeb869ea9126", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.create(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeField(processId, witRefNameForFields, fieldRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForFields,
              fieldRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "976713b4-a62e-499e-94dc-eeb869ea9126", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getWorkItemTypeFields(processId, witRefNameForFields) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForFields
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "976713b4-a62e-499e-94dc-eeb869ea9126", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.get(url, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, true);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      removeFieldFromWorkItemType(processId, witRefNameForFields, fieldRefName) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForFields,
              fieldRefName
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "976713b4-a62e-499e-94dc-eeb869ea9126", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.del(url, options);
              let ret = this.formatResponse(res.result, null, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      updateWorkItemTypeField(field, processId, witRefNameForFields) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let routeValues = {
              processId,
              witRefNameForFields
            };
            try {
              let verData = yield this.vsoClient.getVersioningData("6.1-preview.1", "processDefinitions", "976713b4-a62e-499e-94dc-eeb869ea9126", routeValues);
              let url = verData.requestUrl;
              let options = this.createRequestOptions("application/json", verData.apiVersion);
              let res;
              res = yield this.rest.update(url, field, options);
              let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);
              resolve(ret);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
    };
    WorkItemTrackingProcessDefinitionsApi.RESOURCE_AREA_ID = "5264459e-e5e0-4bd8-b118-0985e68a4ec5";
    exports.WorkItemTrackingProcessDefinitionsApi = WorkItemTrackingProcessDefinitionsApi;
  }
});

// node_modules/typed-rest-client/handlers/basiccreds.js
var require_basiccreds = __commonJS({
  "node_modules/typed-rest-client/handlers/basiccreds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BasicCredentialHandler = class {
      constructor(username, password, allowCrossOriginAuthentication) {
        this.username = username;
        this.password = password;
        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;
      }
      prepareRequest(options) {
        if (!this.origin) {
          this.origin = options.host;
        }
        if (this.origin === options.host || this.allowCrossOriginAuthentication) {
          options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
        }
        options.headers["X-TFS-FedAuthRedirect"] = "Suppress";
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
  }
});

// node_modules/typed-rest-client/handlers/bearertoken.js
var require_bearertoken = __commonJS({
  "node_modules/typed-rest-client/handlers/bearertoken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BearerCredentialHandler = class {
      constructor(token, allowCrossOriginAuthentication) {
        this.token = token;
        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;
      }
      prepareRequest(options) {
        if (!this.origin) {
          this.origin = options.host;
        }
        if (this.origin === options.host || this.allowCrossOriginAuthentication) {
          options.headers["Authorization"] = `Bearer ${this.token}`;
        }
        options.headers["X-TFS-FedAuthRedirect"] = "Suppress";
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
  }
});

// node_modules/underscore/underscore-node-f.cjs
var require_underscore_node_f = __commonJS({
  "node_modules/underscore/underscore-node-f.cjs"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION = "1.13.2";
    var root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
    var ArrayProto = Array.prototype;
    var ObjProto = Object.prototype;
    var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
    var push = ArrayProto.push;
    var slice = ArrayProto.slice;
    var toString = ObjProto.toString;
    var hasOwnProperty = ObjProto.hasOwnProperty;
    var supportsArrayBuffer = typeof ArrayBuffer !== "undefined";
    var supportsDataView = typeof DataView !== "undefined";
    var nativeIsArray = Array.isArray;
    var nativeKeys = Object.keys;
    var nativeCreate = Object.create;
    var nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
    var _isNaN = isNaN;
    var _isFinite = isFinite;
    var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
    var nonEnumerableProps = [
      "valueOf",
      "isPrototypeOf",
      "toString",
      "propertyIsEnumerable",
      "hasOwnProperty",
      "toLocaleString"
    ];
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    function restArguments(func, startIndex) {
      startIndex = startIndex == null ? func.length - 1 : +startIndex;
      return function() {
        var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
        for (; index < length; index++) {
          rest2[index] = arguments[index + startIndex];
        }
        switch (startIndex) {
          case 0:
            return func.call(this, rest2);
          case 1:
            return func.call(this, arguments[0], rest2);
          case 2:
            return func.call(this, arguments[0], arguments[1], rest2);
        }
        var args = Array(startIndex + 1);
        for (index = 0; index < startIndex; index++) {
          args[index] = arguments[index];
        }
        args[startIndex] = rest2;
        return func.apply(this, args);
      };
    }
    function isObject(obj) {
      var type = typeof obj;
      return type === "function" || type === "object" && !!obj;
    }
    function isNull(obj) {
      return obj === null;
    }
    function isUndefined(obj) {
      return obj === void 0;
    }
    function isBoolean(obj) {
      return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
    }
    function isElement(obj) {
      return !!(obj && obj.nodeType === 1);
    }
    function tagTester(name) {
      var tag = "[object " + name + "]";
      return function(obj) {
        return toString.call(obj) === tag;
      };
    }
    var isString = tagTester("String");
    var isNumber = tagTester("Number");
    var isDate = tagTester("Date");
    var isRegExp = tagTester("RegExp");
    var isError = tagTester("Error");
    var isSymbol = tagTester("Symbol");
    var isArrayBuffer = tagTester("ArrayBuffer");
    var isFunction = tagTester("Function");
    var nodelist = root.document && root.document.childNodes;
    if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
      isFunction = function(obj) {
        return typeof obj == "function" || false;
      };
    }
    var isFunction$1 = isFunction;
    var hasObjectTag = tagTester("Object");
    var hasStringTagBug = supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)));
    var isIE11 = typeof Map !== "undefined" && hasObjectTag(/* @__PURE__ */ new Map());
    var isDataView = tagTester("DataView");
    function ie10IsDataView(obj) {
      return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
    }
    var isDataView$1 = hasStringTagBug ? ie10IsDataView : isDataView;
    var isArray = nativeIsArray || tagTester("Array");
    function has$1(obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    }
    var isArguments = tagTester("Arguments");
    (function() {
      if (!isArguments(arguments)) {
        isArguments = function(obj) {
          return has$1(obj, "callee");
        };
      }
    })();
    var isArguments$1 = isArguments;
    function isFinite$1(obj) {
      return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
    }
    function isNaN$1(obj) {
      return isNumber(obj) && _isNaN(obj);
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    function createSizePropertyCheck(getSizeProperty) {
      return function(collection) {
        var sizeProperty = getSizeProperty(collection);
        return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
      };
    }
    function shallowProperty(key) {
      return function(obj) {
        return obj == null ? void 0 : obj[key];
      };
    }
    var getByteLength = shallowProperty("byteLength");
    var isBufferLike = createSizePropertyCheck(getByteLength);
    var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
    function isTypedArray(obj) {
      return nativeIsView ? nativeIsView(obj) && !isDataView$1(obj) : isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
    }
    var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
    var getLength = shallowProperty("length");
    function emulatedSet(keys2) {
      var hash = {};
      for (var l = keys2.length, i = 0; i < l; ++i)
        hash[keys2[i]] = true;
      return {
        contains: function(key) {
          return hash[key] === true;
        },
        push: function(key) {
          hash[key] = true;
          return keys2.push(key);
        }
      };
    }
    function collectNonEnumProps(obj, keys2) {
      keys2 = emulatedSet(keys2);
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = isFunction$1(constructor) && constructor.prototype || ObjProto;
      var prop = "constructor";
      if (has$1(obj, prop) && !keys2.contains(prop))
        keys2.push(prop);
      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];
        if (prop in obj && obj[prop] !== proto[prop] && !keys2.contains(prop)) {
          keys2.push(prop);
        }
      }
    }
    function keys(obj) {
      if (!isObject(obj))
        return [];
      if (nativeKeys)
        return nativeKeys(obj);
      var keys2 = [];
      for (var key in obj)
        if (has$1(obj, key))
          keys2.push(key);
      if (hasEnumBug)
        collectNonEnumProps(obj, keys2);
      return keys2;
    }
    function isEmpty(obj) {
      if (obj == null)
        return true;
      var length = getLength(obj);
      if (typeof length == "number" && (isArray(obj) || isString(obj) || isArguments$1(obj)))
        return length === 0;
      return getLength(keys(obj)) === 0;
    }
    function isMatch(object2, attrs) {
      var _keys = keys(attrs), length = _keys.length;
      if (object2 == null)
        return !length;
      var obj = Object(object2);
      for (var i = 0; i < length; i++) {
        var key = _keys[i];
        if (attrs[key] !== obj[key] || !(key in obj))
          return false;
      }
      return true;
    }
    function _$1(obj) {
      if (obj instanceof _$1)
        return obj;
      if (!(this instanceof _$1))
        return new _$1(obj);
      this._wrapped = obj;
    }
    _$1.VERSION = VERSION;
    _$1.prototype.value = function() {
      return this._wrapped;
    };
    _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;
    _$1.prototype.toString = function() {
      return String(this._wrapped);
    };
    function toBufferView(bufferSource) {
      return new Uint8Array(bufferSource.buffer || bufferSource, bufferSource.byteOffset || 0, getByteLength(bufferSource));
    }
    var tagDataView = "[object DataView]";
    function eq(a, b, aStack, bStack) {
      if (a === b)
        return a !== 0 || 1 / a === 1 / b;
      if (a == null || b == null)
        return false;
      if (a !== a)
        return b !== b;
      var type = typeof a;
      if (type !== "function" && type !== "object" && typeof b != "object")
        return false;
      return deepEq(a, b, aStack, bStack);
    }
    function deepEq(a, b, aStack, bStack) {
      if (a instanceof _$1)
        a = a._wrapped;
      if (b instanceof _$1)
        b = b._wrapped;
      var className = toString.call(a);
      if (className !== toString.call(b))
        return false;
      if (hasStringTagBug && className == "[object Object]" && isDataView$1(a)) {
        if (!isDataView$1(b))
          return false;
        className = tagDataView;
      }
      switch (className) {
        case "[object RegExp]":
        case "[object String]":
          return "" + a === "" + b;
        case "[object Number]":
          if (+a !== +a)
            return +b !== +b;
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a === +b;
        case "[object Symbol]":
          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        case "[object ArrayBuffer]":
        case tagDataView:
          return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
      }
      var areArrays = className === "[object Array]";
      if (!areArrays && isTypedArray$1(a)) {
        var byteLength = getByteLength(a);
        if (byteLength !== getByteLength(b))
          return false;
        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset)
          return true;
        areArrays = true;
      }
      if (!areArrays) {
        if (typeof a != "object" || typeof b != "object")
          return false;
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
          return false;
        }
      }
      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;
      while (length--) {
        if (aStack[length] === a)
          return bStack[length] === b;
      }
      aStack.push(a);
      bStack.push(b);
      if (areArrays) {
        length = a.length;
        if (length !== b.length)
          return false;
        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack))
            return false;
        }
      } else {
        var _keys = keys(a), key;
        length = _keys.length;
        if (keys(b).length !== length)
          return false;
        while (length--) {
          key = _keys[length];
          if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack)))
            return false;
        }
      }
      aStack.pop();
      bStack.pop();
      return true;
    }
    function isEqual(a, b) {
      return eq(a, b);
    }
    function allKeys(obj) {
      if (!isObject(obj))
        return [];
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      if (hasEnumBug)
        collectNonEnumProps(obj, keys2);
      return keys2;
    }
    function ie11fingerprint(methods) {
      var length = getLength(methods);
      return function(obj) {
        if (obj == null)
          return false;
        var keys2 = allKeys(obj);
        if (getLength(keys2))
          return false;
        for (var i = 0; i < length; i++) {
          if (!isFunction$1(obj[methods[i]]))
            return false;
        }
        return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
      };
    }
    var forEachName = "forEach";
    var hasName = "has";
    var commonInit = ["clear", "delete"];
    var mapTail = ["get", hasName, "set"];
    var mapMethods = commonInit.concat(forEachName, mapTail);
    var weakMapMethods = commonInit.concat(mapTail);
    var setMethods = ["add"].concat(commonInit, forEachName, hasName);
    var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");
    var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");
    var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");
    var isWeakSet = tagTester("WeakSet");
    function values(obj) {
      var _keys = keys(obj);
      var length = _keys.length;
      var values2 = Array(length);
      for (var i = 0; i < length; i++) {
        values2[i] = obj[_keys[i]];
      }
      return values2;
    }
    function pairs(obj) {
      var _keys = keys(obj);
      var length = _keys.length;
      var pairs2 = Array(length);
      for (var i = 0; i < length; i++) {
        pairs2[i] = [_keys[i], obj[_keys[i]]];
      }
      return pairs2;
    }
    function invert(obj) {
      var result2 = {};
      var _keys = keys(obj);
      for (var i = 0, length = _keys.length; i < length; i++) {
        result2[obj[_keys[i]]] = _keys[i];
      }
      return result2;
    }
    function functions(obj) {
      var names = [];
      for (var key in obj) {
        if (isFunction$1(obj[key]))
          names.push(key);
      }
      return names.sort();
    }
    function createAssigner(keysFunc, defaults2) {
      return function(obj) {
        var length = arguments.length;
        if (defaults2)
          obj = Object(obj);
        if (length < 2 || obj == null)
          return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
          for (var i = 0; i < l; i++) {
            var key = keys2[i];
            if (!defaults2 || obj[key] === void 0)
              obj[key] = source[key];
          }
        }
        return obj;
      };
    }
    var extend = createAssigner(allKeys);
    var extendOwn = createAssigner(keys);
    var defaults = createAssigner(allKeys, true);
    function ctor() {
      return function() {
      };
    }
    function baseCreate(prototype) {
      if (!isObject(prototype))
        return {};
      if (nativeCreate)
        return nativeCreate(prototype);
      var Ctor = ctor();
      Ctor.prototype = prototype;
      var result2 = new Ctor();
      Ctor.prototype = null;
      return result2;
    }
    function create(prototype, props) {
      var result2 = baseCreate(prototype);
      if (props)
        extendOwn(result2, props);
      return result2;
    }
    function clone(obj) {
      if (!isObject(obj))
        return obj;
      return isArray(obj) ? obj.slice() : extend({}, obj);
    }
    function tap(obj, interceptor) {
      interceptor(obj);
      return obj;
    }
    function toPath$1(path) {
      return isArray(path) ? path : [path];
    }
    _$1.toPath = toPath$1;
    function toPath(path) {
      return _$1.toPath(path);
    }
    function deepGet(obj, path) {
      var length = path.length;
      for (var i = 0; i < length; i++) {
        if (obj == null)
          return void 0;
        obj = obj[path[i]];
      }
      return length ? obj : void 0;
    }
    function get(object2, path, defaultValue) {
      var value = deepGet(object2, toPath(path));
      return isUndefined(value) ? defaultValue : value;
    }
    function has(obj, path) {
      path = toPath(path);
      var length = path.length;
      for (var i = 0; i < length; i++) {
        var key = path[i];
        if (!has$1(obj, key))
          return false;
        obj = obj[key];
      }
      return !!length;
    }
    function identity(value) {
      return value;
    }
    function matcher(attrs) {
      attrs = extendOwn({}, attrs);
      return function(obj) {
        return isMatch(obj, attrs);
      };
    }
    function property(path) {
      path = toPath(path);
      return function(obj) {
        return deepGet(obj, path);
      };
    }
    function optimizeCb(func, context2, argCount) {
      if (context2 === void 0)
        return func;
      switch (argCount == null ? 3 : argCount) {
        case 1:
          return function(value) {
            return func.call(context2, value);
          };
        case 3:
          return function(value, index, collection) {
            return func.call(context2, value, index, collection);
          };
        case 4:
          return function(accumulator, value, index, collection) {
            return func.call(context2, accumulator, value, index, collection);
          };
      }
      return function() {
        return func.apply(context2, arguments);
      };
    }
    function baseIteratee(value, context2, argCount) {
      if (value == null)
        return identity;
      if (isFunction$1(value))
        return optimizeCb(value, context2, argCount);
      if (isObject(value) && !isArray(value))
        return matcher(value);
      return property(value);
    }
    function iteratee(value, context2) {
      return baseIteratee(value, context2, Infinity);
    }
    _$1.iteratee = iteratee;
    function cb(value, context2, argCount) {
      if (_$1.iteratee !== iteratee)
        return _$1.iteratee(value, context2);
      return baseIteratee(value, context2, argCount);
    }
    function mapObject(obj, iteratee2, context2) {
      iteratee2 = cb(iteratee2, context2);
      var _keys = keys(obj), length = _keys.length, results = {};
      for (var index = 0; index < length; index++) {
        var currentKey = _keys[index];
        results[currentKey] = iteratee2(obj[currentKey], currentKey, obj);
      }
      return results;
    }
    function noop() {
    }
    function propertyOf(obj) {
      if (obj == null)
        return noop;
      return function(path) {
        return get(obj, path);
      };
    }
    function times(n, iteratee2, context2) {
      var accum = Array(Math.max(0, n));
      iteratee2 = optimizeCb(iteratee2, context2, 1);
      for (var i = 0; i < n; i++)
        accum[i] = iteratee2(i);
      return accum;
    }
    function random(min2, max2) {
      if (max2 == null) {
        max2 = min2;
        min2 = 0;
      }
      return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
    }
    var now = Date.now || function() {
      return new Date().getTime();
    };
    function createEscaper(map2) {
      var escaper = function(match) {
        return map2[match];
      };
      var source = "(?:" + keys(map2).join("|") + ")";
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, "g");
      return function(string) {
        string = string == null ? "" : "" + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    }
    var escapeMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };
    var _escape = createEscaper(escapeMap);
    var unescapeMap = invert(escapeMap);
    var _unescape = createEscaper(unescapeMap);
    var templateSettings = _$1.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
      "'": "'",
      "\\": "\\",
      "\r": "r",
      "\n": "n",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    function escapeChar(match) {
      return "\\" + escapes[match];
    }
    var bareIdentifier = /^\s*(\w|\$)+\s*$/;
    function template(text, settings, oldSettings) {
      if (!settings && oldSettings)
        settings = oldSettings;
      settings = defaults({}, settings, _$1.templateSettings);
      var matcher2 = RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join("|") + "|$", "g");
      var index = 0;
      var source = "__p+='";
      text.replace(matcher2, function(match, escape2, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
        index = offset + match.length;
        if (escape2) {
          source += "'+\n((__t=(" + escape2 + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }
        return match;
      });
      source += "';\n";
      var argument = settings.variable;
      if (argument) {
        if (!bareIdentifier.test(argument))
          throw new Error("variable is not a bare identifier: " + argument);
      } else {
        source = "with(obj||{}){\n" + source + "}\n";
        argument = "obj";
      }
      source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
      var render;
      try {
        render = new Function(argument, "_", source);
      } catch (e) {
        e.source = source;
        throw e;
      }
      var template2 = function(data) {
        return render.call(this, data, _$1);
      };
      template2.source = "function(" + argument + "){\n" + source + "}";
      return template2;
    }
    function result(obj, path, fallback) {
      path = toPath(path);
      var length = path.length;
      if (!length) {
        return isFunction$1(fallback) ? fallback.call(obj) : fallback;
      }
      for (var i = 0; i < length; i++) {
        var prop = obj == null ? void 0 : obj[path[i]];
        if (prop === void 0) {
          prop = fallback;
          i = length;
        }
        obj = isFunction$1(prop) ? prop.call(obj) : prop;
      }
      return obj;
    }
    var idCounter = 0;
    function uniqueId(prefix) {
      var id = ++idCounter + "";
      return prefix ? prefix + id : id;
    }
    function chain(obj) {
      var instance = _$1(obj);
      instance._chain = true;
      return instance;
    }
    function executeBound(sourceFunc, boundFunc, context2, callingContext, args) {
      if (!(callingContext instanceof boundFunc))
        return sourceFunc.apply(context2, args);
      var self2 = baseCreate(sourceFunc.prototype);
      var result2 = sourceFunc.apply(self2, args);
      if (isObject(result2))
        return result2;
      return self2;
    }
    var partial = restArguments(function(func, boundArgs) {
      var placeholder = partial.placeholder;
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length)
          args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    });
    partial.placeholder = _$1;
    var bind = restArguments(function(func, context2, args) {
      if (!isFunction$1(func))
        throw new TypeError("Bind must be called on a function");
      var bound = restArguments(function(callArgs) {
        return executeBound(func, bound, context2, this, args.concat(callArgs));
      });
      return bound;
    });
    var isArrayLike = createSizePropertyCheck(getLength);
    function flatten$1(input, depth, strict, output) {
      output = output || [];
      if (!depth && depth !== 0) {
        depth = Infinity;
      } else if (depth <= 0) {
        return output.concat(input);
      }
      var idx = output.length;
      for (var i = 0, length = getLength(input); i < length; i++) {
        var value = input[i];
        if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
          if (depth > 1) {
            flatten$1(value, depth - 1, strict, output);
            idx = output.length;
          } else {
            var j = 0, len = value.length;
            while (j < len)
              output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }
      return output;
    }
    var bindAll = restArguments(function(obj, keys2) {
      keys2 = flatten$1(keys2, false, false);
      var index = keys2.length;
      if (index < 1)
        throw new Error("bindAll must be passed function names");
      while (index--) {
        var key = keys2[index];
        obj[key] = bind(obj[key], obj);
      }
      return obj;
    });
    function memoize(func, hasher) {
      var memoize2 = function(key) {
        var cache = memoize2.cache;
        var address = "" + (hasher ? hasher.apply(this, arguments) : key);
        if (!has$1(cache, address))
          cache[address] = func.apply(this, arguments);
        return cache[address];
      };
      memoize2.cache = {};
      return memoize2;
    }
    var delay = restArguments(function(func, wait, args) {
      return setTimeout(function() {
        return func.apply(null, args);
      }, wait);
    });
    var defer = partial(delay, _$1, 1);
    function throttle(func, wait, options) {
      var timeout, context2, args, result2;
      var previous = 0;
      if (!options)
        options = {};
      var later = function() {
        previous = options.leading === false ? 0 : now();
        timeout = null;
        result2 = func.apply(context2, args);
        if (!timeout)
          context2 = args = null;
      };
      var throttled = function() {
        var _now = now();
        if (!previous && options.leading === false)
          previous = _now;
        var remaining = wait - (_now - previous);
        context2 = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = _now;
          result2 = func.apply(context2, args);
          if (!timeout)
            context2 = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result2;
      };
      throttled.cancel = function() {
        clearTimeout(timeout);
        previous = 0;
        timeout = context2 = args = null;
      };
      return throttled;
    }
    function debounce(func, wait, immediate) {
      var timeout, previous, args, result2, context2;
      var later = function() {
        var passed = now() - previous;
        if (wait > passed) {
          timeout = setTimeout(later, wait - passed);
        } else {
          timeout = null;
          if (!immediate)
            result2 = func.apply(context2, args);
          if (!timeout)
            args = context2 = null;
        }
      };
      var debounced = restArguments(function(_args) {
        context2 = this;
        args = _args;
        previous = now();
        if (!timeout) {
          timeout = setTimeout(later, wait);
          if (immediate)
            result2 = func.apply(context2, args);
        }
        return result2;
      });
      debounced.cancel = function() {
        clearTimeout(timeout);
        timeout = args = context2 = null;
      };
      return debounced;
    }
    function wrap(func, wrapper) {
      return partial(wrapper, func);
    }
    function negate(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    }
    function compose() {
      var args = arguments;
      var start = args.length - 1;
      return function() {
        var i = start;
        var result2 = args[start].apply(this, arguments);
        while (i--)
          result2 = args[i].call(this, result2);
        return result2;
      };
    }
    function after(times2, func) {
      return function() {
        if (--times2 < 1) {
          return func.apply(this, arguments);
        }
      };
    }
    function before(times2, func) {
      var memo;
      return function() {
        if (--times2 > 0) {
          memo = func.apply(this, arguments);
        }
        if (times2 <= 1)
          func = null;
        return memo;
      };
    }
    var once = partial(before, 2);
    function findKey(obj, predicate, context2) {
      predicate = cb(predicate, context2);
      var _keys = keys(obj), key;
      for (var i = 0, length = _keys.length; i < length; i++) {
        key = _keys[i];
        if (predicate(obj[key], key, obj))
          return key;
      }
    }
    function createPredicateIndexFinder(dir) {
      return function(array, predicate, context2) {
        predicate = cb(predicate, context2);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;
        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array))
            return index;
        }
        return -1;
      };
    }
    var findIndex = createPredicateIndexFinder(1);
    var findLastIndex = createPredicateIndexFinder(-1);
    function sortedIndex(array, obj, iteratee2, context2) {
      iteratee2 = cb(iteratee2, context2, 1);
      var value = iteratee2(obj);
      var low = 0, high = getLength(array);
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee2(array[mid]) < value)
          low = mid + 1;
        else
          high = mid;
      }
      return low;
    }
    function createIndexFinder(dir, predicateFind, sortedIndex2) {
      return function(array, item, idx) {
        var i = 0, length = getLength(array);
        if (typeof idx == "number") {
          if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex2 && idx && length) {
          idx = sortedIndex2(array, item);
          return array[idx] === item ? idx : -1;
        }
        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), isNaN$1);
          return idx >= 0 ? idx + i : -1;
        }
        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item)
            return idx;
        }
        return -1;
      };
    }
    var indexOf = createIndexFinder(1, findIndex, sortedIndex);
    var lastIndexOf = createIndexFinder(-1, findLastIndex);
    function find(obj, predicate, context2) {
      var keyFinder = isArrayLike(obj) ? findIndex : findKey;
      var key = keyFinder(obj, predicate, context2);
      if (key !== void 0 && key !== -1)
        return obj[key];
    }
    function findWhere(obj, attrs) {
      return find(obj, matcher(attrs));
    }
    function each(obj, iteratee2, context2) {
      iteratee2 = optimizeCb(iteratee2, context2);
      var i, length;
      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee2(obj[i], i, obj);
        }
      } else {
        var _keys = keys(obj);
        for (i = 0, length = _keys.length; i < length; i++) {
          iteratee2(obj[_keys[i]], _keys[i], obj);
        }
      }
      return obj;
    }
    function map(obj, iteratee2, context2) {
      iteratee2 = cb(iteratee2, context2);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length, results = Array(length);
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        results[index] = iteratee2(obj[currentKey], currentKey, obj);
      }
      return results;
    }
    function createReduce(dir) {
      var reducer = function(obj, iteratee2, memo, initial2) {
        var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length, index = dir > 0 ? 0 : length - 1;
        if (!initial2) {
          memo = obj[_keys ? _keys[index] : index];
          index += dir;
        }
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = _keys ? _keys[index] : index;
          memo = iteratee2(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
      return function(obj, iteratee2, memo, context2) {
        var initial2 = arguments.length >= 3;
        return reducer(obj, optimizeCb(iteratee2, context2, 4), memo, initial2);
      };
    }
    var reduce = createReduce(1);
    var reduceRight = createReduce(-1);
    function filter(obj, predicate, context2) {
      var results = [];
      predicate = cb(predicate, context2);
      each(obj, function(value, index, list) {
        if (predicate(value, index, list))
          results.push(value);
      });
      return results;
    }
    function reject(obj, predicate, context2) {
      return filter(obj, negate(cb(predicate)), context2);
    }
    function every(obj, predicate, context2) {
      predicate = cb(predicate, context2);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj))
          return false;
      }
      return true;
    }
    function some(obj, predicate, context2) {
      predicate = cb(predicate, context2);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj))
          return true;
      }
      return false;
    }
    function contains(obj, item, fromIndex, guard) {
      if (!isArrayLike(obj))
        obj = values(obj);
      if (typeof fromIndex != "number" || guard)
        fromIndex = 0;
      return indexOf(obj, item, fromIndex) >= 0;
    }
    var invoke = restArguments(function(obj, path, args) {
      var contextPath, func;
      if (isFunction$1(path)) {
        func = path;
      } else {
        path = toPath(path);
        contextPath = path.slice(0, -1);
        path = path[path.length - 1];
      }
      return map(obj, function(context2) {
        var method = func;
        if (!method) {
          if (contextPath && contextPath.length) {
            context2 = deepGet(context2, contextPath);
          }
          if (context2 == null)
            return void 0;
          method = context2[path];
        }
        return method == null ? method : method.apply(context2, args);
      });
    });
    function pluck(obj, key) {
      return map(obj, property(key));
    }
    function where(obj, attrs) {
      return filter(obj, matcher(attrs));
    }
    function max(obj, iteratee2, context2) {
      var result2 = -Infinity, lastComputed = -Infinity, value, computed;
      if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
        obj = isArrayLike(obj) ? obj : values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value != null && value > result2) {
            result2 = value;
          }
        }
      } else {
        iteratee2 = cb(iteratee2, context2);
        each(obj, function(v, index, list) {
          computed = iteratee2(v, index, list);
          if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
            result2 = v;
            lastComputed = computed;
          }
        });
      }
      return result2;
    }
    function min(obj, iteratee2, context2) {
      var result2 = Infinity, lastComputed = Infinity, value, computed;
      if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
        obj = isArrayLike(obj) ? obj : values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value != null && value < result2) {
            result2 = value;
          }
        }
      } else {
        iteratee2 = cb(iteratee2, context2);
        each(obj, function(v, index, list) {
          computed = iteratee2(v, index, list);
          if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
            result2 = v;
            lastComputed = computed;
          }
        });
      }
      return result2;
    }
    var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
    function toArray(obj) {
      if (!obj)
        return [];
      if (isArray(obj))
        return slice.call(obj);
      if (isString(obj)) {
        return obj.match(reStrSymbol);
      }
      if (isArrayLike(obj))
        return map(obj, identity);
      return values(obj);
    }
    function sample(obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj))
          obj = values(obj);
        return obj[random(obj.length - 1)];
      }
      var sample2 = toArray(obj);
      var length = getLength(sample2);
      n = Math.max(Math.min(n, length), 0);
      var last2 = length - 1;
      for (var index = 0; index < n; index++) {
        var rand = random(index, last2);
        var temp = sample2[index];
        sample2[index] = sample2[rand];
        sample2[rand] = temp;
      }
      return sample2.slice(0, n);
    }
    function shuffle(obj) {
      return sample(obj, Infinity);
    }
    function sortBy(obj, iteratee2, context2) {
      var index = 0;
      iteratee2 = cb(iteratee2, context2);
      return pluck(map(obj, function(value, key, list) {
        return {
          value,
          index: index++,
          criteria: iteratee2(value, key, list)
        };
      }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
          if (a > b || a === void 0)
            return 1;
          if (a < b || b === void 0)
            return -1;
        }
        return left.index - right.index;
      }), "value");
    }
    function group(behavior, partition2) {
      return function(obj, iteratee2, context2) {
        var result2 = partition2 ? [[], []] : {};
        iteratee2 = cb(iteratee2, context2);
        each(obj, function(value, index) {
          var key = iteratee2(value, index, obj);
          behavior(result2, value, key);
        });
        return result2;
      };
    }
    var groupBy = group(function(result2, value, key) {
      if (has$1(result2, key))
        result2[key].push(value);
      else
        result2[key] = [value];
    });
    var indexBy = group(function(result2, value, key) {
      result2[key] = value;
    });
    var countBy = group(function(result2, value, key) {
      if (has$1(result2, key))
        result2[key]++;
      else
        result2[key] = 1;
    });
    var partition = group(function(result2, value, pass) {
      result2[pass ? 0 : 1].push(value);
    }, true);
    function size(obj) {
      if (obj == null)
        return 0;
      return isArrayLike(obj) ? obj.length : keys(obj).length;
    }
    function keyInObj(value, key, obj) {
      return key in obj;
    }
    var pick = restArguments(function(obj, keys2) {
      var result2 = {}, iteratee2 = keys2[0];
      if (obj == null)
        return result2;
      if (isFunction$1(iteratee2)) {
        if (keys2.length > 1)
          iteratee2 = optimizeCb(iteratee2, keys2[1]);
        keys2 = allKeys(obj);
      } else {
        iteratee2 = keyInObj;
        keys2 = flatten$1(keys2, false, false);
        obj = Object(obj);
      }
      for (var i = 0, length = keys2.length; i < length; i++) {
        var key = keys2[i];
        var value = obj[key];
        if (iteratee2(value, key, obj))
          result2[key] = value;
      }
      return result2;
    });
    var omit = restArguments(function(obj, keys2) {
      var iteratee2 = keys2[0], context2;
      if (isFunction$1(iteratee2)) {
        iteratee2 = negate(iteratee2);
        if (keys2.length > 1)
          context2 = keys2[1];
      } else {
        keys2 = map(flatten$1(keys2, false, false), String);
        iteratee2 = function(value, key) {
          return !contains(keys2, key);
        };
      }
      return pick(obj, iteratee2, context2);
    });
    function initial(array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    }
    function first(array, n, guard) {
      if (array == null || array.length < 1)
        return n == null || guard ? void 0 : [];
      if (n == null || guard)
        return array[0];
      return initial(array, array.length - n);
    }
    function rest(array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    }
    function last(array, n, guard) {
      if (array == null || array.length < 1)
        return n == null || guard ? void 0 : [];
      if (n == null || guard)
        return array[array.length - 1];
      return rest(array, Math.max(0, array.length - n));
    }
    function compact(array) {
      return filter(array, Boolean);
    }
    function flatten(array, depth) {
      return flatten$1(array, depth, false);
    }
    var difference = restArguments(function(array, rest2) {
      rest2 = flatten$1(rest2, true, true);
      return filter(array, function(value) {
        return !contains(rest2, value);
      });
    });
    var without = restArguments(function(array, otherArrays) {
      return difference(array, otherArrays);
    });
    function uniq(array, isSorted, iteratee2, context2) {
      if (!isBoolean(isSorted)) {
        context2 = iteratee2;
        iteratee2 = isSorted;
        isSorted = false;
      }
      if (iteratee2 != null)
        iteratee2 = cb(iteratee2, context2);
      var result2 = [];
      var seen = [];
      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
        if (isSorted && !iteratee2) {
          if (!i || seen !== computed)
            result2.push(value);
          seen = computed;
        } else if (iteratee2) {
          if (!contains(seen, computed)) {
            seen.push(computed);
            result2.push(value);
          }
        } else if (!contains(result2, value)) {
          result2.push(value);
        }
      }
      return result2;
    }
    var union = restArguments(function(arrays) {
      return uniq(flatten$1(arrays, true, true));
    });
    function intersection(array) {
      var result2 = [];
      var argsLength = arguments.length;
      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (contains(result2, item))
          continue;
        var j;
        for (j = 1; j < argsLength; j++) {
          if (!contains(arguments[j], item))
            break;
        }
        if (j === argsLength)
          result2.push(item);
      }
      return result2;
    }
    function unzip(array) {
      var length = array && max(array, getLength).length || 0;
      var result2 = Array(length);
      for (var index = 0; index < length; index++) {
        result2[index] = pluck(array, index);
      }
      return result2;
    }
    var zip = restArguments(unzip);
    function object(list, values2) {
      var result2 = {};
      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values2) {
          result2[list[i]] = values2[i];
        } else {
          result2[list[i][0]] = list[i][1];
        }
      }
      return result2;
    }
    function range(start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }
      if (!step) {
        step = stop < start ? -1 : 1;
      }
      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range2 = Array(length);
      for (var idx = 0; idx < length; idx++, start += step) {
        range2[idx] = start;
      }
      return range2;
    }
    function chunk(array, count) {
      if (count == null || count < 1)
        return [];
      var result2 = [];
      var i = 0, length = array.length;
      while (i < length) {
        result2.push(slice.call(array, i, i += count));
      }
      return result2;
    }
    function chainResult(instance, obj) {
      return instance._chain ? _$1(obj).chain() : obj;
    }
    function mixin(obj) {
      each(functions(obj), function(name) {
        var func = _$1[name] = obj[name];
        _$1.prototype[name] = function() {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return chainResult(this, func.apply(_$1, args));
        };
      });
      return _$1;
    }
    each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
      var method = ArrayProto[name];
      _$1.prototype[name] = function() {
        var obj = this._wrapped;
        if (obj != null) {
          method.apply(obj, arguments);
          if ((name === "shift" || name === "splice") && obj.length === 0) {
            delete obj[0];
          }
        }
        return chainResult(this, obj);
      };
    });
    each(["concat", "join", "slice"], function(name) {
      var method = ArrayProto[name];
      _$1.prototype[name] = function() {
        var obj = this._wrapped;
        if (obj != null)
          obj = method.apply(obj, arguments);
        return chainResult(this, obj);
      };
    });
    var allExports = {
      __proto__: null,
      VERSION,
      restArguments,
      isObject,
      isNull,
      isUndefined,
      isBoolean,
      isElement,
      isString,
      isNumber,
      isDate,
      isRegExp,
      isError,
      isSymbol,
      isArrayBuffer,
      isDataView: isDataView$1,
      isArray,
      isFunction: isFunction$1,
      isArguments: isArguments$1,
      isFinite: isFinite$1,
      isNaN: isNaN$1,
      isTypedArray: isTypedArray$1,
      isEmpty,
      isMatch,
      isEqual,
      isMap,
      isWeakMap,
      isSet,
      isWeakSet,
      keys,
      allKeys,
      values,
      pairs,
      invert,
      functions,
      methods: functions,
      extend,
      extendOwn,
      assign: extendOwn,
      defaults,
      create,
      clone,
      tap,
      get,
      has,
      mapObject,
      identity,
      constant,
      noop,
      toPath: toPath$1,
      property,
      propertyOf,
      matcher,
      matches: matcher,
      times,
      random,
      now,
      escape: _escape,
      unescape: _unescape,
      templateSettings,
      template,
      result,
      uniqueId,
      chain,
      iteratee,
      partial,
      bind,
      bindAll,
      memoize,
      delay,
      defer,
      throttle,
      debounce,
      wrap,
      negate,
      compose,
      after,
      before,
      once,
      findKey,
      findIndex,
      findLastIndex,
      sortedIndex,
      indexOf,
      lastIndexOf,
      find,
      detect: find,
      findWhere,
      each,
      forEach: each,
      map,
      collect: map,
      reduce,
      foldl: reduce,
      inject: reduce,
      reduceRight,
      foldr: reduceRight,
      filter,
      select: filter,
      reject,
      every,
      all: every,
      some,
      any: some,
      contains,
      includes: contains,
      include: contains,
      invoke,
      pluck,
      where,
      max,
      min,
      shuffle,
      sample,
      sortBy,
      groupBy,
      indexBy,
      countBy,
      partition,
      toArray,
      size,
      pick,
      omit,
      first,
      head: first,
      take: first,
      initial,
      last,
      rest,
      tail: rest,
      drop: rest,
      compact,
      flatten,
      without,
      uniq,
      unique: uniq,
      union,
      intersection,
      difference,
      unzip,
      transpose: unzip,
      zip,
      object,
      range,
      chunk,
      mixin,
      "default": _$1
    };
    var _ = mixin(allExports);
    _._ = _;
    exports.VERSION = VERSION;
    exports._ = _;
    exports._escape = _escape;
    exports._unescape = _unescape;
    exports.after = after;
    exports.allKeys = allKeys;
    exports.before = before;
    exports.bind = bind;
    exports.bindAll = bindAll;
    exports.chain = chain;
    exports.chunk = chunk;
    exports.clone = clone;
    exports.compact = compact;
    exports.compose = compose;
    exports.constant = constant;
    exports.contains = contains;
    exports.countBy = countBy;
    exports.create = create;
    exports.debounce = debounce;
    exports.defaults = defaults;
    exports.defer = defer;
    exports.delay = delay;
    exports.difference = difference;
    exports.each = each;
    exports.every = every;
    exports.extend = extend;
    exports.extendOwn = extendOwn;
    exports.filter = filter;
    exports.find = find;
    exports.findIndex = findIndex;
    exports.findKey = findKey;
    exports.findLastIndex = findLastIndex;
    exports.findWhere = findWhere;
    exports.first = first;
    exports.flatten = flatten;
    exports.functions = functions;
    exports.get = get;
    exports.groupBy = groupBy;
    exports.has = has;
    exports.identity = identity;
    exports.indexBy = indexBy;
    exports.indexOf = indexOf;
    exports.initial = initial;
    exports.intersection = intersection;
    exports.invert = invert;
    exports.invoke = invoke;
    exports.isArguments = isArguments$1;
    exports.isArray = isArray;
    exports.isArrayBuffer = isArrayBuffer;
    exports.isBoolean = isBoolean;
    exports.isDataView = isDataView$1;
    exports.isDate = isDate;
    exports.isElement = isElement;
    exports.isEmpty = isEmpty;
    exports.isEqual = isEqual;
    exports.isError = isError;
    exports.isFinite = isFinite$1;
    exports.isFunction = isFunction$1;
    exports.isMap = isMap;
    exports.isMatch = isMatch;
    exports.isNaN = isNaN$1;
    exports.isNull = isNull;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isRegExp = isRegExp;
    exports.isSet = isSet;
    exports.isString = isString;
    exports.isSymbol = isSymbol;
    exports.isTypedArray = isTypedArray$1;
    exports.isUndefined = isUndefined;
    exports.isWeakMap = isWeakMap;
    exports.isWeakSet = isWeakSet;
    exports.iteratee = iteratee;
    exports.keys = keys;
    exports.last = last;
    exports.lastIndexOf = lastIndexOf;
    exports.map = map;
    exports.mapObject = mapObject;
    exports.matcher = matcher;
    exports.max = max;
    exports.memoize = memoize;
    exports.min = min;
    exports.mixin = mixin;
    exports.negate = negate;
    exports.noop = noop;
    exports.now = now;
    exports.object = object;
    exports.omit = omit;
    exports.once = once;
    exports.pairs = pairs;
    exports.partial = partial;
    exports.partition = partition;
    exports.pick = pick;
    exports.pluck = pluck;
    exports.property = property;
    exports.propertyOf = propertyOf;
    exports.random = random;
    exports.range = range;
    exports.reduce = reduce;
    exports.reduceRight = reduceRight;
    exports.reject = reject;
    exports.rest = rest;
    exports.restArguments = restArguments;
    exports.result = result;
    exports.sample = sample;
    exports.shuffle = shuffle;
    exports.size = size;
    exports.some = some;
    exports.sortBy = sortBy;
    exports.sortedIndex = sortedIndex;
    exports.tap = tap;
    exports.template = template;
    exports.templateSettings = templateSettings;
    exports.throttle = throttle;
    exports.times = times;
    exports.toArray = toArray;
    exports.toPath = toPath$1;
    exports.union = union;
    exports.uniq = uniq;
    exports.uniqueId = uniqueId;
    exports.unzip = unzip;
    exports.values = values;
    exports.where = where;
    exports.without = without;
    exports.wrap = wrap;
    exports.zip = zip;
  }
});

// node_modules/underscore/underscore-node.cjs
var require_underscore_node = __commonJS({
  "node_modules/underscore/underscore-node.cjs"(exports, module2) {
    var underscoreNodeF = require_underscore_node_f();
    module2.exports = underscoreNodeF._;
  }
});

// node_modules/typed-rest-client/opensource/Node-SMB/lib/common.js
var require_common = __commonJS({
  "node_modules/typed-rest-client/opensource/Node-SMB/lib/common.js"(exports, module2) {
    var crypto = require("crypto");
    function zeroextend(str, len) {
      while (str.length < len)
        str = "0" + str;
      return str;
    }
    function oddpar(buf) {
      for (var j = 0; j < buf.length; j++) {
        var par = 1;
        for (var i = 1; i < 8; i++) {
          par = (par + (buf[j] >> i & 1)) % 2;
        }
        buf[j] |= par & 1;
      }
      return buf;
    }
    function expandkey(key56) {
      var key64 = new Buffer(8);
      key64[0] = key56[0] & 254;
      key64[1] = key56[0] << 7 & 255 | key56[1] >> 1;
      key64[2] = key56[1] << 6 & 255 | key56[2] >> 2;
      key64[3] = key56[2] << 5 & 255 | key56[3] >> 3;
      key64[4] = key56[3] << 4 & 255 | key56[4] >> 4;
      key64[5] = key56[4] << 3 & 255 | key56[5] >> 5;
      key64[6] = key56[5] << 2 & 255 | key56[6] >> 6;
      key64[7] = key56[6] << 1 & 255;
      return key64;
    }
    function bintohex(bin) {
      var buf = Buffer.isBuffer(buf) ? buf : new Buffer(bin, "binary");
      var str = buf.toString("hex").toUpperCase();
      return zeroextend(str, 32);
    }
    module2.exports.zeroextend = zeroextend;
    module2.exports.oddpar = oddpar;
    module2.exports.expandkey = expandkey;
    module2.exports.bintohex = bintohex;
  }
});

// node_modules/typed-rest-client/opensource/Node-SMB/lib/smbhash.js
var require_smbhash = __commonJS({
  "node_modules/typed-rest-client/opensource/Node-SMB/lib/smbhash.js"(exports, module2) {
    var crypto = require("crypto");
    var $ = require_common();
    function lmhashbuf(inputstr) {
      var x = inputstr.substring(0, 14).toUpperCase();
      var xl = Buffer.byteLength(x, "ascii");
      var y = new Buffer(14);
      y.write(x, 0, xl, "ascii");
      y.fill(0, xl);
      var halves = [
        $.oddpar($.expandkey(y.slice(0, 7))),
        $.oddpar($.expandkey(y.slice(7, 14)))
      ];
      var buf = new Buffer(16);
      var pos = 0;
      var cts = halves.forEach(function(z) {
        var des = crypto.createCipheriv("DES-ECB", z, "");
        var str = des.update("KGS!@#$%", "binary", "binary");
        buf.write(str, pos, pos + 8, "binary");
        pos += 8;
      });
      return buf;
    }
    function nthashbuf(str) {
      var ucs2 = new Buffer(str, "ucs2");
      var md4 = crypto.createHash("md4");
      md4.update(ucs2);
      return new Buffer(md4.digest("binary"), "binary");
    }
    function lmhash(is) {
      return $.bintohex(lmhashbuf(is));
    }
    function nthash(is) {
      return $.bintohex(nthashbuf(is));
    }
    module2.exports.nthashbuf = nthashbuf;
    module2.exports.lmhashbuf = lmhashbuf;
    module2.exports.nthash = nthash;
    module2.exports.lmhash = lmhash;
  }
});

// node_modules/typed-rest-client/opensource/Node-SMB/lib/ntlm.js
var require_ntlm = __commonJS({
  "node_modules/typed-rest-client/opensource/Node-SMB/lib/ntlm.js"(exports) {
    var crypto = require("crypto");
    var $ = require_common();
    var lmhashbuf = require_smbhash().lmhashbuf;
    var nthashbuf = require_smbhash().nthashbuf;
    function encodeType1(hostname, ntdomain) {
      hostname = hostname.toUpperCase();
      ntdomain = ntdomain.toUpperCase();
      var hostnamelen = Buffer.byteLength(hostname, "ascii");
      var ntdomainlen = Buffer.byteLength(ntdomain, "ascii");
      var pos = 0;
      var buf = new Buffer(32 + hostnamelen + ntdomainlen);
      buf.write("NTLMSSP", pos, 7, "ascii");
      pos += 7;
      buf.writeUInt8(0, pos);
      pos++;
      buf.writeUInt8(1, pos);
      pos++;
      buf.fill(0, pos, pos + 3);
      pos += 3;
      buf.writeUInt16LE(45571, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(ntdomainlen, pos);
      pos += 2;
      buf.writeUInt16LE(ntdomainlen, pos);
      pos += 2;
      var ntdomainoff = 32 + hostnamelen;
      buf.writeUInt16LE(ntdomainoff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(hostnamelen, pos);
      pos += 2;
      buf.writeUInt16LE(hostnamelen, pos);
      pos += 2;
      buf.writeUInt16LE(32, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.write(hostname, 32, hostnamelen, "ascii");
      buf.write(ntdomain, ntdomainoff, ntdomainlen, "ascii");
      return buf;
    }
    function decodeType2(buf) {
      var proto = buf.toString("ascii", 0, 7);
      if (buf[7] !== 0 || proto !== "NTLMSSP")
        throw new Error("magic was not NTLMSSP");
      var type = buf.readUInt8(8);
      if (type !== 2)
        throw new Error("message was not NTLMSSP type 0x02");
      var nonce = buf.slice(24, 32);
      return nonce;
    }
    function encodeType3(username, hostname, ntdomain, nonce, password) {
      hostname = hostname.toUpperCase();
      ntdomain = ntdomain.toUpperCase();
      var lmh = new Buffer(21);
      lmhashbuf(password).copy(lmh);
      lmh.fill(0, 16);
      var nth = new Buffer(21);
      nthashbuf(password).copy(nth);
      nth.fill(0, 16);
      var lmr = makeResponse(lmh, nonce);
      var ntr = makeResponse(nth, nonce);
      var usernamelen = Buffer.byteLength(username, "ucs2");
      var hostnamelen = Buffer.byteLength(hostname, "ucs2");
      var ntdomainlen = Buffer.byteLength(ntdomain, "ucs2");
      var lmrlen = 24;
      var ntrlen = 24;
      var ntdomainoff = 64;
      var usernameoff = ntdomainoff + ntdomainlen;
      var hostnameoff = usernameoff + usernamelen;
      var lmroff = hostnameoff + hostnamelen;
      var ntroff = lmroff + lmrlen;
      var pos = 0;
      var msg_len = 64 + ntdomainlen + usernamelen + hostnamelen + lmrlen + ntrlen;
      var buf = new Buffer(msg_len);
      buf.write("NTLMSSP", pos, 7, "ascii");
      pos += 7;
      buf.writeUInt8(0, pos);
      pos++;
      buf.writeUInt8(3, pos);
      pos++;
      buf.fill(0, pos, pos + 3);
      pos += 3;
      buf.writeUInt16LE(lmrlen, pos);
      pos += 2;
      buf.writeUInt16LE(lmrlen, pos);
      pos += 2;
      buf.writeUInt16LE(lmroff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(ntrlen, pos);
      pos += 2;
      buf.writeUInt16LE(ntrlen, pos);
      pos += 2;
      buf.writeUInt16LE(ntroff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(ntdomainlen, pos);
      pos += 2;
      buf.writeUInt16LE(ntdomainlen, pos);
      pos += 2;
      buf.writeUInt16LE(ntdomainoff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(usernamelen, pos);
      pos += 2;
      buf.writeUInt16LE(usernamelen, pos);
      pos += 2;
      buf.writeUInt16LE(usernameoff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(hostnamelen, pos);
      pos += 2;
      buf.writeUInt16LE(hostnamelen, pos);
      pos += 2;
      buf.writeUInt16LE(hostnameoff, pos);
      pos += 2;
      buf.fill(0, pos, pos + 6);
      pos += 6;
      buf.writeUInt16LE(msg_len, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.writeUInt16LE(33281, pos);
      pos += 2;
      buf.fill(0, pos, pos + 2);
      pos += 2;
      buf.write(ntdomain, ntdomainoff, ntdomainlen, "ucs2");
      buf.write(username, usernameoff, usernamelen, "ucs2");
      buf.write(hostname, hostnameoff, hostnamelen, "ucs2");
      lmr.copy(buf, lmroff, 0, lmrlen);
      ntr.copy(buf, ntroff, 0, ntrlen);
      return buf;
    }
    function makeResponse(hash, nonce) {
      var out = new Buffer(24);
      for (var i = 0; i < 3; i++) {
        var keybuf = $.oddpar($.expandkey(hash.slice(i * 7, i * 7 + 7)));
        var des = crypto.createCipheriv("DES-ECB", keybuf, "");
        var str = des.update(nonce.toString("binary"), "binary", "binary");
        out.write(str, i * 8, i * 8 + 8, "binary");
      }
      return out;
    }
    exports.encodeType1 = encodeType1;
    exports.decodeType2 = decodeType2;
    exports.encodeType3 = encodeType3;
    exports.challengeHeader = function(hostname, domain) {
      return "NTLM " + exports.encodeType1(hostname, domain).toString("base64");
    };
    exports.responseHeader = function(res, url, domain, username, password) {
      var serverNonce = new Buffer((res.headers["www-authenticate"].match(/^NTLM\s+(.+?)(,|\s+|$)/) || [])[1], "base64");
      var hostname = require("url").parse(url).hostname;
      return "NTLM " + exports.encodeType3(username, hostname, domain, exports.decodeType2(serverNonce), password).toString("base64");
    };
    exports.smbhash = require_smbhash();
  }
});

// node_modules/typed-rest-client/handlers/ntlm.js
var require_ntlm2 = __commonJS({
  "node_modules/typed-rest-client/handlers/ntlm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var http = require("http");
    var https = require("https");
    var _ = require_underscore_node();
    var ntlm = require_ntlm();
    var NtlmCredentialHandler = class {
      constructor(username, password, workstation, domain) {
        this._ntlmOptions = {};
        this._ntlmOptions.username = username;
        this._ntlmOptions.password = password;
        this._ntlmOptions.domain = domain || "";
        this._ntlmOptions.workstation = workstation || "";
      }
      prepareRequest(options) {
        if (options.agent) {
          delete options.agent;
        }
      }
      canHandleAuthentication(response) {
        if (response && response.message && response.message.statusCode === 401) {
          const wwwAuthenticate = response.message.headers["www-authenticate"];
          return wwwAuthenticate && wwwAuthenticate.split(", ").indexOf("NTLM") >= 0;
        }
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return new Promise((resolve, reject) => {
          const callbackForResult = function(err, res) {
            if (err) {
              reject(err);
            }
            res.readBody().then(() => {
              resolve(res);
            });
          };
          this.handleAuthenticationPrivate(httpClient, requestInfo, objs, callbackForResult);
        });
      }
      handleAuthenticationPrivate(httpClient, requestInfo, objs, finalCallback) {
        requestInfo.options = _.extend(requestInfo.options, {
          username: this._ntlmOptions.username,
          password: this._ntlmOptions.password,
          domain: this._ntlmOptions.domain,
          workstation: this._ntlmOptions.workstation
        });
        requestInfo.options.agent = httpClient.isSsl ? new https.Agent({ keepAlive: true }) : new http.Agent({ keepAlive: true });
        let self2 = this;
        this.sendType1Message(httpClient, requestInfo, objs, function(err, res) {
          if (err) {
            return finalCallback(err, null, null);
          }
          res.readBody().then(() => {
            setImmediate(function() {
              self2.sendType3Message(httpClient, requestInfo, objs, res, finalCallback);
            });
          });
        });
      }
      sendType1Message(httpClient, requestInfo, objs, finalCallback) {
        const type1HexBuffer = ntlm.encodeType1(this._ntlmOptions.workstation, this._ntlmOptions.domain);
        const type1msg = `NTLM ${type1HexBuffer.toString("base64")}`;
        const type1options = {
          headers: {
            "Connection": "keep-alive",
            "Authorization": type1msg
          },
          timeout: requestInfo.options.timeout || 0,
          agent: requestInfo.httpModule
        };
        const type1info = {};
        type1info.httpModule = requestInfo.httpModule;
        type1info.parsedUrl = requestInfo.parsedUrl;
        type1info.options = _.extend(type1options, _.omit(requestInfo.options, "headers"));
        return httpClient.requestRawWithCallback(type1info, objs, finalCallback);
      }
      sendType3Message(httpClient, requestInfo, objs, res, callback) {
        if (!res.message.headers && !res.message.headers["www-authenticate"]) {
          throw new Error("www-authenticate not found on response of second request");
        }
        const serverNonceRegex = /^NTLM\s+(.+?)(,|\s+|$)/;
        const serverNonce = Buffer.from((res.message.headers["www-authenticate"].match(serverNonceRegex) || [])[1], "base64");
        let type2msg;
        try {
          type2msg = ntlm.decodeType2(serverNonce);
        } catch (error) {
          throw new Error(`Decoding Server's Challenge to Obtain Type2Message failed with error: ${error.message}`);
        }
        const type3msg = ntlm.encodeType3(this._ntlmOptions.username, this._ntlmOptions.workstation, this._ntlmOptions.domain, type2msg, this._ntlmOptions.password).toString("base64");
        const type3options = {
          headers: {
            "Authorization": `NTLM ${type3msg}`,
            "Connection": "Close"
          },
          agent: requestInfo.httpModule
        };
        const type3info = {};
        type3info.httpModule = requestInfo.httpModule;
        type3info.parsedUrl = requestInfo.parsedUrl;
        type3options.headers = _.extend(type3options.headers, requestInfo.options.headers);
        type3info.options = _.extend(type3options, _.omit(requestInfo.options, "headers"));
        return httpClient.requestRawWithCallback(type3info, objs, callback);
      }
    };
    exports.NtlmCredentialHandler = NtlmCredentialHandler;
  }
});

// node_modules/typed-rest-client/handlers/personalaccesstoken.js
var require_personalaccesstoken = __commonJS({
  "node_modules/typed-rest-client/handlers/personalaccesstoken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token, allowCrossOriginAuthentication) {
        this.token = token;
        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;
      }
      prepareRequest(options) {
        if (!this.origin) {
          this.origin = options.host;
        }
        if (this.origin === options.host || this.allowCrossOriginAuthentication) {
          options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
        }
        options.headers["X-TFS-FedAuthRedirect"] = "Suppress";
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/typed-rest-client/Handlers.js
var require_Handlers = __commonJS({
  "node_modules/typed-rest-client/Handlers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var basiccreds_1 = require_basiccreds();
    exports.BasicCredentialHandler = basiccreds_1.BasicCredentialHandler;
    var bearertoken_1 = require_bearertoken();
    exports.BearerCredentialHandler = bearertoken_1.BearerCredentialHandler;
    var ntlm_1 = require_ntlm2();
    exports.NtlmCredentialHandler = ntlm_1.NtlmCredentialHandler;
    var personalaccesstoken_1 = require_personalaccesstoken();
    exports.PersonalAccessTokenCredentialHandler = personalaccesstoken_1.PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/azure-devops-node-api/handlers/basiccreds.js
var require_basiccreds2 = __commonJS({
  "node_modules/azure-devops-node-api/handlers/basiccreds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resthandlers = require_Handlers();
    var BasicCredentialHandler = class extends resthandlers.BasicCredentialHandler {
      constructor(username, password, allowCrossOriginAuthentication = true) {
        super(username, password, allowCrossOriginAuthentication);
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
  }
});

// node_modules/azure-devops-node-api/handlers/bearertoken.js
var require_bearertoken2 = __commonJS({
  "node_modules/azure-devops-node-api/handlers/bearertoken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resthandlers = require_Handlers();
    var BearerCredentialHandler = class extends resthandlers.BearerCredentialHandler {
      constructor(token, allowCrossOriginAuthentication = true) {
        super(token, allowCrossOriginAuthentication);
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
  }
});

// node_modules/azure-devops-node-api/handlers/ntlm.js
var require_ntlm3 = __commonJS({
  "node_modules/azure-devops-node-api/handlers/ntlm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resthandlers = require_Handlers();
    var NtlmCredentialHandler = class extends resthandlers.NtlmCredentialHandler {
      constructor(username, password, workstation, domain) {
        super(username, password, workstation, domain);
      }
    };
    exports.NtlmCredentialHandler = NtlmCredentialHandler;
  }
});

// node_modules/azure-devops-node-api/handlers/personalaccesstoken.js
var require_personalaccesstoken2 = __commonJS({
  "node_modules/azure-devops-node-api/handlers/personalaccesstoken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resthandlers = require_Handlers();
    var PersonalAccessTokenCredentialHandler = class extends resthandlers.PersonalAccessTokenCredentialHandler {
      constructor(token, allowCrossOriginAuthentication = true) {
        super(token, allowCrossOriginAuthentication);
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/azure-devops-node-api/WebApi.js
var require_WebApi = __commonJS({
  "node_modules/azure-devops-node-api/WebApi.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var buildm = require_BuildApi();
    var corem = require_CoreApi();
    var dashboardm = require_DashboardApi();
    var extmgmtm = require_ExtensionManagementApi();
    var featuremgmtm = require_FeatureManagementApi();
    var filecontainerm = require_FileContainerApi();
    var gallerym = require_GalleryApi();
    var gitm = require_GitApi();
    var locationsm = require_LocationsApi();
    var notificationm = require_NotificationApi();
    var policym = require_PolicyApi();
    var profilem = require_ProfileApi();
    var projectm = require_ProjectAnalysisApi();
    var releasem = require_ReleaseApi();
    var securityrolesm = require_SecurityRolesApi();
    var taskagentm = require_TaskAgentApi();
    var taskm = require_TaskApi();
    var testm = require_TestApi();
    var tfvcm = require_TfvcApi();
    var wikim = require_WikiApi();
    var workm = require_WorkApi();
    var workitemtrackingm = require_WorkItemTrackingApi();
    var workitemtrackingprocessm = require_WorkItemTrackingProcessApi();
    var workitemtrackingprocessdefinitionm = require_WorkItemTrackingProcessDefinitionsApi();
    var basicm = require_basiccreds2();
    var bearm = require_bearertoken2();
    var ntlmm = require_ntlm3();
    var patm = require_personalaccesstoken2();
    var rm = require_RestClient();
    var vsom = require_VsoClient();
    var crypto = require("crypto");
    var fs = require("fs");
    var os = require("os");
    var url = require("url");
    var path = require("path");
    var isBrowser = typeof window !== "undefined";
    function getBasicHandler(username, password, allowCrossOriginAuthentication) {
      return new basicm.BasicCredentialHandler(username, password, allowCrossOriginAuthentication);
    }
    exports.getBasicHandler = getBasicHandler;
    function getNtlmHandler(username, password, workstation, domain) {
      return new ntlmm.NtlmCredentialHandler(username, password, workstation, domain);
    }
    exports.getNtlmHandler = getNtlmHandler;
    function getBearerHandler(token, allowCrossOriginAuthentication) {
      return new bearm.BearerCredentialHandler(token, allowCrossOriginAuthentication);
    }
    exports.getBearerHandler = getBearerHandler;
    function getPersonalAccessTokenHandler2(token, allowCrossOriginAuthentication) {
      return new patm.PersonalAccessTokenCredentialHandler(token, allowCrossOriginAuthentication);
    }
    exports.getPersonalAccessTokenHandler = getPersonalAccessTokenHandler2;
    function getHandlerFromToken(token, allowCrossOriginAuthentication) {
      if (token.length === 52) {
        return getPersonalAccessTokenHandler2(token, allowCrossOriginAuthentication);
      } else {
        return getBearerHandler(token, allowCrossOriginAuthentication);
      }
    }
    exports.getHandlerFromToken = getHandlerFromToken;
    var WebApi2 = class {
      constructor(defaultUrl, authHandler, options, requestSettings) {
        this.isNoProxyHost = function(_url) {
          if (!process.env.no_proxy) {
            return false;
          }
          const noProxyDomains = (process.env.no_proxy || "").split(",").map((v) => v.toLowerCase());
          const serverUrl = url.parse(_url).host.toLowerCase();
          return noProxyDomains.indexOf(serverUrl) !== -1;
        };
        this.serverUrl = defaultUrl;
        this.authHandler = authHandler;
        this.options = options || {};
        if (!this.isNoProxyHost(this.serverUrl)) {
          if (!this.options.proxy || !this.options.proxy.proxyUrl) {
            if (global["_vsts_task_lib_proxy"]) {
              let proxyFromEnv = {
                proxyUrl: global["_vsts_task_lib_proxy_url"],
                proxyUsername: global["_vsts_task_lib_proxy_username"],
                proxyPassword: this._readTaskLibSecrets(global["_vsts_task_lib_proxy_password"]),
                proxyBypassHosts: JSON.parse(global["_vsts_task_lib_proxy_bypass"] || "[]")
              };
              this.options.proxy = proxyFromEnv;
            }
          }
        }
        if (!this.options.cert) {
          if (global["_vsts_task_lib_cert"]) {
            let certFromEnv = {
              caFile: global["_vsts_task_lib_cert_ca"],
              certFile: global["_vsts_task_lib_cert_clientcert"],
              keyFile: global["_vsts_task_lib_cert_key"],
              passphrase: this._readTaskLibSecrets(global["_vsts_task_lib_cert_passphrase"])
            };
            this.options.cert = certFromEnv;
          }
        }
        if (!this.options.ignoreSslError) {
          this.options.ignoreSslError = !!global["_vsts_task_lib_skip_cert_validation"];
        }
        let userAgent;
        const nodeApiName = "azure-devops-node-api";
        if (isBrowser) {
          if (requestSettings) {
            userAgent = `${requestSettings.productName}/${requestSettings.productVersion} (${nodeApiName}; ${window.navigator.userAgent})`;
          } else {
            userAgent = `${nodeApiName} (${window.navigator.userAgent})`;
          }
        } else {
          let nodeApiVersion = "unknown";
          const packageJsonPath = path.resolve(__dirname, "package.json");
          if (fs.existsSync(packageJsonPath)) {
            nodeApiVersion = JSON.parse(fs.readFileSync(packageJsonPath, "utf8")).version;
          }
          const osName = os.platform();
          const osVersion = os.release();
          if (requestSettings) {
            userAgent = `${requestSettings.productName}/${requestSettings.productVersion} (${nodeApiName} ${nodeApiVersion}; ${osName} ${osVersion})`;
          } else {
            userAgent = `${nodeApiName}/${nodeApiVersion} (${osName} ${osVersion})`;
          }
        }
        this.rest = new rm.RestClient(userAgent, null, [this.authHandler], this.options);
        this.vsoClient = new vsom.VsoClient(defaultUrl, this.rest);
      }
      static createWithBearerToken(defaultUrl, token, options) {
        let bearerHandler = getBearerHandler(token);
        return new this(defaultUrl, bearerHandler, options);
      }
      connect() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
              let res;
              res = yield this.rest.get(this.vsoClient.resolveUrl("/_apis/connectionData"));
              resolve(res.result);
            } catch (err) {
              reject(err);
            }
          }));
        });
      }
      getBuildApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, buildm.BuildApi.RESOURCE_AREA_ID);
          handlers = handlers || [this.authHandler];
          return new buildm.BuildApi(serverUrl, handlers, this.options);
        });
      }
      getCoreApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "79134c72-4a58-4b42-976c-04e7115f32bf");
          handlers = handlers || [this.authHandler];
          return new corem.CoreApi(serverUrl, handlers, this.options);
        });
      }
      getDashboardApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "31c84e0a-3ece-48fd-a29d-100849af99ba");
          handlers = handlers || [this.authHandler];
          return new dashboardm.DashboardApi(serverUrl, handlers, this.options);
        });
      }
      getExtensionManagementApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "6c2b0933-3600-42ae-bf8b-93d4f7e83594");
          handlers = handlers || [this.authHandler];
          return new extmgmtm.ExtensionManagementApi(serverUrl, handlers, this.options);
        });
      }
      getFeatureManagementApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "");
          handlers = handlers || [this.authHandler];
          return new featuremgmtm.FeatureManagementApi(serverUrl, handlers, this.options);
        });
      }
      getFileContainerApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "");
          handlers = handlers || [this.authHandler];
          return new filecontainerm.FileContainerApi(serverUrl, handlers, this.options);
        });
      }
      getGalleryApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, gallerym.GalleryApi.RESOURCE_AREA_ID);
          handlers = handlers || [this.authHandler];
          return new gallerym.GalleryApi(serverUrl, handlers, this.options);
        });
      }
      getGitApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, gitm.GitApi.RESOURCE_AREA_ID);
          handlers = handlers || [this.authHandler];
          return new gitm.GitApi(serverUrl, handlers, this.options);
        });
      }
      getLocationsApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          let optionsClone = Object.assign({}, this.options);
          optionsClone.allowRetries = true;
          optionsClone.maxRetries = 5;
          serverUrl = (yield serverUrl) || this.serverUrl;
          handlers = handlers || [this.authHandler];
          return new locationsm.LocationsApi(serverUrl, handlers, optionsClone);
        });
      }
      getNotificationApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "");
          handlers = handlers || [this.authHandler];
          return new notificationm.NotificationApi(serverUrl, handlers, this.options);
        });
      }
      getPolicyApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "fb13a388-40dd-4a04-b530-013a739c72ef");
          handlers = handlers || [this.authHandler];
          return new policym.PolicyApi(serverUrl, handlers, this.options);
        });
      }
      getProfileApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "8ccfef3d-2b87-4e99-8ccb-66e343d2daa8");
          handlers = handlers || [this.authHandler];
          return new profilem.ProfileApi(serverUrl, handlers, this.options);
        });
      }
      getProjectAnalysisApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "7658fa33-b1bf-4580-990f-fac5896773d3");
          handlers = handlers || [this.authHandler];
          return new projectm.ProjectAnalysisApi(serverUrl, handlers, this.options);
        });
      }
      getSecurityRolesApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "");
          handlers = handlers || [this.authHandler];
          return new securityrolesm.SecurityRolesApi(serverUrl, handlers, this.options);
        });
      }
      getReleaseApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "efc2f575-36ef-48e9-b672-0c6fb4a48ac5");
          handlers = handlers || [this.authHandler];
          return new releasem.ReleaseApi(serverUrl, handlers, this.options);
        });
      }
      getTaskApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "");
          handlers = handlers || [this.authHandler];
          return new taskm.TaskApi(serverUrl, handlers, this.options);
        });
      }
      getTaskAgentApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "a85b8835-c1a1-4aac-ae97-1c3d0ba72dbd");
          handlers = handlers || [this.authHandler];
          return new taskagentm.TaskAgentApi(serverUrl, handlers, this.options);
        });
      }
      getTestApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "c2aa639c-3ccc-4740-b3b6-ce2a1e1d984e");
          handlers = handlers || [this.authHandler];
          return new testm.TestApi(serverUrl, handlers, this.options);
        });
      }
      getTfvcApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "8aa40520-446d-40e6-89f6-9c9f9ce44c48");
          handlers = handlers || [this.authHandler];
          return new tfvcm.TfvcApi(serverUrl, handlers, this.options);
        });
      }
      getWikiApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "bf7d82a0-8aa5-4613-94ef-6172a5ea01f3");
          handlers = handlers || [this.authHandler];
          return new wikim.WikiApi(serverUrl, handlers, this.options);
        });
      }
      getWorkApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "1d4f49f9-02b9-4e26-b826-2cdb6195f2a9");
          handlers = handlers || [this.authHandler];
          return new workm.WorkApi(serverUrl, handlers, this.options);
        });
      }
      getWorkItemTrackingApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, workitemtrackingm.WorkItemTrackingApi.RESOURCE_AREA_ID);
          handlers = handlers || [this.authHandler];
          return new workitemtrackingm.WorkItemTrackingApi(serverUrl, handlers, this.options);
        });
      }
      getWorkItemTrackingProcessApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "5264459e-e5e0-4bd8-b118-0985e68a4ec5");
          handlers = handlers || [this.authHandler];
          return new workitemtrackingprocessm.WorkItemTrackingProcessApi(serverUrl, handlers, this.options);
        });
      }
      getWorkItemTrackingProcessDefinitionApi(serverUrl, handlers) {
        return __awaiter(this, void 0, void 0, function* () {
          serverUrl = yield this._getResourceAreaUrl(serverUrl || this.serverUrl, "5264459e-e5e0-4bd8-b118-0985e68a4ec5");
          handlers = handlers || [this.authHandler];
          return new workitemtrackingprocessdefinitionm.WorkItemTrackingProcessDefinitionsApi(serverUrl, handlers, this.options);
        });
      }
      _getResourceAreaUrl(serverUrl, resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!resourceId) {
            return serverUrl;
          }
          const resourceAreas = yield this._getResourceAreas();
          if (resourceAreas === void 0) {
            throw new Error(`Failed to retrieve resource areas ' + 'from server: ${serverUrl}`);
          }
          if (!resourceAreas || resourceAreas.length === 0 || resourceAreas.count === 0) {
            return serverUrl;
          }
          for (var resourceArea of resourceAreas) {
            if (resourceArea.id.toLowerCase() === resourceId.toLowerCase()) {
              return resourceArea.locationUrl;
            }
          }
          throw new Error(`Could not find information for resource area ${resourceId} ' + 'from server: ${serverUrl}`);
        });
      }
      _getResourceAreas() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this._resourceAreas) {
            const locationClient = yield this.getLocationsApi();
            this._resourceAreas = yield locationClient.getResourceAreas();
          }
          return this._resourceAreas;
        });
      }
      _readTaskLibSecrets(lookupKey) {
        if (isBrowser) {
          throw new Error("Browsers can't securely keep secrets");
        }
        if (lookupKey && lookupKey.indexOf(":") > 0) {
          let lookupInfo = lookupKey.split(":", 2);
          let keyFile = new Buffer(lookupInfo[0], "base64").toString("utf8");
          let encryptKey = new Buffer(fs.readFileSync(keyFile, "utf8"), "base64");
          let encryptedContent = new Buffer(lookupInfo[1], "base64").toString("utf8");
          let decipher = crypto.createDecipher("aes-256-ctr", encryptKey);
          let decryptedContent = decipher.update(encryptedContent, "hex", "utf8");
          decryptedContent += decipher.final("utf8");
          return decryptedContent;
        }
      }
    };
    exports.WebApi = WebApi2;
  }
});

// node_modules/@actions/core/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(require("os"));
    var utils_1 = require_utils5();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issueCommand = void 0;
    var fs = __importStar(require("fs"));
    var os = __importStar(require("os"));
    var utils_1 = require_utils5();
    function issueCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports.issueCommand = issueCommand;
  }
});

// node_modules/@actions/http-client/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        options.headers["Authorization"] = "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64");
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        options.headers["Authorization"] = "Bearer " + this.token;
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        options.headers["Authorization"] = "Basic " + Buffer.from("PAT:" + this.token).toString("base64");
      }
      canHandleAuthentication(response) {
        return false;
      }
      handleAuthentication(httpClient, requestInfo, objs) {
        return null;
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_http_client();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.result.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils5();
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        const delimiter = "_GitHubActionsFileCommandDelimeter_";
        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;
        file_command_1.issueCommand("ENV", commandValue);
      } else {
        command_1.issueCommand("set-env", { name }, convertedVal);
      }
    }
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
    }
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options).split("\n").filter((x) => x !== "");
      return inputs;
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput(name, value) {
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, value);
    }
    exports.setOutput = setOutput;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    exports.setFailed = setFailed;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports.isDebug = isDebug;
    function debug(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports.debug = debug;
    function error(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.error = error;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.notice = notice;
    function info(message) {
      process.stdout.write(message + os.EOL);
    }
    exports.info = info;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value) {
      command_1.issueCommand("save-state", { name }, value);
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
  }
});

// src/main.ts
var github = __toESM(require_github());
var az = __toESM(require_WebApi());

// src/inputVariables.ts
var core = __toESM(require_core());
function loadInputVariables() {
  return {
    azureDomain: core.getInput("ado_domain", { required: true }),
    azureOrg: core.getInput("ado_org", { required: true }),
    azureProject: core.getInput("ado_project", { required: true }),
    azurePersonalAccessToken: core.getInput("ado_pat", { required: true }),
    inReviewState: core.getInput("in_review_state", { required: true })
  };
}

// src/main.ts
function run() {
  return __async(this, null, function* () {
    let context2 = github.context;
    const isReview = !!context2.payload.pull_request || !!context2.payload.comment;
    if (!isReview) {
      console.log("Not a pull request, push or a comment, skipping.");
      return;
    }
    if (context2.payload.action !== "opened" && context2.payload.action !== "reopened" && context2.payload.action !== "edited" && context2.payload.action !== "created") {
      console.log("Pull request was not opened, reopened or edited, or comment was not created. Skipping.");
      return;
    }
    let workItemIds;
    workItemIds = getWorkItemIds(context2.payload);
    if (!workItemIds || workItemIds && workItemIds.length === 0) {
      console.log("No work item IDs found. Skipping");
      return;
    }
    const inputVariables = loadInputVariables();
    let adoAuthHandler = az.getPersonalAccessTokenHandler(inputVariables.azurePersonalAccessToken);
    let connection = new az.WebApi(`https://${inputVariables.azureDomain}/${inputVariables.azureOrg}`, adoAuthHandler);
    let adoWorkItemTrackingClient = yield connection.getWorkItemTrackingApi();
    console.log(`Getting work items from Azure.`);
    let workItems = yield adoWorkItemTrackingClient.getWorkItems(workItemIds, void 0, void 0, void 0, void 0, inputVariables.azureProject);
    console.log(`Got ${workItems.length} work items. Updating status.`);
    for (const workItem of workItems) {
      let patch = [{
        "op": "replace",
        "path": "/fields/System.State",
        "value": inputVariables.inReviewState
      }];
      yield adoWorkItemTrackingClient.updateWorkItem(void 0, patch, workItem.id, inputVariables.azureProject);
    }
    console.log(`Finished updating work item status to '${inputVariables.inReviewState}'.`);
  });
}
function getWorkItemIds(payload) {
  let workItemIds;
  let comment;
  if (payload.pull_request) {
    comment = payload.pull_request.body;
  } else if (payload.comment) {
    comment = payload.comment.body;
  }
  let workItemIdMatch = comment.match(/AB#\d*/);
  if (workItemIdMatch && workItemIdMatch.length > 0) {
    workItemIds = workItemIdMatch.map((match) => {
      return parseInt(match.split("#")[1]);
    });
  }
  return workItemIds;
}
run();
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
